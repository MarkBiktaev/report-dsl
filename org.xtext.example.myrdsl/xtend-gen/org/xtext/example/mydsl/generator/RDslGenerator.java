/**
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.example.mydsl.rDsl.AggregatorFunction;
import org.xtext.example.mydsl.rDsl.AltText;
import org.xtext.example.mydsl.rDsl.Axe;
import org.xtext.example.mydsl.rDsl.Body;
import org.xtext.example.mydsl.rDsl.Bookmark;
import org.xtext.example.mydsl.rDsl.BooleanLiteral;
import org.xtext.example.mydsl.rDsl.Border;
import org.xtext.example.mydsl.rDsl.BorderAll;
import org.xtext.example.mydsl.rDsl.BorderLine;
import org.xtext.example.mydsl.rDsl.BorderLineStyleType;
import org.xtext.example.mydsl.rDsl.BorderSide;
import org.xtext.example.mydsl.rDsl.BorderWidth;
import org.xtext.example.mydsl.rDsl.Cell;
import org.xtext.example.mydsl.rDsl.Chart;
import org.xtext.example.mydsl.rDsl.ChartGrid;
import org.xtext.example.mydsl.rDsl.ChartSubType;
import org.xtext.example.mydsl.rDsl.Color;
import org.xtext.example.mydsl.rDsl.ColorPalette;
import org.xtext.example.mydsl.rDsl.ColorType;
import org.xtext.example.mydsl.rDsl.Column;
import org.xtext.example.mydsl.rDsl.ComputedDatasetField;
import org.xtext.example.mydsl.rDsl.CrossTable;
import org.xtext.example.mydsl.rDsl.DataType;
import org.xtext.example.mydsl.rDsl.Dataset;
import org.xtext.example.mydsl.rDsl.DatasetField;
import org.xtext.example.mydsl.rDsl.Datasets;
import org.xtext.example.mydsl.rDsl.Datasource;
import org.xtext.example.mydsl.rDsl.DatasourceJDBC;
import org.xtext.example.mydsl.rDsl.DatasourceSample;
import org.xtext.example.mydsl.rDsl.Datasources;
import org.xtext.example.mydsl.rDsl.Display;
import org.xtext.example.mydsl.rDsl.DisplayType;
import org.xtext.example.mydsl.rDsl.DynamicParameterValue;
import org.xtext.example.mydsl.rDsl.DynamicParameterValues;
import org.xtext.example.mydsl.rDsl.DynamicText;
import org.xtext.example.mydsl.rDsl.Font;
import org.xtext.example.mydsl.rDsl.FontSize;
import org.xtext.example.mydsl.rDsl.Grid;
import org.xtext.example.mydsl.rDsl.HAlignment;
import org.xtext.example.mydsl.rDsl.HalignmentType;
import org.xtext.example.mydsl.rDsl.Height;
import org.xtext.example.mydsl.rDsl.HexColor;
import org.xtext.example.mydsl.rDsl.HideAll;
import org.xtext.example.mydsl.rDsl.HideForMore;
import org.xtext.example.mydsl.rDsl.HideForOne;
import org.xtext.example.mydsl.rDsl.Image;
import org.xtext.example.mydsl.rDsl.IndentAll;
import org.xtext.example.mydsl.rDsl.IndentSide;
import org.xtext.example.mydsl.rDsl.IndentValue;
import org.xtext.example.mydsl.rDsl.IntLiteral;
import org.xtext.example.mydsl.rDsl.JSExpression;
import org.xtext.example.mydsl.rDsl.Label;
import org.xtext.example.mydsl.rDsl.LabelProperties;
import org.xtext.example.mydsl.rDsl.Legend;
import org.xtext.example.mydsl.rDsl.LegendVisibility;
import org.xtext.example.mydsl.rDsl.LengthUnit;
import org.xtext.example.mydsl.rDsl.List;
import org.xtext.example.mydsl.rDsl.Literal;
import org.xtext.example.mydsl.rDsl.OrientationType;
import org.xtext.example.mydsl.rDsl.OutputFormatType;
import org.xtext.example.mydsl.rDsl.Padding;
import org.xtext.example.mydsl.rDsl.PageBreak;
import org.xtext.example.mydsl.rDsl.PageBreakValue;
import org.xtext.example.mydsl.rDsl.PageProperties;
import org.xtext.example.mydsl.rDsl.PageSetup;
import org.xtext.example.mydsl.rDsl.Parameter;
import org.xtext.example.mydsl.rDsl.ParameterControlType;
import org.xtext.example.mydsl.rDsl.ParameterType;
import org.xtext.example.mydsl.rDsl.ParameterValue;
import org.xtext.example.mydsl.rDsl.ParameterValueType;
import org.xtext.example.mydsl.rDsl.Parameters;
import org.xtext.example.mydsl.rDsl.Place;
import org.xtext.example.mydsl.rDsl.Report;
import org.xtext.example.mydsl.rDsl.ReportElements;
import org.xtext.example.mydsl.rDsl.RgbColor;
import org.xtext.example.mydsl.rDsl.Row;
import org.xtext.example.mydsl.rDsl.STRING;
import org.xtext.example.mydsl.rDsl.SizeUnit;
import org.xtext.example.mydsl.rDsl.SizeValue;
import org.xtext.example.mydsl.rDsl.SizeValuePercent;
import org.xtext.example.mydsl.rDsl.SizeValueUnit;
import org.xtext.example.mydsl.rDsl.SortType;
import org.xtext.example.mydsl.rDsl.StaticParameterSort;
import org.xtext.example.mydsl.rDsl.StaticParameterValue;
import org.xtext.example.mydsl.rDsl.StaticParameterValues;
import org.xtext.example.mydsl.rDsl.StringColor;
import org.xtext.example.mydsl.rDsl.StringLiteral;
import org.xtext.example.mydsl.rDsl.Style;
import org.xtext.example.mydsl.rDsl.StyleRef;
import org.xtext.example.mydsl.rDsl.Styles;
import org.xtext.example.mydsl.rDsl.Table;
import org.xtext.example.mydsl.rDsl.Text;
import org.xtext.example.mydsl.rDsl.TextStyle;
import org.xtext.example.mydsl.rDsl.Title;
import org.xtext.example.mydsl.rDsl.Toc;
import org.xtext.example.mydsl.rDsl.VAlignment;
import org.xtext.example.mydsl.rDsl.ValignmentType;
import org.xtext.example.mydsl.rDsl.Visibility;
import org.xtext.example.mydsl.rDsl.Whitespace;
import org.xtext.example.mydsl.rDsl.WhitespaceType;
import org.xtext.example.mydsl.rDsl.Width;
import org.xtext.example.mydsl.rDsl.WidthType;
import org.xtext.example.mydsl.rDsl.WidthTypeValue;
import org.xtext.example.mydsl.rDsl.XAxe;
import org.xtext.example.mydsl.rDsl.YAxe;
import org.xtext.example.mydsl.rDsl.xData;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class RDslGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Report> _filter = Iterables.<Report>filter(_iterable, Report.class);
    for (final Report e : _filter) {
      String _name = e.getName();
      String _plus = (_name + "_gen.rptdesign");
      CharSequence _compile = this.compile(e);
      String _string = _compile.toString();
      String _replaceAll = _string.replaceAll("\r\n", "");
      String _replaceAll_1 = _replaceAll.replaceAll("\t", "");
      fsa.generateFile(_plus, _replaceAll_1);
    }
  }
  
  private int A = 0;
  
  private int P = 0;
  
  public CharSequence compile(final Report r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<report xmlns=\"http://www.eclipse.org/birt/2005/design\" version=\"3.2.23\" id=\"");
    _builder.append(this.A = (this.A + 1), "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<property name=\"author\">rDSL-User</property>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<property name=\"createdBy\"></property>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<property name=\"units\">in</property>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<property name=\"layoutPreference\">fixed layout</property>");
    _builder.newLine();
    {
      Datasources _datasources = r.getDatasources();
      boolean _notEquals = (!Objects.equal(_datasources, null));
      if (_notEquals) {
        _builder.append("\t");
        _builder.append("<data-sources>");
        _builder.newLine();
        {
          Datasources _datasources_1 = r.getDatasources();
          EList<Datasource> _datasource = _datasources_1.getDatasource();
          for(final Datasource ds : _datasource) {
            _builder.append("\t");
            _builder.append("\t");
            CharSequence _compile = this.compile(ds);
            _builder.append(_compile, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("</data-sources>");
        _builder.newLine();
      }
    }
    {
      Datasets _datasets = r.getDatasets();
      boolean _notEquals_1 = (!Objects.equal(_datasets, null));
      if (_notEquals_1) {
        _builder.append("\t");
        _builder.append("<data-sets>");
        _builder.newLine();
        {
          Datasets _datasets_1 = r.getDatasets();
          EList<Dataset> _dataset = _datasets_1.getDataset();
          for(final Dataset dt : _dataset) {
            _builder.append("\t");
            _builder.append("\t");
            CharSequence _compile_1 = this.compile(dt);
            _builder.append(_compile_1, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("</data-sets>");
        _builder.newLine();
      }
    }
    {
      Parameters _parameters = r.getParameters();
      boolean _notEquals_2 = (!Objects.equal(_parameters, null));
      if (_notEquals_2) {
        _builder.append("\t");
        _builder.append("<parameters>");
        _builder.newLine();
        {
          Parameters _parameters_1 = r.getParameters();
          EList<Parameter> _parameter = _parameters_1.getParameter();
          for(final Parameter p : _parameter) {
            _builder.append("\t");
            _builder.append("\t");
            CharSequence _compile_2 = this.compile(p);
            _builder.append(_compile_2, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("</parameters>");
        _builder.newLine();
      }
    }
    {
      Styles _styles = r.getStyles();
      boolean _notEquals_3 = (!Objects.equal(_styles, null));
      if (_notEquals_3) {
        _builder.append("\t");
        _builder.append("<styles>");
        _builder.newLine();
        {
          Styles _styles_1 = r.getStyles();
          EList<Style> _style = _styles_1.getStyle();
          for(final Style s : _style) {
            _builder.append("\t");
            _builder.append("\t");
            CharSequence _compile_3 = this.compile(s);
            _builder.append(_compile_3, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("</styles>");
        _builder.newLine();
      }
    }
    {
      PageSetup _pagesetup = r.getPagesetup();
      boolean _notEquals_4 = (!Objects.equal(_pagesetup, null));
      if (_notEquals_4) {
        _builder.append("\t");
        _builder.append("<page-setup>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("<simple-master-page name=\"Simple MasterPage\" id=\"");
        _builder.append(this.A = (this.A + 1), "\t\t\t");
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        PageSetup _pagesetup_1 = r.getPagesetup();
        CharSequence _compile_4 = this.compile(_pagesetup_1);
        _builder.append(_compile_4, "\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("</simple-master-page>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("</page-setup>");
        _builder.newLine();
      }
    }
    {
      Body _body = r.getBody();
      boolean _notEquals_5 = (!Objects.equal(_body, null));
      if (_notEquals_5) {
        _builder.append("\t");
        _builder.append("<body>");
        _builder.newLine();
        {
          Body _body_1 = r.getBody();
          EList<ReportElements> _elements = _body_1.getElements();
          for(final ReportElements b : _elements) {
            _builder.append("\t");
            _builder.append("\t");
            CharSequence _compile_5 = this.compile(b);
            _builder.append(_compile_5, "\t\t");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("</body>");
        _builder.newLine();
      }
    }
    _builder.append("</report>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * DATA ELEMENTS
   */
  public CharSequence compile(final Datasource d) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _type = d.getType();
      if ((_type instanceof DatasourceSample)) {
        _builder.append("<oda-data-source extensionID=\"org.eclipse.birt.report.data.oda.sampledb\" name=\"");
        String _name = d.getName();
        _builder.append(_name, "");
        _builder.append("\" id=\"");
        _builder.append(this.A = (this.A + 1), "");
        _builder.append("\"/>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EObject _type_1 = d.getType();
      if ((_type_1 instanceof DatasourceJDBC)) {
        _builder.append("<oda-data-source extensionID=\"org.eclipse.birt.report.data.oda.jdbc\" name=\"");
        String _name_1 = d.getName();
        _builder.append(_name_1, "");
        _builder.append("\" id=\"");
        _builder.append(this.A = (this.A + 1), "");
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("<list-property name=\"privateDriverProperties\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("<ex-property>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<name>metadataBidiFormatStr</name>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<value>ILYNN</value>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("</ex-property>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("<ex-property>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<name>disabledMetadataBidiFormatStr</name>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("</ex-property>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("<ex-property>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<name>contentBidiFormatStr</name>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<value>ILYNN</value>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("</ex-property>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("<ex-property>");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("<name>disabledContentBidiFormatStr</name>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("</ex-property>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("</list-property>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<property name=\"odaDriverClass\">");
        EObject _type_2 = d.getType();
        String _driver = ((DatasourceJDBC) _type_2).getDriver();
        _builder.append(_driver, "\t");
        _builder.append("</property>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("<property name=\"odaURL\">");
        EObject _type_3 = d.getType();
        String _url = ((DatasourceJDBC) _type_3).getUrl();
        _builder.append(_url, "\t");
        _builder.append("</property>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("<property name=\"odaUser\">");
        EObject _type_4 = d.getType();
        String _user = ((DatasourceJDBC) _type_4).getUser();
        _builder.append(_user, "\t");
        _builder.append("</property>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("<encrypted-property name=\"odaPassword\" encryptionID=\"base64\">");
        EObject _type_5 = d.getType();
        String _password = ((DatasourceJDBC) _type_5).getPassword();
        _builder.append(_password, "\t");
        _builder.append("</encrypted-property>");
        _builder.newLineIfNotEmpty();
        _builder.append("</oda-data-source>");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Dataset d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<oda-data-set extensionID=\"org.eclipse.birt.report.data.oda.jdbc.JdbcSelectDataSet\" name=\"");
    String _name = d.getName();
    _builder.append(_name, "");
    _builder.append("\" id=\"");
    _builder.append(this.A = (this.A + 1), "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<list-property name=\"parameters\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<list-property name=\"parameters\">");
    _builder.newLine();
    {
      EList<Parameter> _parameter = d.getParameter();
      for(final Parameter p : _parameter) {
        _builder.append("\t\t");
        _builder.append(this.P = (this.P + 1), "\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("<structure>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<property name=\"name\">");
        _builder.append(this.P, "\t\t\t");
        _builder.append("</property>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<property name=\"paramName\">");
        String _name_1 = p.getName();
        _builder.append(_name_1, "\t\t\t");
        _builder.append("</property>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<property name=\"nativeName\"></property>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<property name=\"dataType\">integer</property>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<property name=\"nativeDataType\">4</property>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<property name=\"position\">");
        _builder.append(this.P, "\t\t\t");
        _builder.append("</property>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<property name=\"isOptional\">true</property>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<property name=\"allowNull\">true</property>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<property name=\"isInput\">true</property>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<property name=\"isOutput\">false</property>");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("</structure>");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("</list-property>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(this.P = 0, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<property name=\"dataSource\">");
    Datasource _datasourceref = d.getDatasourceref();
    String _name_2 = _datasourceref.getName();
    _builder.append(_name_2, "\t");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<list-property name=\"computedColumns\">");
    _builder.newLine();
    {
      EList<DatasetField> _field = d.getField();
      for(final DatasetField c : _field) {
        {
          if ((c instanceof ComputedDatasetField)) {
            _builder.append("\t");
            CharSequence _compile = this.compile(((ComputedDatasetField)c));
            _builder.append(_compile, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("</list-property>\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<xml-property name=\"queryText\"><![CDATA[");
    String _query = d.getQuery();
    String _string = _query.toString();
    _builder.append(_string, "\t");
    _builder.append("]]></xml-property>");
    _builder.newLineIfNotEmpty();
    _builder.append("</oda-data-set>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ComputedDatasetField c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<structure>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<property name=\"name\">");
    String _name = c.getName();
    _builder.append(_name, "\t");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<property name=\"dataType\">");
    DataType _datatype = c.getDatatype();
    _builder.append(_datatype, "\t");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<property name=\"aggregateFunction\">");
    AggregatorFunction _aggregation = c.getAggregation();
    String _string = _aggregation.toString();
    String _upperCase = _string.toUpperCase();
    _builder.append(_upperCase, "\t");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<list-property name=\"arguments\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<structure>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<property name=\"name\">Expression</property>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<expression name=\"value\">row[\"");
    JSExpression _argument = c.getArgument();
    CharSequence _compile = this.compile(_argument);
    String _string_1 = _compile.toString();
    String _trim = _string_1.trim();
    _builder.append(_trim, "\t\t\t");
    _builder.append("\"]</expression>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("</structure>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</list-property>");
    _builder.newLine();
    {
      JSExpression _filter = c.getFilter();
      boolean _notEquals = (!Objects.equal(_filter, null));
      if (_notEquals) {
        _builder.append("\t");
        _builder.append("<expression name=\"filterExpr\">");
        JSExpression _filter_1 = c.getFilter();
        CharSequence _compile_1 = this.compile(_filter_1);
        _builder.append(_compile_1, "\t");
        _builder.append("</expression>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</structure>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * PAGE SETUP
   */
  public CharSequence compile(final PageSetup s) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<PageProperties> _properties = s.getProperties();
      for(final PageProperties p : _properties) {
        CharSequence _compile = this.compile(p);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  /**
   * PARAMETERS
   */
  public CharSequence compile(final Parameter p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<scalar-parameter name=\"");
    String _name = p.getName();
    _builder.append(_name, "");
    _builder.append("\" id=\"");
    _builder.append(this.A = (this.A + 1), "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      BooleanLiteral _hide = p.getHide();
      boolean _notEquals = (!Objects.equal(_hide, null));
      if (_notEquals) {
        _builder.append("<property name=\"hidden\">");
        BooleanLiteral _hide_1 = p.getHide();
        String _value = _hide_1.getValue();
        _builder.append(_value, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _help = p.getHelp();
      boolean _notEquals_1 = (!Objects.equal(_help, null));
      if (_notEquals_1) {
        _builder.append("<text-property name=\"helpText\">");
        String _help_1 = p.getHelp();
        _builder.append(_help_1, "");
        _builder.append("</text-property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      String _promt = p.getPromt();
      boolean _notEquals_2 = (!Objects.equal(_promt, null));
      if (_notEquals_2) {
        _builder.append("<text-property name=\"promptText\">");
        String _promt_1 = p.getPromt();
        _builder.append(_promt_1, "");
        _builder.append("</text-property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      BooleanLiteral _required = p.getRequired();
      boolean _notEquals_3 = (!Objects.equal(_required, null));
      if (_notEquals_3) {
        _builder.append("<property name=\"isRequired\">");
        BooleanLiteral _required_1 = p.getRequired();
        String _value_1 = _required_1.getValue();
        _builder.append(_value_1, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("<property name=\"valueType\">");
    ParameterValueType _valuetype = p.getValuetype();
    _builder.append(_valuetype, "");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    _builder.append("<property name=\"dataType\">");
    DataType _datatype = p.getDatatype();
    _builder.append(_datatype, "");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    {
      BooleanLiteral _duplicate = p.getDuplicate();
      boolean _notEquals_4 = (!Objects.equal(_duplicate, null));
      if (_notEquals_4) {
        _builder.append("<property name=\"distinct\">");
        BooleanLiteral _duplicate_1 = p.getDuplicate();
        String _value_2 = _duplicate_1.getValue();
        _builder.append(_value_2, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      ParameterValue _values = p.getValues();
      if ((_values instanceof DynamicParameterValues)) {
        ParameterValue _values_1 = p.getValues();
        CharSequence _compile = this.compile(((DynamicParameterValues) _values_1));
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      } else {
        ParameterValue _values_2 = p.getValues();
        if ((_values_2 instanceof StaticParameterValues)) {
          ParameterValue _values_3 = p.getValues();
          CharSequence _compile_1 = this.compile(((StaticParameterValues) _values_3));
          _builder.append(_compile_1, "");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    _builder.append("<property name=\"paramType\">");
    {
      ParameterType _paramtype = p.getParamtype();
      String _string = _paramtype.toString();
      boolean _equals = Objects.equal(_string, "multi");
      if (_equals) {
        ParameterType _paramtype_1 = p.getParamtype();
        _builder.append(_paramtype_1, "");
        _builder.append("-value");
      } else {
        ParameterType _paramtype_2 = p.getParamtype();
        _builder.append(_paramtype_2, "");
      }
    }
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    {
      ParameterControlType _controltype = p.getControltype();
      String _string_1 = _controltype.toString();
      boolean _equals_1 = Objects.equal(_string_1, "combo-box");
      if (_equals_1) {
        _builder.append("<property name=\"controlType\">list-box</property>");
        _builder.newLine();
        _builder.append("<property name=\"mustMatch\">false</property>");
        _builder.newLine();
        _builder.append("<property name=\"fixedOrder\">false</property>");
        _builder.newLine();
      } else {
        ParameterControlType _controltype_1 = p.getControltype();
        String _string_2 = _controltype_1.toString();
        boolean _equals_2 = Objects.equal(_string_2, "text-box");
        if (_equals_2) {
          _builder.append("<property name=\"controlType\">");
          ParameterControlType _controltype_2 = p.getControltype();
          _builder.append(_controltype_2, "");
          _builder.append("</property>");
          _builder.newLineIfNotEmpty();
          _builder.append("<property name=\"concealValue\">false</property>");
          _builder.newLine();
        } else {
          ParameterControlType _controltype_3 = p.getControltype();
          String _string_3 = _controltype_3.toString();
          boolean _equals_3 = Objects.equal(_string_3, "check-box");
          if (_equals_3) {
            _builder.append("<property name=\"controlType\">");
            ParameterControlType _controltype_4 = p.getControltype();
            _builder.append(_controltype_4, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
          } else {
            boolean _or = false;
            ParameterControlType _controltype_5 = p.getControltype();
            String _string_4 = _controltype_5.toString();
            boolean _equals_4 = Objects.equal(_string_4, "list-box");
            if (_equals_4) {
              _or = true;
            } else {
              ParameterControlType _controltype_6 = p.getControltype();
              String _string_5 = _controltype_6.toString();
              boolean _equals_5 = Objects.equal(_string_5, "radio-button");
              _or = _equals_5;
            }
            if (_or) {
              _builder.append("<property name=\"controlType\">");
              ParameterControlType _controltype_7 = p.getControltype();
              _builder.append(_controltype_7, "");
              _builder.append("</property>");
              _builder.newLineIfNotEmpty();
              _builder.append("<property name=\"mustMatch\">true</property>");
              _builder.newLine();
              _builder.append("<property name=\"fixedOrder\">false</property>");
              _builder.newLine();
            }
          }
        }
      }
    }
    _builder.append("<structure name=\"format\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<property name=\"category\">Unformatted</property>");
    _builder.newLine();
    _builder.append("</structure>");
    _builder.newLine();
    _builder.append("</scalar-parameter>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final DynamicParameterValues p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<DynamicParameterValue> _value = p.getValue();
      for(final DynamicParameterValue v : _value) {
        CharSequence _compile = this.compile(((DynamicParameterValue) v));
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final StaticParameterValues p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<simple-property-list name=\"defaultValue\">");
    _builder.newLine();
    {
      EList<StaticParameterValue> _value = p.getValue();
      for(final StaticParameterValue v : _value) {
        {
          boolean _isDefault = v.isDefault();
          if (_isDefault) {
            _builder.append("<value type=\"javascript\">");
            String _value_1 = ((StaticParameterValue) v).getValue();
            _builder.append(_value_1, "");
            _builder.append("</value>");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("</simple-property-list>");
    _builder.newLine();
    _builder.append("<property name=\"sortBy\">");
    StaticParameterSort _sort = p.getSort();
    _builder.append(_sort, "");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    _builder.append("<property name=\"sortDirection\">");
    SortType _sorttype = p.getSorttype();
    _builder.append(_sorttype, "");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    _builder.append("<list-property name=\"selectionList\">");
    _builder.newLine();
    {
      EList<StaticParameterValue> _value_2 = p.getValue();
      for(final StaticParameterValue v_1 : _value_2) {
        CharSequence _compile = this.compile(((StaticParameterValue) v_1));
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</list-property>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final DynamicParameterValue p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<property name=\"dataSetName\">");
    Dataset _dataset = p.getDataset();
    String _name = _dataset.getName();
    _builder.append(_name, "");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    _builder.append("<expression name=\"valueExpr\" type=\"javascript\">dataSetRow[\"");
    JSExpression _value = p.getValue();
    CharSequence _compile = this.compile(_value);
    String _string = _compile.toString();
    String _trim = _string.trim();
    _builder.append(_trim, "");
    _builder.append("\"]</expression>");
    _builder.newLineIfNotEmpty();
    _builder.append("<expression name=\"labelExpr\" type=\"javascript\">dataSetRow[\"");
    JSExpression _label = p.getLabel();
    CharSequence _compile_1 = this.compile(_label);
    String _string_1 = _compile_1.toString();
    String _trim_1 = _string_1.trim();
    _builder.append(_trim_1, "");
    _builder.append("\"]</expression>");
    _builder.newLineIfNotEmpty();
    _builder.append("<expression name=\"sortByColumn\">dataSetRow[\"");
    DatasetField _sort = p.getSort();
    CharSequence _compile_2 = this.compile(_sort);
    String _string_2 = _compile_2.toString();
    String _trim_2 = _string_2.trim();
    _builder.append(_trim_2, "");
    _builder.append("\"]</expression>");
    _builder.newLineIfNotEmpty();
    _builder.append("<property name=\"sortDirection\">");
    SortType _sorttype = p.getSorttype();
    _builder.append(_sorttype, "");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    _builder.append("<simple-property-list name=\"defaultValue\">");
    _builder.newLine();
    {
      EList<JSExpression> _default = p.getDefault();
      for(final JSExpression d : _default) {
        _builder.append("<value type=\"javascript\">");
        CharSequence _compile_3 = this.compile(d);
        _builder.append(_compile_3, "");
        _builder.append("</value>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</simple-property-list>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final StaticParameterValue p) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<structure>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<property name=\"value\">");
    String _value = p.getValue();
    _builder.append(_value, "\t");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<property name=\"label\">");
    String _label = p.getLabel();
    _builder.append(_label, "\t");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    _builder.append("</structure>");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * END OF DATA ELEMENTS
   */
  public CharSequence compile(final ReportElements e) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((e instanceof Grid)) {
        CharSequence _compile = this.compile(((Grid)e));
        _builder.append(_compile, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((e instanceof Label)) {
        CharSequence _compile_1 = this.compile(((Label)e));
        _builder.append(_compile_1, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((e instanceof Text)) {
        CharSequence _compile_2 = this.compile(((Text)e));
        _builder.append(_compile_2, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((e instanceof DynamicText)) {
        CharSequence _compile_3 = this.compile(((DynamicText)e));
        _builder.append(_compile_3, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((e instanceof xData)) {
        CharSequence _compile_4 = this.compile(((xData)e));
        _builder.append(_compile_4, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((e instanceof Image)) {
        CharSequence _compile_5 = this.compile(((Image)e));
        _builder.append(_compile_5, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((e instanceof Chart)) {
        CharSequence _compile_6 = this.compile(((Chart)e));
        _builder.append(_compile_6, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((e instanceof List)) {
        CharSequence _compile_7 = this.compile(((List)e));
        _builder.append(_compile_7, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((e instanceof Table)) {
        CharSequence _compile_8 = this.compile(((Table)e));
        _builder.append(_compile_8, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      if ((e instanceof CrossTable)) {
        CharSequence _compile_9 = this.compile(((CrossTable)e));
        _builder.append(_compile_9, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * REPORT ELEMENTS
   */
  public CharSequence compile(final Grid g) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<grid name=\"");
    String _name = g.getName();
    _builder.append(_name, "");
    _builder.append("\" id=\"");
    _builder.append(this.A = (this.A + 1), "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      EList<LabelProperties> _properties = g.getProperties();
      for(final LabelProperties p : _properties) {
        _builder.append("\t");
        CharSequence _compile = this.compile(p);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Column> _columns = g.getColumns();
      for(final Column c : _columns) {
        _builder.append("\t");
        CharSequence _compile_1 = this.compile(c);
        _builder.append(_compile_1, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Row> _rows = g.getRows();
      for(final Row r : _rows) {
        _builder.append("\t");
        CharSequence _compile_2 = this.compile(r);
        _builder.append(_compile_2, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</grid>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Column c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<column id=\"");
    _builder.append(this.A = (this.A + 1), "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      EList<LabelProperties> _properties = c.getProperties();
      for(final LabelProperties p : _properties) {
        CharSequence _compile = this.compile(p);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</column>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Row r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<row id=\"");
    _builder.append(this.A = (this.A + 1), "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      EList<LabelProperties> _properties = r.getProperties();
      for(final LabelProperties p : _properties) {
        CharSequence _compile = this.compile(p);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Cell> _cells = r.getCells();
      for(final Cell c : _cells) {
        CharSequence _compile_1 = this.compile(c);
        _builder.append(_compile_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</row>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Cell c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<cell id=\"");
    _builder.append(this.A = (this.A + 1), "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      EList<LabelProperties> _properties = c.getProperties();
      for(final LabelProperties p : _properties) {
        CharSequence _compile = this.compile(p);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<ReportElements> _elements = c.getElements();
      for(final ReportElements e : _elements) {
        Object _compile_1 = this.compile(e);
        _builder.append(_compile_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</cell>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Table t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<table name=\"");
    String _name = t.getName();
    _builder.append(_name, "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      EList<LabelProperties> _properties = t.getProperties();
      for(final LabelProperties p : _properties) {
        CharSequence _compile = this.compile(p);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Dataset _dataset = t.getDataset();
      boolean _notEquals = (!Objects.equal(_dataset, null));
      if (_notEquals) {
        Dataset _dataset_1 = t.getDataset();
        CharSequence _boundDataset = this.getBoundDataset(_dataset_1);
        _builder.append(_boundDataset, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Column> _columns = t.getColumns();
      for(final Column c : _columns) {
        CharSequence _compile_1 = this.compile(c);
        _builder.append(_compile_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Row> _headerrows = t.getHeaderrows();
      for(final Row hr : _headerrows) {
        _builder.append("<header>");
        _builder.newLine();
        CharSequence _compile_2 = this.compile(hr);
        _builder.append(_compile_2, "");
        _builder.newLineIfNotEmpty();
        _builder.append("</header>");
        _builder.newLine();
      }
    }
    {
      EList<Row> _detailrows = t.getDetailrows();
      for(final Row dr : _detailrows) {
        _builder.append("<detail>");
        _builder.newLine();
        CharSequence _compile_3 = this.compile(dr);
        _builder.append(_compile_3, "");
        _builder.newLineIfNotEmpty();
        _builder.append("</detail>");
        _builder.newLine();
      }
    }
    {
      EList<Row> _footerrows = t.getFooterrows();
      for(final Row fr : _footerrows) {
        _builder.append("<footer>");
        _builder.newLine();
        CharSequence _compile_4 = this.compile(fr);
        _builder.append(_compile_4, "");
        _builder.newLineIfNotEmpty();
        _builder.append("</footer>");
        _builder.newLine();
      }
    }
    _builder.append("</table>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final List l) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<list name=\"");
    String _name = l.getName();
    _builder.append(_name, "");
    _builder.append("\" id=\"");
    _builder.append(this.A = (this.A + 1), "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      EList<LabelProperties> _properties = l.getProperties();
      for(final LabelProperties p : _properties) {
        CharSequence _compile = this.compile(p);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<ReportElements> _headerelements = l.getHeaderelements();
      for(final ReportElements hr : _headerelements) {
        _builder.append("<header>");
        _builder.newLine();
        Object _compile_1 = this.compile(hr);
        _builder.append(_compile_1, "");
        _builder.newLineIfNotEmpty();
        _builder.append("</header>");
        _builder.newLine();
      }
    }
    {
      EList<ReportElements> _detailelements = l.getDetailelements();
      for(final ReportElements dr : _detailelements) {
        _builder.append("<detail>");
        _builder.newLine();
        Object _compile_2 = this.compile(dr);
        _builder.append(_compile_2, "");
        _builder.newLineIfNotEmpty();
        _builder.append("</detail>");
        _builder.newLine();
      }
    }
    {
      EList<ReportElements> _footerelements = l.getFooterelements();
      for(final ReportElements fr : _footerelements) {
        _builder.append("<footer>");
        _builder.newLine();
        Object _compile_3 = this.compile(fr);
        _builder.append(_compile_3, "");
        _builder.newLineIfNotEmpty();
        _builder.append("</footer>");
        _builder.newLine();
      }
    }
    _builder.append("</list>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final CrossTable t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<cross-table>");
    _builder.newLine();
    {
      EList<LabelProperties> _properties = t.getProperties();
      for(final LabelProperties p : _properties) {
        CharSequence _compile = this.compile(p);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</cross-table>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Label l) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<label name=\"");
    String _name = l.getName();
    _builder.append(_name, "");
    _builder.append("\" id=\"");
    _builder.append(this.A = (this.A + 1), "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<text-property name=\"text\">");
    String _content = l.getContent();
    _builder.append(_content, "\t");
    _builder.append("</text-property>");
    _builder.newLineIfNotEmpty();
    {
      EList<LabelProperties> _properties = l.getProperties();
      for(final LabelProperties p : _properties) {
        _builder.append("\t");
        CharSequence _compile = this.compile(p);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</label>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Text t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<text id=\"");
    _builder.append(this.A = (this.A + 1), "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("<property name=\"contentType\">html</property>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<text-property name=\"content\"><![CDATA[");
    String _content = t.getContent();
    _builder.append(_content, "    ");
    _builder.append("]]></text-property>");
    _builder.newLineIfNotEmpty();
    {
      EList<LabelProperties> _properties = t.getProperties();
      for(final LabelProperties p : _properties) {
        CharSequence _compile = this.compile(p);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</text>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final DynamicText d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<text-data id=\"");
    _builder.append(this.A = (this.A + 1), "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<expression name=\"valueExpr\">");
    JSExpression _content = d.getContent();
    CharSequence _compile = this.compile(_content);
    _builder.append(_compile, "\t");
    _builder.append("</expression>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<property name=\"contentType\">html</property>");
    _builder.newLine();
    {
      EList<LabelProperties> _properties = d.getProperties();
      for(final LabelProperties p : _properties) {
        _builder.append("\t");
        CharSequence _compile_1 = this.compile(p);
        _builder.append(_compile_1, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</text-data>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final xData d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<data id=\"");
    _builder.append(this.A = (this.A + 1), "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<property name=\"resultSetColumn\">");
    JSExpression _content = d.getContent();
    CharSequence _compile = this.compile(_content);
    _builder.append(_compile, "\t");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    {
      EList<LabelProperties> _properties = d.getProperties();
      for(final LabelProperties p : _properties) {
        _builder.append("\t");
        CharSequence _compile_1 = this.compile(p);
        _builder.append(_compile_1, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</data>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Image i) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<image id=\"");
    _builder.append(this.A = (this.A + 1), "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      EList<LabelProperties> _properties = i.getProperties();
      for(final LabelProperties p : _properties) {
        CharSequence _compile = this.compile(p);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _type = i.getType();
      boolean _notEquals = (!Objects.equal(_type, null));
      if (_notEquals) {
        _builder.append("<property name=\"source\">");
        String _type_1 = i.getType();
        String _string = _type_1.toString();
        _builder.append(_string, "");
        _builder.append("</property>");
        _builder.newLineIfNotEmpty();
        _builder.append("<expression name=\"uri\" type=\"javascript\">");
        JSExpression _content = i.getContent();
        CharSequence _compile_1 = this.compile(_content);
        _builder.append(_compile_1, "");
        _builder.append("</expression>\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</image>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Chart c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<extended-item extensionName=\"Chart\" name=\"");
    String _name = c.getName();
    _builder.append(_name, "");
    _builder.append("\" id=\"");
    _builder.append(this.A = (this.A + 1), "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<xml-property name=\"xmlRepresentation\"><![CDATA[ ");
    _builder.newLine();
    {
      STRING _type = c.getType();
      String _string = _type.toString();
      boolean _equals = Objects.equal(_string, "pie");
      if (_equals) {
        _builder.append("\t");
        _builder.append("<model:ChartWithoutAxes ");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("<model:ChartWithAxes ");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:attribute=\"http://www.birt.eclipse.org/ChartModelAttribute\" ");
    _builder.newLine();
    _builder.append("\t\t");
    {
      STRING _type_1 = c.getType();
      String _string_1 = _type_1.toString();
      boolean _notEquals = (!Objects.equal(_string_1, "pie"));
      if (_notEquals) {
        _builder.append("xmlns:data=\"http://www.birt.eclipse.org/ChartModelData\" ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("xmlns:layout=\"http://www.birt.eclipse.org/ChartModelLayout\" ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:model=\"http://www.birt.eclipse.org/ChartModel\" ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("xmlns:type=\"http://www.birt.eclipse.org/ChartModelType\">");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("<Version>2.6.1</Version>");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("<Type>");
    STRING _type_2 = c.getType();
    String _string_2 = _type_2.toString();
    String _firstUpper = StringExtensions.toFirstUpper(_string_2);
    _builder.append(_firstUpper, "\t  ");
    _builder.append(" Chart</Type>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t  ");
    _builder.append("<SubType>");
    {
      STRING _type_3 = c.getType();
      String _string_3 = _type_3.toString();
      boolean _equals_1 = Objects.equal(_string_3, "pie");
      if (_equals_1) {
        _builder.append("standart");
      } else {
        ChartSubType _subtype = c.getSubtype();
        String _string_4 = _subtype.toString();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_string_4);
        _builder.append(_firstUpper_1, "\t  ");
      }
    }
    _builder.append("</SubType>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t  ");
    _builder.append("<Block>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<Children xsi:type=\"layout:TitleBlock\">");
    Title _title = c.getTitle();
    CharSequence _chartTitleBlock = this.chartTitleBlock(_title);
    _builder.append(_chartTitleBlock, "\t    ");
    _builder.append("</Children>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t    ");
    _builder.append("<Children xsi:type=\"layout:Plot\">");
    CharSequence _chartPlotBlock = this.chartPlotBlock();
    _builder.append(_chartPlotBlock, "\t    ");
    _builder.append("</Children>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t    ");
    _builder.append("<Children xsi:type=\"layout:Legend\">");
    Legend _legend = c.getLegend();
    CharSequence _chartLegendBlock = this.chartLegendBlock(_legend);
    _builder.append(_chartLegendBlock, "\t    ");
    _builder.append("</Children>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t    ");
    _builder.append("<Bounds>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<Left>0.0</Left>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<Top>0.0</Top>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<Width>212.0</Width>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<Height>130.0</Height>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("</Bounds>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<Insets>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<Top>3.0</Top>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<Left>3.0</Left>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<Bottom>3.0</Bottom>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<Right>3.0</Right>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("</Insets>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<Row>-1</Row>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<Column>-1</Column>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<Rowspan>-1</Rowspan>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<Columnspan>-1</Columnspan>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<Outline>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<Style>Solid</Style>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<Thickness>1</Thickness>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<Color>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<Transparency>255</Transparency>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<Red>0</Red>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<Green>0</Green>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<Blue>0</Blue>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("</Color>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<Visible>false</Visible>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("</Outline>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<Visible>true</Visible>");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("</Block>");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("<Dimension>Two_Dimensional</Dimension>");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("<Units>Points</Units>");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("<SeriesThickness>10.0</SeriesThickness>");
    _builder.newLine();
    _builder.append("\t  ");
    {
      STRING _type_4 = c.getType();
      String _string_5 = _type_4.toString();
      boolean _equals_2 = Objects.equal(_string_5, "pie");
      if (_equals_2) {
        _builder.append("<GridColumnCount>0</GridColumnCount>");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t  ");
    _builder.append("<ExtendedProperties>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<Name>enable.area.alt</Name>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<Value>false</Value>");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("</ExtendedProperties>");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("<SampleData>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<BaseSampleData>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<DataSetRepresentation>\'A\',\'B\',\'C\',\'D\',\'E\'</DataSetRepresentation>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("</BaseSampleData>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<OrthogonalSampleData>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<DataSetRepresentation>6,4,12,8,10</DataSetRepresentation>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<SeriesDefinitionIndex>0</SeriesDefinitionIndex>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("</OrthogonalSampleData>");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("</SampleData>");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("<Interactivity/>");
    _builder.newLine();
    _builder.append("\t  ");
    CharSequence _emptyMessage = this.emptyMessage();
    _builder.append(_emptyMessage, "\t  ");
    _builder.newLineIfNotEmpty();
    {
      STRING _type_5 = c.getType();
      String _string_6 = _type_5.toString();
      boolean _equals_3 = Objects.equal(_string_6, "pie");
      if (_equals_3) {
        _builder.append("\t");
        _builder.append("<SeriesDefinitions>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("    ");
        _builder.append("<Query>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("      ");
        _builder.append("<Definition></Definition>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("    ");
        _builder.append("</Query>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("    ");
        _builder.append("<SeriesPalette>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("      ");
        {
          ColorPalette _colorpalette = c.getColorpalette();
          boolean _notEquals_1 = (!Objects.equal(_colorpalette, null));
          if (_notEquals_1) {
            ColorPalette _colorpalette_1 = c.getColorpalette();
            CharSequence _compile = this.compile(_colorpalette_1);
            _builder.append(_compile, "\t      ");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("    ");
        _builder.append("</SeriesPalette>");
        _builder.newLine();
      } else {
        _builder.append("\t\t  ");
        _builder.append("<Axes>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("<Type>");
        XAxe _xaxe = c.getXaxe();
        Axe _value = _xaxe.getValue();
        String _type_6 = _value.getType();
        String _firstUpper_2 = StringExtensions.toFirstUpper(_type_6);
        _builder.append(_firstUpper_2, "\t\t    ");
        _builder.append("</Type>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("<Title>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        {
          XAxe _xaxe_1 = c.getXaxe();
          Axe _value_1 = _xaxe_1.getValue();
          Title _title_1 = ((Axe) _value_1).getTitle();
          boolean _notEquals_2 = (!Objects.equal(_title_1, null));
          if (_notEquals_2) {
            XAxe _xaxe_2 = c.getXaxe();
            Axe _value_2 = _xaxe_2.getValue();
            Title _title_2 = ((Axe) _value_2).getTitle();
            CharSequence _compile_1 = this.compile(_title_2);
            _builder.append(_compile_1, "\t\t");
          } else {
            CharSequence _nullTitle = this.nullTitle();
            _builder.append(_nullTitle, "\t\t");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("</Title>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<TitlePosition>");
        {
          XAxe _xaxe_3 = c.getXaxe();
          Axe _value_3 = _xaxe_3.getValue();
          Title _title_3 = ((Axe) _value_3).getTitle();
          boolean _notEquals_3 = (!Objects.equal(_title_3, null));
          if (_notEquals_3) {
            XAxe _xaxe_4 = c.getXaxe();
            Axe _value_4 = _xaxe_4.getValue();
            Title _title_4 = ((Axe) _value_4).getTitle();
            String _place = _title_4.getPlace();
            String _firstUpper_3 = StringExtensions.toFirstUpper(_place);
            _builder.append(_firstUpper_3, "\t");
          }
        }
        _builder.append("</TitlePosition>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t    ");
        _builder.append("<AssociatedAxes>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Type>");
        YAxe _yaxe = c.getYaxe();
        Axe _value_5 = _yaxe.getValue();
        String _type_7 = _value_5.getType();
        String _firstUpper_4 = StringExtensions.toFirstUpper(_type_7);
        _builder.append(_firstUpper_4, "\t\t      ");
        _builder.append("</Type>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("  ");
        _builder.append("<Title>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        {
          YAxe _yaxe_1 = c.getYaxe();
          Axe _value_6 = _yaxe_1.getValue();
          Title _title_5 = ((Axe) _value_6).getTitle();
          boolean _notEquals_4 = (!Objects.equal(_title_5, null));
          if (_notEquals_4) {
            YAxe _yaxe_2 = c.getYaxe();
            Axe _value_7 = _yaxe_2.getValue();
            Title _title_6 = ((Axe) _value_7).getTitle();
            CharSequence _compile_2 = this.compile(_title_6);
            _builder.append(_compile_2, "\t\t");
          } else {
            CharSequence _nullTitle_1 = this.nullTitle();
            _builder.append(_nullTitle_1, "\t\t");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("  ");
        _builder.append("</Title>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("  ");
        _builder.append("<TitlePosition>");
        {
          YAxe _yaxe_3 = c.getYaxe();
          Axe _value_8 = _yaxe_3.getValue();
          Title _title_7 = ((Axe) _value_8).getTitle();
          boolean _notEquals_5 = (!Objects.equal(_title_7, null));
          if (_notEquals_5) {
            YAxe _yaxe_4 = c.getYaxe();
            Axe _value_9 = _yaxe_4.getValue();
            Title _title_8 = ((Axe) _value_9).getTitle();
            String _place_1 = _title_8.getPlace();
            String _firstUpper_5 = StringExtensions.toFirstUpper(_place_1);
            _builder.append(_firstUpper_5, "\t  ");
          }
        }
        _builder.append("</TitlePosition>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t      ");
    _builder.append("<SeriesDefinitions>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<Query>");
    _builder.newLine();
    {
      YAxe _yaxe_5 = c.getYaxe();
      Axe _value_10 = _yaxe_5.getValue();
      JSExpression _groupingby = ((Axe) _value_10).getGroupingby();
      boolean _notEquals_6 = (!Objects.equal(_groupingby, null));
      if (_notEquals_6) {
        _builder.append("\t        ");
        _builder.append("<Definition>");
        _builder.newLine();
        _builder.append("\t        ");
        _builder.append("\t");
        YAxe _yaxe_6 = c.getYaxe();
        Axe _value_11 = _yaxe_6.getValue();
        JSExpression _groupingby_1 = ((Axe) _value_11).getGroupingby();
        CharSequence _compile_3 = this.compile(_groupingby_1);
        _builder.append(_compile_3, "\t        \t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t        ");
        _builder.append("</Definition>");
        _builder.newLine();
        _builder.append("\t        ");
        _builder.append("<Grouping>");
        _builder.newLine();
        _builder.append("\t\t\t          \t");
        _builder.append("<GroupType>Text</GroupType>");
        _builder.newLine();
        _builder.append("\t        ");
        _builder.append("</Grouping>");
        _builder.newLine();
      } else {
        _builder.append("\t        ");
        _builder.append("<Definition></Definition>");
        _builder.newLine();
      }
    }
    _builder.append("\t        ");
    _builder.append("</Query>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<SeriesPalette>");
    _builder.newLine();
    _builder.append("\t          ");
    {
      ColorPalette _colorpalette_2 = c.getColorpalette();
      boolean _notEquals_7 = (!Objects.equal(_colorpalette_2, null));
      if (_notEquals_7) {
        ColorPalette _colorpalette_3 = c.getColorpalette();
        CharSequence _compile_4 = this.compile(_colorpalette_3);
        _builder.append(_compile_4, "\t          ");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t        ");
    _builder.append("</SeriesPalette>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<Series xsi:type=\"type:");
    STRING _type_8 = c.getType();
    String _string_7 = _type_8.toString();
    String _firstUpper_6 = StringExtensions.toFirstUpper(_string_7);
    _builder.append(_firstUpper_6, "\t        ");
    _builder.append("Series\">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t          ");
    _builder.append("<Visible>true</Visible>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<Label>");
    _builder.newLine();
    _builder.append("\t            ");
    CharSequence _nullLabel = this.nullLabel();
    _builder.append(_nullLabel, "\t            ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t          ");
    _builder.append("</Label>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<DataDefinition>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<Definition>");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    {
      YAxe _yaxe_7 = c.getYaxe();
      Axe _value_12 = _yaxe_7.getValue();
      JSExpression _data = ((Axe) _value_12).getData();
      boolean _notEquals_8 = (!Objects.equal(_data, null));
      if (_notEquals_8) {
        YAxe _yaxe_8 = c.getYaxe();
        Axe _value_13 = _yaxe_8.getValue();
        JSExpression _data_1 = ((Axe) _value_13).getData();
        CharSequence _compile_5 = this.compile(_data_1);
        _builder.append(_compile_5, "\t\t\t\t\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("</Definition>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Grouping>");
    _builder.newLine();
    _builder.append("\t              ");
    _builder.append("<GroupType>Text</GroupType>");
    _builder.newLine();
    _builder.append("\t              ");
    _builder.append("<AggregateExpression>Sum</AggregateExpression>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("</Grouping>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("</DataDefinition>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<SeriesIdentifier></SeriesIdentifier>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<DataPoint>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Components>");
    _builder.newLine();
    _builder.append("\t              ");
    _builder.append("<Type>Orthogonal_Value</Type>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("</Components>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Separator>, </Separator>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("</DataPoint>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<LabelPosition>Outside</LabelPosition>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<Stacked>false</Stacked>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<Triggers>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Condition>onmouseover</Condition>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Action>");
    _builder.newLine();
    _builder.append("\t              ");
    _builder.append("<Type>Show_Tooltip</Type>");
    _builder.newLine();
    _builder.append("\t              ");
    _builder.append("<Value xsi:type=\"attribute:TooltipValue\">");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("<Text></Text>");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("<Delay>200</Delay>");
    _builder.newLine();
    _builder.append("\t              ");
    _builder.append("</Value>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("</Action>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("</Triggers>");
    _builder.newLine();
    {
      STRING _type_9 = c.getType();
      String _string_8 = _type_9.toString();
      boolean _equals_4 = Objects.equal(_string_8, "bar");
      if (_equals_4) {
        _builder.append("\t");
        _builder.append("<Riser>Rectangle</Riser>");
        _builder.newLine();
      } else {
        STRING _type_10 = c.getType();
        String _string_9 = _type_10.toString();
        boolean _equals_5 = Objects.equal(_string_9, "line");
        if (_equals_5) {
          _builder.append("\t");
          _builder.append("<Markers>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("  ");
          _builder.append("<Type>Box</Type>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("  ");
          _builder.append("<Size>4</Size>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("  ");
          _builder.append("<Visible>true</Visible>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("  ");
          _builder.append("<Outline>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("    ");
          _builder.append("<Visible>true</Visible>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("  ");
          _builder.append("</Outline>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("</Markers>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("<LineAttributes>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("  ");
          _builder.append("<Style>Solid</Style>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("  ");
          _builder.append("<Thickness>1</Thickness>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("  ");
          _builder.append("<Color>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("    ");
          _builder.append("<Transparency>255</Transparency>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("    ");
          _builder.append("<Red>0</Red>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("    ");
          _builder.append("<Green>0</Green>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("    ");
          _builder.append("<Blue>0</Blue>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("  ");
          _builder.append("</Color>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("  ");
          _builder.append("<Visible>true</Visible>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("</LineAttributes>");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("<PaletteLineColor>true</PaletteLineColor>");
          _builder.newLine();
        } else {
          STRING _type_11 = c.getType();
          String _string_10 = _type_11.toString();
          boolean _equals_6 = Objects.equal(_string_10, "pie");
          if (_equals_6) {
            _builder.append("\t");
            _builder.append("<Explosion>0</Explosion>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("<Title>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("  ");
            _builder.append("<Caption>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("<Value></Value>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("<Font>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("      ");
            _builder.append("<Size>16.0</Size>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("      ");
            _builder.append("<Bold>true</Bold>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("      ");
            _builder.append("<Alignment/>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("</Font>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("  ");
            _builder.append("</Caption>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("  ");
            _builder.append("<Background xsi:type=\"attribute:ColorDefinition\">");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("<Transparency>0</Transparency>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("<Red>255</Red>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("<Green>255</Green>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("<Blue>255</Blue>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("  ");
            _builder.append("</Background>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("  ");
            _builder.append("<Outline>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("<Style>Solid</Style>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("<Thickness>1</Thickness>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("<Color>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("      ");
            _builder.append("<Transparency>255</Transparency>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("      ");
            _builder.append("<Red>0</Red>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("      ");
            _builder.append("<Green>0</Green>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("      ");
            _builder.append("<Blue>0</Blue>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("</Color>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("  ");
            _builder.append("</Outline>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("  ");
            _builder.append("<Insets>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("<Top>0.0</Top>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("<Left>2.0</Left>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("<Bottom>0.0</Bottom>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("    ");
            _builder.append("<Right>3.0</Right>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("  ");
            _builder.append("</Insets>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("  ");
            _builder.append("<Visible>true</Visible>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("</Title>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("<TitlePosition>Below</TitlePosition>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("<LeaderLineAttributes>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("  ");
            _builder.append("<Style>Solid</Style>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("  ");
            _builder.append("<Thickness>1</Thickness>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("  ");
            _builder.append("<Visible>true</Visible>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("</LeaderLineAttributes>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("<LeaderLineLength>10.0</LeaderLineLength>");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t        ");
    _builder.append("</Series>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<Grouping>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<GroupType>Text</GroupType>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<AggregateExpression>Sum</AggregateExpression>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("</Grouping>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("</SeriesDefinitions>");
    _builder.newLine();
    {
      STRING _type_12 = c.getType();
      String _string_11 = _type_12.toString();
      boolean _notEquals_9 = (!Objects.equal(_string_11, "pie"));
      if (_notEquals_9) {
        _builder.append("\t\t      ");
        _builder.append("<Orientation>Vertical</Orientation>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<LineAttributes>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Style>Solid</Style>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Thickness>1</Thickness>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Color>");
        _builder.newLine();
        _builder.append("\t\t          ");
        _builder.append("<Transparency>255</Transparency>");
        _builder.newLine();
        _builder.append("\t\t          ");
        _builder.append("<Red>0</Red>");
        _builder.newLine();
        _builder.append("\t\t          ");
        _builder.append("<Green>0</Green>");
        _builder.newLine();
        _builder.append("\t\t          ");
        _builder.append("<Blue>0</Blue>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("</Color>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Visible>true</Visible>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("</LineAttributes>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Label>");
        _builder.newLine();
        _builder.append("\t\t       ");
        _builder.append("<Caption>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Value></Value>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Font>");
        _builder.newLine();
        _builder.append("\t\t          ");
        _builder.append("<Alignment/>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("</Font>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("</Caption>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Background xsi:type=\"attribute:ColorDefinition\">");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Transparency>0</Transparency>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Red>255</Red>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Green>255</Green>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Blue>255</Blue>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("</Background>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Outline>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Style>Solid</Style>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Thickness>1</Thickness>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Color>");
        _builder.newLine();
        _builder.append("\t\t          ");
        _builder.append("<Transparency>255</Transparency>");
        _builder.newLine();
        _builder.append("\t\t          ");
        _builder.append("<Red>0</Red>");
        _builder.newLine();
        _builder.append("\t\t          ");
        _builder.append("<Green>0</Green>");
        _builder.newLine();
        _builder.append("\t\t          ");
        _builder.append("<Blue>0</Blue>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("</Color>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("</Outline>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Insets>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Top>0.0</Top>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Left>2.0</Left>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Bottom>0.0</Bottom>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Right>3.0</Right>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("</Insets>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Visible>true</Visible>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("</Label>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<LabelPosition>Left</LabelPosition>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<MajorGrid>");
        _builder.newLine();
        _builder.append("\t");
        {
          YAxe _yaxe_9 = c.getYaxe();
          Axe _value_14 = _yaxe_9.getValue();
          ChartGrid _majorgrid = ((Axe) _value_14).getMajorgrid();
          boolean _notEquals_10 = (!Objects.equal(_majorgrid, null));
          if (_notEquals_10) {
            YAxe _yaxe_10 = c.getYaxe();
            Axe _value_15 = _yaxe_10.getValue();
            ChartGrid _majorgrid_1 = ((Axe) _value_15).getMajorgrid();
            CharSequence _compile_6 = this.compile(((ChartGrid) _majorgrid_1));
            _builder.append(_compile_6, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
          } else {
            CharSequence _nullGrid = this.nullGrid();
            _builder.append(_nullGrid, "\t");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t  ");
        _builder.append("</MajorGrid>");
        _builder.newLine();
        _builder.append("\t\t\t  ");
        _builder.append("<MinorGrid>");
        _builder.newLine();
        _builder.append("\t");
        {
          YAxe _yaxe_11 = c.getYaxe();
          Axe _value_16 = _yaxe_11.getValue();
          ChartGrid _minorgrid = ((Axe) _value_16).getMinorgrid();
          boolean _notEquals_11 = (!Objects.equal(_minorgrid, null));
          if (_notEquals_11) {
            YAxe _yaxe_12 = c.getYaxe();
            Axe _value_17 = _yaxe_12.getValue();
            ChartGrid _minorgrid_1 = ((Axe) _value_17).getMinorgrid();
            CharSequence _compile_7 = this.compile(((ChartGrid) _minorgrid_1));
            _builder.append(_compile_7, "\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
          } else {
            CharSequence _nullGrid_1 = this.nullGrid();
            _builder.append(_nullGrid_1, "\t");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t  ");
        _builder.append("</MinorGrid>");
        _builder.newLine();
        _builder.append("\t\t\t  ");
        _builder.append("<Scale>");
        _builder.newLine();
        {
          YAxe _yaxe_13 = c.getYaxe();
          Axe _value_18 = _yaxe_13.getValue();
          ChartGrid _minorgrid_2 = ((Axe) _value_18).getMinorgrid();
          boolean _notEquals_12 = (!Objects.equal(_minorgrid_2, null));
          if (_notEquals_12) {
            _builder.append("<MinorGridsPerUnit>");
            YAxe _yaxe_14 = c.getYaxe();
            Axe _value_19 = _yaxe_14.getValue();
            ChartGrid _minorgrid_3 = ((Axe) _value_19).getMinorgrid();
            int _scale = ((ChartGrid) _minorgrid_3).getScale();
            _builder.append(_scale, "");
            _builder.append("</MinorGridsPerUnit>");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          YAxe _yaxe_15 = c.getYaxe();
          Axe _value_20 = _yaxe_15.getValue();
          ChartGrid _majorgrid_2 = ((Axe) _value_20).getMajorgrid();
          boolean _notEquals_13 = (!Objects.equal(_majorgrid_2, null));
          if (_notEquals_13) {
            _builder.append("<MajorGridsStepNumber>");
            YAxe _yaxe_16 = c.getYaxe();
            Axe _value_21 = _yaxe_16.getValue();
            ChartGrid _majorgrid_3 = ((Axe) _value_21).getMajorgrid();
            int _scale_1 = ((ChartGrid) _majorgrid_3).getScale();
            _builder.append(_scale_1, "");
            _builder.append("</MajorGridsStepNumber>");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t\t  ");
        _builder.append("</Scale>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Origin>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Type>Min</Type>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Value xsi:type=\"data:NumberDataElement\">");
        _builder.newLine();
        _builder.append("\t\t          ");
        _builder.append("<Value>0.0</Value>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("</Value>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("</Origin>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<PrimaryAxis>true</PrimaryAxis>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Percent>false</Percent>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("</AssociatedAxes>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("<SeriesDefinitions>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Query>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Definition></Definition>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("</Query>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<SeriesPalette>");
        _builder.newLine();
        _builder.append("\t\t        ");
        {
          ColorPalette _colorpalette_4 = c.getColorpalette();
          boolean _notEquals_14 = (!Objects.equal(_colorpalette_4, null));
          if (_notEquals_14) {
            ColorPalette _colorpalette_5 = c.getColorpalette();
            CharSequence _compile_8 = this.compile(_colorpalette_5);
            _builder.append(_compile_8, "\t\t        ");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t      ");
        _builder.append("</SeriesPalette>");
        _builder.newLine();
      }
    }
    _builder.append("\t      ");
    _builder.append("<Series>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<Visible>true</Visible>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<Label>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<Caption>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Value></Value>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Font>");
    _builder.newLine();
    _builder.append("\t              ");
    _builder.append("<Alignment/>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("</Font>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("</Caption>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<Background xsi:type=\"attribute:ColorDefinition\">");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Transparency>0</Transparency>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Red>255</Red>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Green>255</Green>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Blue>255</Blue>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("</Background>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<Outline>");
    CharSequence _outlineProperties = this.getOutlineProperties();
    _builder.append(_outlineProperties, "\t          ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t          ");
    _builder.append("</Outline>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<Insets>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Top>0.0</Top>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Left>2.0</Left>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Bottom>0.0</Bottom>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Right>3.0</Right>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("</Insets>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<Visible>false</Visible>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("</Label>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<DataDefinition>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<Definition>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    {
      XAxe _xaxe_5 = c.getXaxe();
      Axe _value_22 = _xaxe_5.getValue();
      JSExpression _data_2 = ((Axe) _value_22).getData();
      boolean _notEquals_15 = (!Objects.equal(_data_2, null));
      if (_notEquals_15) {
        XAxe _xaxe_6 = c.getXaxe();
        Axe _value_23 = _xaxe_6.getValue();
        JSExpression _data_3 = ((Axe) _value_23).getData();
        CharSequence _compile_9 = this.compile(_data_3);
        _builder.append(_compile_9, "\t\t\t\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t  ");
    _builder.append("</Definition>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("</DataDefinition>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<SeriesIdentifier></SeriesIdentifier>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<DataPoint>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<Components>");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("<Type>Orthogonal_Value</Type>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("</Components>");
    _builder.newLine();
    _builder.append("\t          ");
    _builder.append("<Separator>, </Separator>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("</DataPoint>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<LabelPosition>Outside</LabelPosition>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<Stacked>false</Stacked>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("</Series>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("<Grouping>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<Enabled>true</Enabled>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<GroupType>Text</GroupType>");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("<AggregateExpression>Sum</AggregateExpression>");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("</Grouping>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("</SeriesDefinitions>");
    _builder.newLine();
    {
      STRING _type_13 = c.getType();
      String _string_12 = _type_13.toString();
      boolean _notEquals_16 = (!Objects.equal(_string_12, "pie"));
      if (_notEquals_16) {
        _builder.append("\t\t    ");
        _builder.append("<Orientation>Horizontal</Orientation>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("<LineAttributes>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Style>Solid</Style>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Thickness>1</Thickness>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Color>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Transparency>255</Transparency>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Red>0</Red>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Green>0</Green>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Blue>0</Blue>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("</Color>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Visible>true</Visible>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("</LineAttributes>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("<Label>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Caption>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Value></Value>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Font>");
        _builder.newLine();
        _builder.append("\t\t          ");
        _builder.append("<Alignment/>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("</Font>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("</Caption>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Background xsi:type=\"attribute:ColorDefinition\">");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Transparency>0</Transparency>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Red>255</Red>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Green>255</Green>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Blue>255</Blue>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("</Background>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Outline>");
        CharSequence _outlineProperties_1 = this.getOutlineProperties();
        _builder.append(_outlineProperties_1, "\t\t      ");
        _builder.append("</Outline>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t      ");
        _builder.append("<Insets>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Top>0.0</Top>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Left>2.0</Left>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Bottom>0.0</Bottom>");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Right>3.0</Right>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("</Insets>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Visible>true</Visible>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("</Label>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("<LabelPosition>Below</LabelPosition>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("<MajorGrid>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        {
          XAxe _xaxe_7 = c.getXaxe();
          Axe _value_24 = _xaxe_7.getValue();
          ChartGrid _majorgrid_4 = ((Axe) _value_24).getMajorgrid();
          boolean _notEquals_17 = (!Objects.equal(_majorgrid_4, null));
          if (_notEquals_17) {
            XAxe _xaxe_8 = c.getXaxe();
            Axe _value_25 = _xaxe_8.getValue();
            ChartGrid _majorgrid_5 = ((Axe) _value_25).getMajorgrid();
            CharSequence _compile_10 = this.compile(((ChartGrid) _majorgrid_5));
            _builder.append(_compile_10, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
          } else {
            CharSequence _nullGrid_2 = this.nullGrid();
            _builder.append(_nullGrid_2, "\t\t");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("</MajorGrid>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<MinorGrid>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        {
          XAxe _xaxe_9 = c.getXaxe();
          Axe _value_26 = _xaxe_9.getValue();
          ChartGrid _minorgrid_4 = ((Axe) _value_26).getMinorgrid();
          boolean _notEquals_18 = (!Objects.equal(_minorgrid_4, null));
          if (_notEquals_18) {
            XAxe _xaxe_10 = c.getXaxe();
            Axe _value_27 = _xaxe_10.getValue();
            ChartGrid _minorgrid_5 = ((Axe) _value_27).getMinorgrid();
            CharSequence _compile_11 = this.compile(((ChartGrid) _minorgrid_5));
            _builder.append(_compile_11, "\t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
          } else {
            CharSequence _nullGrid_3 = this.nullGrid();
            _builder.append(_nullGrid_3, "\t\t");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("</MinorGrid>");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("<Scale>");
        _builder.newLine();
        {
          XAxe _xaxe_11 = c.getXaxe();
          Axe _value_28 = _xaxe_11.getValue();
          ChartGrid _minorgrid_6 = ((Axe) _value_28).getMinorgrid();
          boolean _notEquals_19 = (!Objects.equal(_minorgrid_6, null));
          if (_notEquals_19) {
            _builder.append("<MinorGridsPerUnit>");
            XAxe _xaxe_12 = c.getXaxe();
            Axe _value_29 = _xaxe_12.getValue();
            ChartGrid _minorgrid_7 = ((Axe) _value_29).getMinorgrid();
            int _scale_2 = ((ChartGrid) _minorgrid_7).getScale();
            _builder.append(_scale_2, "");
            _builder.append("</MinorGridsPerUnit>");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          XAxe _xaxe_13 = c.getXaxe();
          Axe _value_30 = _xaxe_13.getValue();
          ChartGrid _majorgrid_6 = ((Axe) _value_30).getMajorgrid();
          boolean _notEquals_20 = (!Objects.equal(_majorgrid_6, null));
          if (_notEquals_20) {
            _builder.append("\t");
            _builder.append("<MajorGridsStepNumber>");
            XAxe _xaxe_14 = c.getXaxe();
            Axe _value_31 = _xaxe_14.getValue();
            ChartGrid _majorgrid_7 = ((Axe) _value_31).getMajorgrid();
            int _scale_3 = ((ChartGrid) _majorgrid_7).getScale();
            _builder.append(_scale_3, "\t");
            _builder.append("</MajorGridsStepNumber>");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t\t    ");
        _builder.append("</Scale>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("<Origin>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Type>Min</Type>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Value xsi:type=\"data:NumberDataElement\">");
        _builder.newLine();
        _builder.append("\t\t        ");
        _builder.append("<Value>0.0</Value>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("</Value>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("</Origin>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("<PrimaryAxis>true</PrimaryAxis>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("<CategoryAxis>true</CategoryAxis>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("<Percent>false</Percent>");
        _builder.newLine();
        _builder.append("\t\t  ");
        _builder.append("</Axes>");
        _builder.newLine();
        _builder.append("\t\t  ");
        _builder.append("<Orientation>Vertical</Orientation>");
        _builder.newLine();
        _builder.append("\t\t  ");
        _builder.append("<UnitSpacing>50.0</UnitSpacing>");
        _builder.newLine();
        _builder.append("\t\t  ");
        _builder.append("<Rotation>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("<Angles>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<XAngle>-20.0</XAngle>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<YAngle>45.0</YAngle>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<ZAngle>0.0</ZAngle>");
        _builder.newLine();
        _builder.append("\t\t      ");
        _builder.append("<Type>None</Type>");
        _builder.newLine();
        _builder.append("\t\t    ");
        _builder.append("</Angles>");
        _builder.newLine();
        _builder.append("\t\t  ");
        _builder.append("</Rotation>");
        _builder.newLine();
      }
    }
    {
      STRING _type_14 = c.getType();
      String _string_13 = _type_14.toString();
      boolean _equals_7 = Objects.equal(_string_13, "pie");
      if (_equals_7) {
        _builder.append("\t");
        _builder.append("</model:ChartWithoutAxes>");
        _builder.newLine();
      } else {
        _builder.append("\t");
        _builder.append("</model:ChartWithAxes>");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("]]></xml-property>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<property name=\"outputFormat\">SVG</property>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<property name=\"inheritColumns\">true</property>");
    _builder.newLine();
    {
      EList<LabelProperties> _properties = c.getProperties();
      for(final LabelProperties p : _properties) {
        _builder.append("\t");
        CharSequence _compile_12 = this.compile(p);
        _builder.append(_compile_12, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      Dataset _dataset = c.getDataset();
      boolean _notEquals_21 = (!Objects.equal(_dataset, null));
      if (_notEquals_21) {
        _builder.append("\t");
        Dataset _dataset_1 = c.getDataset();
        CharSequence _boundDataset = this.getBoundDataset(_dataset_1);
        _builder.append(_boundDataset, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</extended-item>\t\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence chartTitleBlock(final Title t) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _nullBounds = this.getNullBounds();
    _builder.append(_nullBounds, "");
    _builder.newLineIfNotEmpty();
    _builder.append("<Insets>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Top>3.0</Top>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Left>3.0</Left>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Bottom>3.0</Bottom>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Right>3.0</Right>");
    _builder.newLine();
    _builder.append("</Insets>");
    _builder.newLine();
    _builder.append("<Row>-1</Row>");
    _builder.newLine();
    _builder.append("<Column>-1</Column>");
    _builder.newLine();
    _builder.append("<Rowspan>-1</Rowspan>");
    _builder.newLine();
    _builder.append("<Columnspan>-1</Columnspan>");
    _builder.newLine();
    _builder.append("<Outline>");
    CharSequence _outlineProperties = this.getOutlineProperties();
    _builder.append(_outlineProperties, "");
    _builder.append("</Outline>");
    _builder.newLineIfNotEmpty();
    _builder.append("<Visible>");
    {
      boolean _notEquals = (!Objects.equal(t, null));
      if (_notEquals) {
        _builder.append("true");
      } else {
        _builder.append("false");
      }
    }
    _builder.append("</Visible>");
    _builder.newLineIfNotEmpty();
    _builder.append("<Label>");
    _builder.newLine();
    _builder.append("\t");
    {
      boolean _notEquals_1 = (!Objects.equal(t, null));
      if (_notEquals_1) {
        CharSequence _compile = this.compile(t);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
      } else {
        CharSequence _nullLabel = this.nullLabel();
        _builder.append(_nullLabel, "\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("</Label>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence chartPlotBlock() {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _nullBounds = this.getNullBounds();
    _builder.append(_nullBounds, "");
    _builder.newLineIfNotEmpty();
    _builder.append("<Insets>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Top>3.0</Top>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Left>3.0</Left>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Bottom>3.0</Bottom>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Right>3.0</Right>");
    _builder.newLine();
    _builder.append("</Insets>");
    _builder.newLine();
    _builder.append("<Row>-1</Row>");
    _builder.newLine();
    _builder.append("<Column>-1</Column>");
    _builder.newLine();
    _builder.append("<Rowspan>-1</Rowspan>");
    _builder.newLine();
    _builder.append("<Columnspan>-1</Columnspan>");
    _builder.newLine();
    _builder.append("<Outline>");
    CharSequence _outlineProperties = this.getOutlineProperties();
    _builder.append(_outlineProperties, "");
    _builder.append("</Outline>");
    _builder.newLineIfNotEmpty();
    _builder.append("<Visible>true</Visible>");
    _builder.newLine();
    _builder.append("<HorizontalSpacing>5</HorizontalSpacing>");
    _builder.newLine();
    _builder.append("<VerticalSpacing>5</VerticalSpacing>");
    _builder.newLine();
    _builder.append("<ClientArea>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Outline>");
    CharSequence _outlineProperties_1 = this.getOutlineProperties();
    _builder.append(_outlineProperties_1, "  ");
    _builder.append("</Outline>");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<Insets>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Top>0.0</Top>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Left>0.0</Left>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Bottom>0.0</Bottom>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Right>0.0</Right>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</Insets>");
    _builder.newLine();
    _builder.append("</ClientArea>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence chartLegendBlock(final Legend l) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _nullBounds = this.getNullBounds();
    _builder.append(_nullBounds, "");
    _builder.newLineIfNotEmpty();
    _builder.append("<Anchor>");
    {
      Place _place = l.getPlace();
      String _anchor = _place.getAnchor();
      boolean _equals = Objects.equal(_anchor, "left");
      if (_equals) {
        _builder.append("West");
      } else {
        Place _place_1 = l.getPlace();
        String _anchor_1 = _place_1.getAnchor();
        boolean _equals_1 = Objects.equal(_anchor_1, "right");
        if (_equals_1) {
          _builder.append("East");
        } else {
          Place _place_2 = l.getPlace();
          String _anchor_2 = _place_2.getAnchor();
          boolean _equals_2 = Objects.equal(_anchor_2, "top");
          if (_equals_2) {
            _builder.append("North");
          } else {
            Place _place_3 = l.getPlace();
            String _anchor_3 = _place_3.getAnchor();
            boolean _equals_3 = Objects.equal(_anchor_3, "bottom");
            if (_equals_3) {
              _builder.append("South");
            } else {
              boolean _and = false;
              Place _place_4 = l.getPlace();
              String _anchor_4 = _place_4.getAnchor();
              boolean _equals_4 = Objects.equal(_anchor_4, "middle");
              if (!_equals_4) {
                _and = false;
              } else {
                boolean _or = false;
                Place _place_5 = l.getPlace();
                String _position = _place_5.getPosition();
                boolean _equals_5 = Objects.equal(_position, "right");
                if (_equals_5) {
                  _or = true;
                } else {
                  Place _place_6 = l.getPlace();
                  String _position_1 = _place_6.getPosition();
                  boolean _equals_6 = Objects.equal(_position_1, "left");
                  _or = _equals_6;
                }
                _and = _or;
              }
              if (_and) {
                _builder.append("West");
              } else {
                boolean _and_1 = false;
                Place _place_7 = l.getPlace();
                String _anchor_5 = _place_7.getAnchor();
                boolean _equals_7 = Objects.equal(_anchor_5, "middle");
                if (!_equals_7) {
                  _and_1 = false;
                } else {
                  boolean _or_1 = false;
                  Place _place_8 = l.getPlace();
                  String _position_2 = _place_8.getPosition();
                  boolean _equals_8 = Objects.equal(_position_2, "above");
                  if (_equals_8) {
                    _or_1 = true;
                  } else {
                    Place _place_9 = l.getPlace();
                    String _position_3 = _place_9.getPosition();
                    boolean _equals_9 = Objects.equal(_position_3, "bellow");
                    _or_1 = _equals_9;
                  }
                  _and_1 = _or_1;
                }
                if (_and_1) {
                  _builder.append("South");
                } else {
                  _builder.append("South");
                }
              }
            }
          }
        }
      }
    }
    _builder.append("</Anchor>");
    _builder.newLineIfNotEmpty();
    _builder.append("<Insets>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Top>3.0</Top>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Left>3.0</Left>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Bottom>3.0</Bottom>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Right>3.0</Right>");
    _builder.newLine();
    _builder.append("</Insets>");
    _builder.newLine();
    _builder.append("<Row>-1</Row>");
    _builder.newLine();
    _builder.append("<Column>-1</Column>");
    _builder.newLine();
    _builder.append("<Rowspan>-1</Rowspan>");
    _builder.newLine();
    _builder.append("<Columnspan>-1</Columnspan>");
    _builder.newLine();
    _builder.append("<Outline>");
    CharSequence _outlineProperties = this.getOutlineProperties();
    _builder.append(_outlineProperties, "");
    _builder.append("</Outline>");
    _builder.newLineIfNotEmpty();
    _builder.append("<Visible>");
    LegendVisibility _visibility = l.getVisibility();
    CharSequence _compile = this.compile(((LegendVisibility) _visibility));
    String _string = _compile.toString();
    String _trim = _string.trim();
    _builder.append(_trim, "");
    _builder.append("</Visible> ");
    _builder.newLineIfNotEmpty();
    _builder.append("<ClientArea>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Outline>");
    CharSequence _outlineProperties_1 = this.getOutlineProperties();
    _builder.append(_outlineProperties_1, "  ");
    _builder.append("</Outline>");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<Insets>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Top>2.0</Top>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Left>2.0</Left>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Bottom>2.0</Bottom>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Right>2.0</Right>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</Insets>");
    _builder.newLine();
    _builder.append("</ClientArea>");
    _builder.newLine();
    _builder.append("<Text>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Value></Value>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Font>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Alignment/>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</Font>");
    _builder.newLine();
    _builder.append("</Text>");
    _builder.newLine();
    _builder.append("<Orientation>");
    {
      OrientationType _orientation = l.getOrientation();
      boolean _notEquals = (!Objects.equal(_orientation, null));
      if (_notEquals) {
        OrientationType _orientation_1 = l.getOrientation();
        String _string_1 = _orientation_1.toString();
        String _firstUpper = StringExtensions.toFirstUpper(_string_1);
        _builder.append(_firstUpper, "");
      } else {
        _builder.append("Vertical");
      }
    }
    _builder.append("</Orientation>");
    _builder.newLineIfNotEmpty();
    _builder.append("<Direction>Top_Bottom</Direction>");
    _builder.newLine();
    _builder.append("<Separator>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Style>Solid</Style>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Thickness>1</Thickness>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Color>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Transparency>255</Transparency>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Red>0</Red>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Green>0</Green>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Blue>0</Blue>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</Color>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Visible>true</Visible>");
    _builder.newLine();
    _builder.append("</Separator>");
    _builder.newLine();
    _builder.append("<Position>");
    {
      Place _place_10 = l.getPlace();
      String _position_4 = _place_10.getPosition();
      boolean _notEquals_1 = (!Objects.equal(_position_4, null));
      if (_notEquals_1) {
        Place _place_11 = l.getPlace();
        String _position_5 = _place_11.getPosition();
        String _string_2 = _position_5.toString();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_string_2);
        _builder.append(_firstUpper_1, "");
      } else {
        _builder.append("Right");
      }
    }
    _builder.append("</Position>");
    _builder.newLineIfNotEmpty();
    _builder.append("<ItemType>");
    {
      EObject _eContainer = l.eContainer();
      STRING _type = ((Chart) _eContainer).getType();
      String _string_3 = _type.toString();
      boolean _equals_10 = Objects.equal(_string_3, "line");
      if (_equals_10) {
        _builder.append("Series");
      } else {
        _builder.append("Categories");
      }
    }
    _builder.append("</ItemType>");
    _builder.newLineIfNotEmpty();
    _builder.append("<Title>");
    _builder.newLine();
    _builder.append("\t");
    {
      Title _title = l.getTitle();
      boolean _notEquals_2 = (!Objects.equal(_title, null));
      if (_notEquals_2) {
        Title _title_1 = l.getTitle();
        CharSequence _compile_1 = this.compile(_title_1);
        _builder.append(_compile_1, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
      } else {
        CharSequence _nullTitle = this.nullTitle();
        _builder.append(_nullTitle, "\t");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("</Title>");
    _builder.newLine();
    _builder.append("<TitlePosition>Above</TitlePosition>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final LegendVisibility v) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _notEquals = (!Objects.equal(v, null));
      if (_notEquals) {
        {
          String _value = v.getValue();
          boolean _equals = Objects.equal(_value, "hide");
          if (_equals) {
            _builder.append("false", "");
          }
        }
      } else {
        _builder.append("true", "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence getOutlineProperties() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<Style>Solid</Style>");
    _builder.newLine();
    _builder.append("<Thickness>0</Thickness>");
    _builder.newLine();
    _builder.append("<Color>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Transparency>255</Transparency>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Red>0</Red>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Green>0</Green>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Blue>0</Blue>");
    _builder.newLine();
    _builder.append("</Color>");
    _builder.newLine();
    _builder.append("<Visible>false</Visible>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence xAxeGrid() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence yAxeGrid() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    return _builder;
  }
  
  /**
   * PROPERTIES GROUP
   */
  public CharSequence compile(final LabelProperties p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Font _font = p.getFont();
      boolean _notEquals = (!Objects.equal(_font, null));
      if (_notEquals) {
        _builder.append("<property name=\"fontFamily\">");
        Font _font_1 = p.getFont();
        CharSequence _compile = this.compile(_font_1);
        _builder.append(_compile, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      FontSize _fontSize = p.getFontSize();
      boolean _notEquals_1 = (!Objects.equal(_fontSize, null));
      if (_notEquals_1) {
        _builder.append("<property name=\"fontSize\">");
        FontSize _fontSize_1 = p.getFontSize();
        CharSequence _compile_1 = this.compile(_fontSize_1);
        _builder.append(_compile_1, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Color _backgroundColor = p.getBackgroundColor();
      boolean _notEquals_2 = (!Objects.equal(_backgroundColor, null));
      if (_notEquals_2) {
        _builder.append("<property name=\"backgroundColor\">");
        Color _backgroundColor_1 = p.getBackgroundColor();
        CharSequence _compile_2 = this.compile(_backgroundColor_1);
        _builder.append(_compile_2, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Color _color = p.getColor();
      boolean _notEquals_3 = (!Objects.equal(_color, null));
      if (_notEquals_3) {
        _builder.append("<property name=\"color\">");
        Color _color_1 = p.getColor();
        CharSequence _compile_3 = this.compile(_color_1);
        _builder.append(_compile_3, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      HAlignment _hAlign = p.getHAlign();
      boolean _notEquals_4 = (!Objects.equal(_hAlign, null));
      if (_notEquals_4) {
        _builder.append("<property name=\"textAlign\">");
        HAlignment _hAlign_1 = p.getHAlign();
        CharSequence _compile_4 = this.compile(_hAlign_1);
        _builder.append(_compile_4, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      VAlignment _vAlign = p.getVAlign();
      boolean _notEquals_5 = (!Objects.equal(_vAlign, null));
      if (_notEquals_5) {
        _builder.append("<property name=\"verticalAlign\">");
        VAlignment _vAlign_1 = p.getVAlign();
        ValignmentType _value = _vAlign_1.getValue();
        _builder.append(_value, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      TextStyle _textStyle = p.getTextStyle();
      boolean _notEquals_6 = (!Objects.equal(_textStyle, null));
      if (_notEquals_6) {
        TextStyle _textStyle_1 = p.getTextStyle();
        CharSequence _compile_5 = this.compile(_textStyle_1);
        _builder.append(_compile_5, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Whitespace _whiteSpace = p.getWhiteSpace();
      boolean _notEquals_7 = (!Objects.equal(_whiteSpace, null));
      if (_notEquals_7) {
        _builder.append("<property name=\"whiteSpace\">");
        Whitespace _whiteSpace_1 = p.getWhiteSpace();
        WhitespaceType _value_1 = _whiteSpace_1.getValue();
        String _name = _value_1.getName();
        _builder.append(_name, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Border _border = p.getBorder();
      boolean _notEquals_8 = (!Objects.equal(_border, null));
      if (_notEquals_8) {
        Border _border_1 = p.getBorder();
        CharSequence _compile_6 = this.compile(_border_1);
        _builder.append(_compile_6, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Display _display = p.getDisplay();
      boolean _notEquals_9 = (!Objects.equal(_display, null));
      if (_notEquals_9) {
        Display _display_1 = p.getDisplay();
        CharSequence _compile_7 = this.compile(_display_1);
        _builder.append(_compile_7, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Padding _padding = p.getPadding();
      boolean _notEquals_10 = (!Objects.equal(_padding, null));
      if (_notEquals_10) {
        Padding _padding_1 = p.getPadding();
        CharSequence _compile_8 = this.compile(_padding_1);
        _builder.append(_compile_8, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Padding _margin = p.getMargin();
      boolean _notEquals_11 = (!Objects.equal(_margin, null));
      if (_notEquals_11) {
        Padding _margin_1 = p.getMargin();
        CharSequence _compile_9 = this.compile(_margin_1);
        _builder.append(_compile_9, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Visibility _visibility = p.getVisibility();
      boolean _notEquals_12 = (!Objects.equal(_visibility, null));
      if (_notEquals_12) {
        Visibility _visibility_1 = p.getVisibility();
        CharSequence _compile_10 = this.compile(_visibility_1);
        _builder.append(_compile_10, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      PageBreak _pagebreak = p.getPagebreak();
      boolean _notEquals_13 = (!Objects.equal(_pagebreak, null));
      if (_notEquals_13) {
        PageBreak _pagebreak_1 = p.getPagebreak();
        CharSequence _compile_11 = this.compile(_pagebreak_1);
        _builder.append(_compile_11, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Toc _toc = p.getToc();
      boolean _notEquals_14 = (!Objects.equal(_toc, null));
      if (_notEquals_14) {
        Toc _toc_1 = p.getToc();
        CharSequence _compile_12 = this.compile(_toc_1);
        _builder.append(_compile_12, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Bookmark _bookmark = p.getBookmark();
      boolean _notEquals_15 = (!Objects.equal(_bookmark, null));
      if (_notEquals_15) {
        Bookmark _bookmark_1 = p.getBookmark();
        CharSequence _compile_13 = this.compile(_bookmark_1);
        _builder.append(_compile_13, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      StyleRef _style = p.getStyle();
      boolean _notEquals_16 = (!Objects.equal(_style, null));
      if (_notEquals_16) {
        StyleRef _style_1 = p.getStyle();
        CharSequence _compile_14 = this.compile(_style_1);
        _builder.append(_compile_14, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Height _height = p.getHeight();
      boolean _notEquals_17 = (!Objects.equal(_height, null));
      if (_notEquals_17) {
        Height _height_1 = p.getHeight();
        CharSequence _compile_15 = this.compile(_height_1);
        _builder.append(_compile_15, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Width _width = p.getWidth();
      boolean _notEquals_18 = (!Objects.equal(_width, null));
      if (_notEquals_18) {
        Width _width_1 = p.getWidth();
        CharSequence _compile_16 = this.compile(_width_1);
        _builder.append(_compile_16, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      AltText _alttext = p.getAlttext();
      boolean _notEquals_19 = (!Objects.equal(_alttext, null));
      if (_notEquals_19) {
        AltText _alttext_1 = p.getAlttext();
        CharSequence _compile_17 = this.compile(_alttext_1);
        _builder.append(_compile_17, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final PageProperties p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Font _font = p.getFont();
      boolean _notEquals = (!Objects.equal(_font, null));
      if (_notEquals) {
        _builder.append("<property name=\"fontFamily\">");
        Font _font_1 = p.getFont();
        CharSequence _compile = this.compile(_font_1);
        _builder.append(_compile, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      FontSize _fontSize = p.getFontSize();
      boolean _notEquals_1 = (!Objects.equal(_fontSize, null));
      if (_notEquals_1) {
        _builder.append("<property name=\"fontSize\">");
        FontSize _fontSize_1 = p.getFontSize();
        CharSequence _compile_1 = this.compile(_fontSize_1);
        _builder.append(_compile_1, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Color _backgroundColor = p.getBackgroundColor();
      boolean _notEquals_2 = (!Objects.equal(_backgroundColor, null));
      if (_notEquals_2) {
        _builder.append("<property name=\"backgroundColor\">");
        Color _backgroundColor_1 = p.getBackgroundColor();
        CharSequence _compile_2 = this.compile(_backgroundColor_1);
        _builder.append(_compile_2, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Color _color = p.getColor();
      boolean _notEquals_3 = (!Objects.equal(_color, null));
      if (_notEquals_3) {
        _builder.append("<property name=\"color\">");
        Color _color_1 = p.getColor();
        CharSequence _compile_3 = this.compile(_color_1);
        _builder.append(_compile_3, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      HAlignment _hAlign = p.getHAlign();
      boolean _notEquals_4 = (!Objects.equal(_hAlign, null));
      if (_notEquals_4) {
        _builder.append("<property name=\"textAlign\">");
        HAlignment _hAlign_1 = p.getHAlign();
        CharSequence _compile_4 = this.compile(_hAlign_1);
        _builder.append(_compile_4, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      VAlignment _vAlign = p.getVAlign();
      boolean _notEquals_5 = (!Objects.equal(_vAlign, null));
      if (_notEquals_5) {
        _builder.append("<property name=\"verticalAlign\">");
        VAlignment _vAlign_1 = p.getVAlign();
        CharSequence _compile_5 = this.compile(_vAlign_1);
        _builder.append(_compile_5, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      TextStyle _textStyle = p.getTextStyle();
      boolean _notEquals_6 = (!Objects.equal(_textStyle, null));
      if (_notEquals_6) {
        TextStyle _textStyle_1 = p.getTextStyle();
        CharSequence _compile_6 = this.compile(_textStyle_1);
        _builder.append(_compile_6, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Whitespace _whiteSpace = p.getWhiteSpace();
      boolean _notEquals_7 = (!Objects.equal(_whiteSpace, null));
      if (_notEquals_7) {
        _builder.append("<property name=\"whiteSpace\">");
        Whitespace _whiteSpace_1 = p.getWhiteSpace();
        CharSequence _compile_7 = this.compile(_whiteSpace_1);
        _builder.append(_compile_7, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Border _border = p.getBorder();
      boolean _notEquals_8 = (!Objects.equal(_border, null));
      if (_notEquals_8) {
        Border _border_1 = p.getBorder();
        CharSequence _compile_8 = this.compile(_border_1);
        _builder.append(_compile_8, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Display _display = p.getDisplay();
      boolean _notEquals_9 = (!Objects.equal(_display, null));
      if (_notEquals_9) {
        Display _display_1 = p.getDisplay();
        CharSequence _compile_9 = this.compile(_display_1);
        _builder.append(_compile_9, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Padding _padding = p.getPadding();
      boolean _notEquals_10 = (!Objects.equal(_padding, null));
      if (_notEquals_10) {
        Padding _padding_1 = p.getPadding();
        CharSequence _compile_10 = this.compile(_padding_1);
        _builder.append(_compile_10, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Padding _margin = p.getMargin();
      boolean _notEquals_11 = (!Objects.equal(_margin, null));
      if (_notEquals_11) {
        Padding _margin_1 = p.getMargin();
        CharSequence _compile_11 = this.compile(_margin_1);
        _builder.append(_compile_11, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Visibility _visibility = p.getVisibility();
      boolean _notEquals_12 = (!Objects.equal(_visibility, null));
      if (_notEquals_12) {
        Visibility _visibility_1 = p.getVisibility();
        CharSequence _compile_12 = this.compile(_visibility_1);
        _builder.append(_compile_12, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      PageBreak _pagebreak = p.getPagebreak();
      boolean _notEquals_13 = (!Objects.equal(_pagebreak, null));
      if (_notEquals_13) {
        PageBreak _pagebreak_1 = p.getPagebreak();
        CharSequence _compile_13 = this.compile(_pagebreak_1);
        _builder.append(_compile_13, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Toc _toc = p.getToc();
      boolean _notEquals_14 = (!Objects.equal(_toc, null));
      if (_notEquals_14) {
        Toc _toc_1 = p.getToc();
        CharSequence _compile_14 = this.compile(_toc_1);
        _builder.append(_compile_14, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Bookmark _bookmark = p.getBookmark();
      boolean _notEquals_15 = (!Objects.equal(_bookmark, null));
      if (_notEquals_15) {
        Bookmark _bookmark_1 = p.getBookmark();
        CharSequence _compile_15 = this.compile(_bookmark_1);
        _builder.append(_compile_15, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      StyleRef _style = p.getStyle();
      boolean _notEquals_16 = (!Objects.equal(_style, null));
      if (_notEquals_16) {
        StyleRef _style_1 = p.getStyle();
        CharSequence _compile_16 = this.compile(_style_1);
        _builder.append(_compile_16, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Height _height = p.getHeight();
      boolean _notEquals_17 = (!Objects.equal(_height, null));
      if (_notEquals_17) {
        Height _height_1 = p.getHeight();
        CharSequence _compile_17 = this.compile(_height_1);
        _builder.append(_compile_17, "");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      Width _width = p.getWidth();
      boolean _notEquals_18 = (!Objects.equal(_width, null));
      if (_notEquals_18) {
        Width _width_1 = p.getWidth();
        CharSequence _compile_18 = this.compile(_width_1);
        _builder.append(_compile_18, "");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  /**
   * PROPERTIES
   */
  public CharSequence compile(final Font f) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Font _linkto = f.getLinkto();
      boolean _notEquals = (!Objects.equal(_linkto, null));
      if (_notEquals) {
        Font _linkto_1 = f.getLinkto();
        String _value = ((Font) _linkto_1).getValue();
        String _string = _value.toString();
        _builder.append(_string, "");
        _builder.newLineIfNotEmpty();
      } else {
        String _value_1 = f.getValue();
        _builder.append(_value_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final FontSize f) {
    StringConcatenation _builder = new StringConcatenation();
    {
      FontSize _linkto = f.getLinkto();
      boolean _notEquals = (!Objects.equal(_linkto, null));
      if (_notEquals) {
        {
          FontSize _linkto_1 = f.getLinkto();
          EObject _value = _linkto_1.getValue();
          if ((_value instanceof SizeValue)) {
            FontSize _linkto_2 = f.getLinkto();
            EObject _value_1 = _linkto_2.getValue();
            CharSequence _compile = this.compile(((SizeValue) _value_1));
            _builder.append(_compile, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          FontSize _linkto_3 = f.getLinkto();
          EObject _value_2 = _linkto_3.getValue();
          if ((_value_2 instanceof SizeValuePercent)) {
            FontSize _linkto_4 = f.getLinkto();
            EObject _value_3 = _linkto_4.getValue();
            String _value_4 = ((SizeValuePercent) _value_3).getValue();
            String _string = _value_4.toString();
            _builder.append(_string, "");
            _builder.append("%");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          FontSize _linkto_5 = f.getLinkto();
          EObject _value_5 = _linkto_5.getValue();
          if ((_value_5 instanceof SizeValueUnit)) {
            FontSize _linkto_6 = f.getLinkto();
            EObject _value_6 = _linkto_6.getValue();
            SizeUnit _value_7 = ((SizeValueUnit) _value_6).getValue();
            String _string_1 = _value_7.toString();
            _builder.append(_string_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
      } else {
        {
          EObject _value_8 = f.getValue();
          if ((_value_8 instanceof SizeValue)) {
            EObject _value_9 = f.getValue();
            CharSequence _compile_1 = this.compile(((SizeValue) _value_9));
            _builder.append(_compile_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EObject _value_10 = f.getValue();
          if ((_value_10 instanceof SizeValuePercent)) {
            EObject _value_11 = f.getValue();
            String _value_12 = ((SizeValuePercent) _value_11).getValue();
            String _string_2 = _value_12.toString();
            _builder.append(_string_2, "");
            _builder.append("%");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EObject _value_13 = f.getValue();
          if ((_value_13 instanceof SizeValueUnit)) {
            EObject _value_14 = f.getValue();
            SizeUnit _value_15 = ((SizeValueUnit) _value_14).getValue();
            String _string_3 = _value_15.toString();
            _builder.append(_string_3, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Color b) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((b instanceof StringColor)) {
        ColorType _value = ((StringColor) b).getValue();
        _builder.append(_value, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((b instanceof HexColor)) {
        String _value_1 = ((HexColor) b).getValue();
        _builder.append(_value_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final HAlignment a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      HAlignment _linkto = a.getLinkto();
      boolean _notEquals = (!Objects.equal(_linkto, null));
      if (_notEquals) {
        HAlignment _linkto_1 = a.getLinkto();
        HalignmentType _value = ((HAlignment) _linkto_1).getValue();
        a.setValue(_value);
        _builder.newLineIfNotEmpty();
      }
    }
    HalignmentType _value_1 = a.getValue();
    _builder.append(_value_1, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final VAlignment a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      VAlignment _linkto = a.getLinkto();
      boolean _notEquals = (!Objects.equal(_linkto, null));
      if (_notEquals) {
        VAlignment _linkto_1 = a.getLinkto();
        ValignmentType _value = ((VAlignment) _linkto_1).getValue();
        a.setValue(_value);
        _builder.newLineIfNotEmpty();
      }
    }
    ValignmentType _value_1 = a.getValue();
    _builder.append(_value_1, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final TextStyle t) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isB = t.isB();
      if (_isB) {
        _builder.append("<property name=\"fontWeight\">bold</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isI = t.isI();
      if (_isI) {
        _builder.append("<property name=\"fontStyle\">italic</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isT = t.isT();
      if (_isT) {
        _builder.append("<property name=\"textLineThrough\">line-through</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      boolean _isU = t.isU();
      if (_isU) {
        _builder.append("<property name=\"textUnderline\">underline</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Whitespace w) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Whitespace _linkto = w.getLinkto();
      boolean _notEquals = (!Objects.equal(_linkto, null));
      if (_notEquals) {
        Whitespace _linkto_1 = w.getLinkto();
        WhitespaceType _value = ((Whitespace) _linkto_1).getValue();
        w.setValue(_value);
        _builder.newLineIfNotEmpty();
      }
    }
    WhitespaceType _value_1 = w.getValue();
    String _name = _value_1.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Border b) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Border _linkto = b.getLinkto();
      boolean _notEquals = (!Objects.equal(_linkto, null));
      if (_notEquals) {
        {
          Border _linkto_1 = b.getLinkto();
          EObject _value = _linkto_1.getValue();
          if ((_value instanceof BorderAll)) {
            Border _linkto_2 = b.getLinkto();
            EObject _value_1 = _linkto_2.getValue();
            Color _color = ((BorderLine) _value_1).getColor();
            CharSequence c = this.compile(_color);
            _builder.newLineIfNotEmpty();
            Border _linkto_3 = b.getLinkto();
            EObject _value_2 = _linkto_3.getValue();
            BorderLineStyleType s = ((BorderLine) _value_2).getStyle();
            _builder.newLineIfNotEmpty();
            Border _linkto_4 = b.getLinkto();
            EObject _value_3 = _linkto_4.getValue();
            BorderWidth _width = ((BorderLine) _value_3).getWidth();
            CharSequence w = this.compile(_width);
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderBottomColor\">");
            _builder.append(c, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderBottomStyle\">");
            _builder.append(s, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderBottomWidth\">");
            _builder.append(w, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderLeftColor\">");
            _builder.append(c, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderLeftStyle\">");
            _builder.append(s, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderLeftWidth\">");
            _builder.append(w, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderRightColor\">");
            _builder.append(c, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderRightStyle\">");
            _builder.append(s, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderRightWidth\">");
            _builder.append(w, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderTopColor\">");
            _builder.append(c, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderTopStyle\">");
            _builder.append(s, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderTopWidth\">");
            _builder.append(w, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EObject _value_4 = b.getValue();
          if ((_value_4 instanceof BorderSide)) {
            {
              Border _linkto_5 = b.getLinkto();
              EObject _value_5 = _linkto_5.getValue();
              BorderLine _bottom = ((BorderSide) _value_5).getBottom();
              boolean _notEquals_1 = (!Objects.equal(_bottom, null));
              if (_notEquals_1) {
                _builder.append("<property name=\"borderBottomColor\">");
                Border _linkto_6 = b.getLinkto();
                EObject _value_6 = _linkto_6.getValue();
                BorderLine _bottom_1 = ((BorderSide) _value_6).getBottom();
                Color _color_1 = ((BorderLine) _bottom_1).getColor();
                CharSequence _compile = this.compile(_color_1);
                _builder.append(_compile, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderBottomStyle\">");
                Border _linkto_7 = b.getLinkto();
                EObject _value_7 = _linkto_7.getValue();
                BorderLine _bottom_2 = ((BorderSide) _value_7).getBottom();
                BorderLineStyleType _style = ((BorderLine) _bottom_2).getStyle();
                _builder.append(_style, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderBottomWidth\">");
                Border _linkto_8 = b.getLinkto();
                EObject _value_8 = _linkto_8.getValue();
                BorderLine _bottom_3 = ((BorderSide) _value_8).getBottom();
                BorderWidth _width_1 = ((BorderLine) _bottom_3).getWidth();
                CharSequence _compile_1 = this.compile(_width_1);
                _builder.append(_compile_1, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Border _linkto_9 = b.getLinkto();
              EObject _value_9 = _linkto_9.getValue();
              BorderLine _left = ((BorderSide) _value_9).getLeft();
              boolean _notEquals_2 = (!Objects.equal(_left, null));
              if (_notEquals_2) {
                _builder.append("<property name=\"borderLeftColor\">");
                Border _linkto_10 = b.getLinkto();
                EObject _value_10 = _linkto_10.getValue();
                BorderLine _left_1 = ((BorderSide) _value_10).getLeft();
                Color _color_2 = ((BorderLine) _left_1).getColor();
                CharSequence _compile_2 = this.compile(_color_2);
                _builder.append(_compile_2, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderLeftStyle\">");
                Border _linkto_11 = b.getLinkto();
                EObject _value_11 = _linkto_11.getValue();
                BorderLine _left_2 = ((BorderSide) _value_11).getLeft();
                BorderLineStyleType _style_1 = ((BorderLine) _left_2).getStyle();
                _builder.append(_style_1, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderLeftWidth\">");
                Border _linkto_12 = b.getLinkto();
                EObject _value_12 = _linkto_12.getValue();
                BorderLine _left_3 = ((BorderSide) _value_12).getLeft();
                BorderWidth _width_2 = ((BorderLine) _left_3).getWidth();
                CharSequence _compile_3 = this.compile(_width_2);
                _builder.append(_compile_3, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Border _linkto_13 = b.getLinkto();
              EObject _value_13 = _linkto_13.getValue();
              BorderLine _right = ((BorderSide) _value_13).getRight();
              boolean _notEquals_3 = (!Objects.equal(_right, null));
              if (_notEquals_3) {
                _builder.append("<property name=\"borderRightColor\">");
                Border _linkto_14 = b.getLinkto();
                EObject _value_14 = _linkto_14.getValue();
                BorderLine _right_1 = ((BorderSide) _value_14).getRight();
                Color _color_3 = ((BorderLine) _right_1).getColor();
                CharSequence _compile_4 = this.compile(_color_3);
                _builder.append(_compile_4, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderRightStyle\">");
                Border _linkto_15 = b.getLinkto();
                EObject _value_15 = _linkto_15.getValue();
                BorderLine _right_2 = ((BorderSide) _value_15).getRight();
                BorderLineStyleType _style_2 = ((BorderLine) _right_2).getStyle();
                _builder.append(_style_2, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderRightWidth\">");
                Border _linkto_16 = b.getLinkto();
                EObject _value_16 = _linkto_16.getValue();
                BorderLine _right_3 = ((BorderSide) _value_16).getRight();
                BorderWidth _width_3 = ((BorderLine) _right_3).getWidth();
                CharSequence _compile_5 = this.compile(_width_3);
                _builder.append(_compile_5, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Border _linkto_17 = b.getLinkto();
              EObject _value_17 = _linkto_17.getValue();
              BorderLine _top = ((BorderSide) _value_17).getTop();
              boolean _notEquals_4 = (!Objects.equal(_top, null));
              if (_notEquals_4) {
                _builder.append("<property name=\"borderTopColor\">");
                Border _linkto_18 = b.getLinkto();
                EObject _value_18 = _linkto_18.getValue();
                BorderLine _top_1 = ((BorderSide) _value_18).getTop();
                Color _color_4 = ((BorderLine) _top_1).getColor();
                CharSequence _compile_6 = this.compile(_color_4);
                _builder.append(_compile_6, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderTopStyle\">");
                Border _linkto_19 = b.getLinkto();
                EObject _value_19 = _linkto_19.getValue();
                BorderLine _top_2 = ((BorderSide) _value_19).getTop();
                BorderLineStyleType _style_3 = ((BorderLine) _top_2).getStyle();
                _builder.append(_style_3, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderTopWidth\">");
                Border _linkto_20 = b.getLinkto();
                EObject _value_20 = _linkto_20.getValue();
                BorderLine _top_3 = ((BorderSide) _value_20).getTop();
                BorderWidth _width_4 = ((BorderLine) _top_3).getWidth();
                CharSequence _compile_7 = this.compile(_width_4);
                _builder.append(_compile_7, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      } else {
        {
          EObject _value_21 = b.getValue();
          if ((_value_21 instanceof BorderAll)) {
            EObject _value_22 = b.getValue();
            Color _color_5 = ((BorderLine) _value_22).getColor();
            CharSequence c_1 = this.compile(_color_5);
            _builder.newLineIfNotEmpty();
            EObject _value_23 = b.getValue();
            BorderLineStyleType s_1 = ((BorderLine) _value_23).getStyle();
            _builder.newLineIfNotEmpty();
            EObject _value_24 = b.getValue();
            BorderWidth _width_5 = ((BorderLine) _value_24).getWidth();
            CharSequence w_1 = this.compile(_width_5);
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderBottomColor\">");
            _builder.append(c_1, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderBottomStyle\">");
            _builder.append(s_1, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderBottomWidth\">");
            _builder.append(w_1, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderLeftColor\">");
            _builder.append(c_1, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderLeftStyle\">");
            _builder.append(s_1, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderLeftWidth\">");
            _builder.append(w_1, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderRightColor\">");
            _builder.append(c_1, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderRightStyle\">");
            _builder.append(s_1, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderRightWidth\">");
            _builder.append(w_1, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderTopColor\">");
            _builder.append(c_1, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderTopStyle\">");
            _builder.append(s_1, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
            _builder.append("<property name=\"borderTopWidth\">");
            _builder.append(w_1, "");
            _builder.append("</property>");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EObject _value_25 = b.getValue();
          if ((_value_25 instanceof BorderSide)) {
            {
              EObject _value_26 = b.getValue();
              BorderLine _bottom_4 = ((BorderSide) _value_26).getBottom();
              boolean _notEquals_5 = (!Objects.equal(_bottom_4, null));
              if (_notEquals_5) {
                _builder.append("<property name=\"borderBottomColor\">");
                EObject _value_27 = b.getValue();
                BorderLine _bottom_5 = ((BorderSide) _value_27).getBottom();
                Color _color_6 = ((BorderLine) _bottom_5).getColor();
                CharSequence _compile_8 = this.compile(_color_6);
                _builder.append(_compile_8, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderBottomStyle\">");
                EObject _value_28 = b.getValue();
                BorderLine _bottom_6 = ((BorderSide) _value_28).getBottom();
                BorderLineStyleType _style_4 = ((BorderLine) _bottom_6).getStyle();
                _builder.append(_style_4, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderBottomWidth\">");
                EObject _value_29 = b.getValue();
                BorderLine _bottom_7 = ((BorderSide) _value_29).getBottom();
                BorderWidth _width_6 = ((BorderLine) _bottom_7).getWidth();
                CharSequence _compile_9 = this.compile(_width_6);
                _builder.append(_compile_9, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              EObject _value_30 = b.getValue();
              BorderLine _left_4 = ((BorderSide) _value_30).getLeft();
              boolean _notEquals_6 = (!Objects.equal(_left_4, null));
              if (_notEquals_6) {
                _builder.append("<property name=\"borderLeftColor\">");
                EObject _value_31 = b.getValue();
                BorderLine _left_5 = ((BorderSide) _value_31).getLeft();
                Color _color_7 = ((BorderLine) _left_5).getColor();
                CharSequence _compile_10 = this.compile(_color_7);
                _builder.append(_compile_10, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderLeftStyle\">");
                EObject _value_32 = b.getValue();
                BorderLine _left_6 = ((BorderSide) _value_32).getLeft();
                BorderLineStyleType _style_5 = ((BorderLine) _left_6).getStyle();
                _builder.append(_style_5, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderLeftWidth\">");
                EObject _value_33 = b.getValue();
                BorderLine _left_7 = ((BorderSide) _value_33).getLeft();
                BorderWidth _width_7 = ((BorderLine) _left_7).getWidth();
                CharSequence _compile_11 = this.compile(_width_7);
                _builder.append(_compile_11, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              EObject _value_34 = b.getValue();
              BorderLine _right_4 = ((BorderSide) _value_34).getRight();
              boolean _notEquals_7 = (!Objects.equal(_right_4, null));
              if (_notEquals_7) {
                _builder.append("<property name=\"borderRightColor\">");
                EObject _value_35 = b.getValue();
                BorderLine _right_5 = ((BorderSide) _value_35).getRight();
                Color _color_8 = ((BorderLine) _right_5).getColor();
                CharSequence _compile_12 = this.compile(_color_8);
                _builder.append(_compile_12, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderRightStyle\">");
                EObject _value_36 = b.getValue();
                BorderLine _right_6 = ((BorderSide) _value_36).getRight();
                BorderLineStyleType _style_6 = ((BorderLine) _right_6).getStyle();
                _builder.append(_style_6, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderRightWidth\">");
                EObject _value_37 = b.getValue();
                BorderLine _right_7 = ((BorderSide) _value_37).getRight();
                BorderWidth _width_8 = ((BorderLine) _right_7).getWidth();
                CharSequence _compile_13 = this.compile(_width_8);
                _builder.append(_compile_13, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
              }
            }
            {
              EObject _value_38 = b.getValue();
              BorderLine _top_4 = ((BorderSide) _value_38).getTop();
              boolean _notEquals_8 = (!Objects.equal(_top_4, null));
              if (_notEquals_8) {
                _builder.append("<property name=\"borderTopColor\">");
                EObject _value_39 = b.getValue();
                BorderLine _top_5 = ((BorderSide) _value_39).getTop();
                Color _color_9 = ((BorderLine) _top_5).getColor();
                CharSequence _compile_14 = this.compile(_color_9);
                _builder.append(_compile_14, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderTopStyle\">");
                EObject _value_40 = b.getValue();
                BorderLine _top_6 = ((BorderSide) _value_40).getTop();
                BorderLineStyleType _style_7 = ((BorderLine) _top_6).getStyle();
                _builder.append(_style_7, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
                _builder.append("<property name=\"borderTopWidth\">");
                EObject _value_41 = b.getValue();
                BorderLine _top_7 = ((BorderSide) _value_41).getTop();
                BorderWidth _width_9 = ((BorderLine) _top_7).getWidth();
                CharSequence _compile_15 = this.compile(_width_9);
                _builder.append(_compile_15, "");
                _builder.append("</property>");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final BorderWidth b) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _value = b.getValue();
      if ((_value instanceof SizeValue)) {
        EObject _value_1 = b.getValue();
        CharSequence _compile = this.compile(((SizeValue) _value_1));
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EObject _value_2 = b.getValue();
      if ((_value_2 instanceof WidthTypeValue)) {
        EObject _value_3 = b.getValue();
        WidthType _value_4 = ((WidthTypeValue) _value_3).getValue();
        _builder.append(_value_4, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final SizeValue s) {
    StringConcatenation _builder = new StringConcatenation();
    String _value = s.getValue();
    String _string = _value.toString();
    _builder.append(_string, "");
    LengthUnit _unit = s.getUnit();
    String _string_1 = _unit.toString();
    _builder.append(_string_1, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final IndentValue i) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EObject _value = i.getValue();
      if ((_value instanceof SizeValue)) {
        EObject _value_1 = i.getValue();
        CharSequence _compile = this.compile(((SizeValue) _value_1));
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EObject _value_2 = i.getValue();
      if ((_value_2 instanceof SizeValuePercent)) {
        EObject _value_3 = i.getValue();
        String _value_4 = ((SizeValuePercent) _value_3).getValue();
        _builder.append(_value_4, "");
        _builder.append("%");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Padding p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((p instanceof IndentAll)) {
        CharSequence _compile = this.compile(((IndentAll) p));
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((p instanceof IndentSide)) {
        CharSequence _compile_1 = this.compile(((IndentSide) p));
        _builder.append(_compile_1, "");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final IndentAll i) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence value = this.compile(((IndentValue) i));
    _builder.newLineIfNotEmpty();
    {
      EStructuralFeature _eContainingFeature = i.eContainingFeature();
      EClass _eContainingClass = _eContainingFeature.getEContainingClass();
      String _name = _eContainingClass.getName();
      boolean _equals = Objects.equal(_name, "PageProperties");
      if (_equals) {
        _builder.append("<property name=\"top");
        EStructuralFeature _eContainingFeature_1 = i.eContainingFeature();
        String _name_1 = _eContainingFeature_1.getName();
        String _string = _name_1.toString();
        String _firstUpper = StringExtensions.toFirstUpper(_string);
        _builder.append(_firstUpper, "");
        _builder.append("\">");
        _builder.append(value, "");
        _builder.append("</property>");
        _builder.newLineIfNotEmpty();
        _builder.append("<property name=\"left");
        EStructuralFeature _eContainingFeature_2 = i.eContainingFeature();
        String _name_2 = _eContainingFeature_2.getName();
        String _string_1 = _name_2.toString();
        String _firstUpper_1 = StringExtensions.toFirstUpper(_string_1);
        _builder.append(_firstUpper_1, "");
        _builder.append("\">");
        _builder.append(value, "");
        _builder.append("</property>");
        _builder.newLineIfNotEmpty();
        _builder.append("<property name=\"bottom");
        EStructuralFeature _eContainingFeature_3 = i.eContainingFeature();
        String _name_3 = _eContainingFeature_3.getName();
        String _string_2 = _name_3.toString();
        String _firstUpper_2 = StringExtensions.toFirstUpper(_string_2);
        _builder.append(_firstUpper_2, "");
        _builder.append("\">");
        _builder.append(value, "");
        _builder.append("</property>");
        _builder.newLineIfNotEmpty();
        _builder.append("<property name=\"right");
        EStructuralFeature _eContainingFeature_4 = i.eContainingFeature();
        String _name_4 = _eContainingFeature_4.getName();
        String _string_3 = _name_4.toString();
        String _firstUpper_3 = StringExtensions.toFirstUpper(_string_3);
        _builder.append(_firstUpper_3, "");
        _builder.append("\">");
        _builder.append(value, "");
        _builder.append("</property>");
        _builder.newLineIfNotEmpty();
      } else {
        EStructuralFeature _eContainingFeature_5 = i.eContainingFeature();
        EClass _eContainingClass_1 = _eContainingFeature_5.getEContainingClass();
        String _name_5 = _eContainingClass_1.getName();
        boolean _equals_1 = Objects.equal(_name_5, "LabelProperties");
        if (_equals_1) {
          _builder.append("<property name=\"");
          EStructuralFeature _eContainingFeature_6 = i.eContainingFeature();
          String _name_6 = _eContainingFeature_6.getName();
          _builder.append(_name_6, "");
          _builder.append("Top\">");
          _builder.append(value, "");
          _builder.append("</property>");
          _builder.newLineIfNotEmpty();
          _builder.append("<property name=\"");
          EStructuralFeature _eContainingFeature_7 = i.eContainingFeature();
          String _name_7 = _eContainingFeature_7.getName();
          _builder.append(_name_7, "");
          _builder.append("Left\">");
          _builder.append(value, "");
          _builder.append("</property>");
          _builder.newLineIfNotEmpty();
          _builder.append("<property name=\"");
          EStructuralFeature _eContainingFeature_8 = i.eContainingFeature();
          String _name_8 = _eContainingFeature_8.getName();
          _builder.append(_name_8, "");
          _builder.append("Bottom\">");
          _builder.append(value, "");
          _builder.append("</property>");
          _builder.newLineIfNotEmpty();
          _builder.append("<property name=\"");
          EStructuralFeature _eContainingFeature_9 = i.eContainingFeature();
          String _name_9 = _eContainingFeature_9.getName();
          _builder.append(_name_9, "");
          _builder.append("Right\">");
          _builder.append(value, "");
          _builder.append("</property>");
          _builder.newLineIfNotEmpty();
        } else {
          EStructuralFeature _eContainingFeature_10 = i.eContainingFeature();
          EClass _eContainingClass_2 = _eContainingFeature_10.getEContainingClass();
          String _name_10 = _eContainingClass_2.getName();
          boolean _equals_2 = Objects.equal(_name_10, "ChartElementProperties");
          if (_equals_2) {
            _builder.append("<Insets>");
            _builder.newLine();
            _builder.append("\t");
            _builder.append("<Top>");
            _builder.append(value, "\t");
            _builder.append("</Top>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("<Left>");
            _builder.append(value, "\t");
            _builder.append("</Left>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("<Bottom>");
            _builder.append(value, "\t");
            _builder.append("</Bottom>");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("<Right>");
            _builder.append(value, "\t");
            _builder.append("</Right>");
            _builder.newLineIfNotEmpty();
            _builder.append("</Insets>");
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final IndentSide i) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EStructuralFeature _eContainingFeature = i.eContainingFeature();
      EClass _eContainingClass = _eContainingFeature.getEContainingClass();
      String _name = _eContainingClass.getName();
      boolean _equals = Objects.equal(_name, "ChartElementProperties");
      if (_equals) {
        _builder.append("<property name=\"");
        _builder.newLine();
        _builder.append("\">");
        CharSequence _compile = this.compile(((IndentValue) i));
        _builder.append(_compile, "");
        _builder.append("</property>");
        _builder.newLineIfNotEmpty();
      } else {
        {
          EList<EObject> _eContents = i.eContents();
          for(final EObject e : _eContents) {
            _builder.append("<property name=\"");
            {
              EStructuralFeature _eContainingFeature_1 = i.eContainingFeature();
              EClass _eContainingClass_1 = _eContainingFeature_1.getEContainingClass();
              String _name_1 = _eContainingClass_1.getName();
              boolean _equals_1 = Objects.equal(_name_1, "PageProperties");
              if (_equals_1) {
                EStructuralFeature _eContainingFeature_2 = e.eContainingFeature();
                String _name_2 = _eContainingFeature_2.getName();
                _builder.append(_name_2, "");
                EStructuralFeature _eContainingFeature_3 = i.eContainingFeature();
                String _name_3 = _eContainingFeature_3.getName();
                String _string = _name_3.toString();
                String _firstUpper = StringExtensions.toFirstUpper(_string);
                _builder.append(_firstUpper, "");
              } else {
                EStructuralFeature _eContainingFeature_4 = i.eContainingFeature();
                EClass _eContainingClass_2 = _eContainingFeature_4.getEContainingClass();
                String _name_4 = _eContainingClass_2.getName();
                boolean _equals_2 = Objects.equal(_name_4, "LabelProperties");
                if (_equals_2) {
                  EStructuralFeature _eContainingFeature_5 = i.eContainingFeature();
                  String _name_5 = _eContainingFeature_5.getName();
                  String _string_1 = _name_5.toString();
                  _builder.append(_string_1, "");
                  EStructuralFeature _eContainingFeature_6 = e.eContainingFeature();
                  String _name_6 = _eContainingFeature_6.getName();
                  String _string_2 = _name_6.toString();
                  String _firstUpper_1 = StringExtensions.toFirstUpper(_string_2);
                  _builder.append(_firstUpper_1, "");
                }
              }
            }
            _builder.append("\">");
            _builder.newLineIfNotEmpty();
            _builder.append("</property>");
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Visibility v) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<list-property name=\"visibility\">");
    _builder.newLine();
    {
      boolean _isShow = v.isShow();
      if (_isShow) {
      }
    }
    {
      if ((v instanceof HideAll)) {
        CharSequence _compile = this.compile(((HideAll) v));
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((v instanceof HideForOne)) {
        {
          EList<HideAll> _value = ((HideForOne)v).getValue();
          for(final HideAll x : _value) {
            CharSequence _compile_1 = this.compile(((HideAll) x));
            _builder.append(_compile_1, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    {
      if ((v instanceof HideForMore)) {
        CharSequence _compile_2 = this.compile(((HideForMore)v));
        _builder.append(_compile_2, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</list-property>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final HideAll h) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<structure>");
    _builder.newLine();
    {
      OutputFormatType _format = h.getFormat();
      boolean _equals = Objects.equal(_format, null);
      if (_equals) {
        _builder.append("<property name=\"format\">all</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      OutputFormatType _format_1 = h.getFormat();
      boolean _notEquals = (!Objects.equal(_format_1, null));
      if (_notEquals) {
        _builder.append("<property name=\"format\">");
        OutputFormatType _format_2 = h.getFormat();
        _builder.append(_format_2, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      JSExpression _expression = h.getExpression();
      boolean _equals_1 = Objects.equal(_expression, null);
      if (_equals_1) {
        _builder.append("<expression name=\"valueExpr\" type=\"javascript\">true</expression>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      JSExpression _expression_1 = h.getExpression();
      boolean _notEquals_1 = (!Objects.equal(_expression_1, null));
      if (_notEquals_1) {
        _builder.append("<expression name=\"valueExpr\" type=\"javascript\">");
        JSExpression _expression_2 = h.getExpression();
        CharSequence _compile = this.compile(_expression_2);
        _builder.append(_compile, "");
        _builder.append("</expression>");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("</structure>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final HideForMore h) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<OutputFormatType> _format = h.getFormat();
      for(final OutputFormatType f : _format) {
        _builder.append("<structure>");
        _builder.newLine();
        {
          EList<OutputFormatType> _format_1 = h.getFormat();
          boolean _notEquals = (!Objects.equal(_format_1, null));
          if (_notEquals) {
            _builder.append("<property name=\"format\">");
            _builder.append(f, "");
            _builder.append("</property>");
          }
        }
        _builder.newLineIfNotEmpty();
        {
          JSExpression _expression = h.getExpression();
          boolean _equals = Objects.equal(_expression, null);
          if (_equals) {
            _builder.append("<expression name=\"valueExpr\" type=\"javascript\">true</expression>");
          }
        }
        _builder.newLineIfNotEmpty();
        {
          JSExpression _expression_1 = h.getExpression();
          boolean _notEquals_1 = (!Objects.equal(_expression_1, null));
          if (_notEquals_1) {
            _builder.append("<expression name=\"valueExpr\" type=\"javascript\">");
            JSExpression _expression_2 = h.getExpression();
            CharSequence _compile = this.compile(_expression_2);
            _builder.append(_compile, "");
            _builder.append("</expression>");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("</structure>");
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Display d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<property name=\"display\">");
    {
      Display _linkto = d.getLinkto();
      boolean _notEquals = (!Objects.equal(_linkto, null));
      if (_notEquals) {
        Display _linkto_1 = d.getLinkto();
        DisplayType _value = ((Display) _linkto_1).getValue();
        d.setValue(_value);
      }
    }
    DisplayType _value_1 = d.getValue();
    String _name = _value_1.getName();
    _builder.append(_name, "");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final PageBreak p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      PageBreakValue _after = p.getAfter();
      boolean _notEquals = (!Objects.equal(_after, null));
      if (_notEquals) {
        _builder.append("<property name=\"pageBreakAfter\">");
        PageBreakValue _after_1 = p.getAfter();
        _builder.append(_after_1, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      PageBreakValue _before = p.getBefore();
      boolean _notEquals_1 = (!Objects.equal(_before, null));
      if (_notEquals_1) {
        _builder.append("<property name=\"pageBreakBefore\">");
        PageBreakValue _before_1 = p.getBefore();
        _builder.append(_before_1, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      PageBreakValue _inside = p.getInside();
      boolean _notEquals_2 = (!Objects.equal(_inside, null));
      if (_notEquals_2) {
        _builder.append("<property name=\"pageBreakInside\">");
        PageBreakValue _inside_1 = p.getInside();
        _builder.append(_inside_1, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      BooleanLiteral _repeat = p.getRepeat();
      boolean _notEquals_3 = (!Objects.equal(_repeat, null));
      if (_notEquals_3) {
        _builder.append("<property name=\"repeatHeader\">");
        BooleanLiteral _repeat_1 = p.getRepeat();
        String _value = _repeat_1.getValue();
        _builder.append(_value, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      IntLiteral _interval = p.getInterval();
      boolean _notEquals_4 = (!Objects.equal(_interval, null));
      if (_notEquals_4) {
        _builder.append("<property name=\"pageBreakInterval\">");
        IntLiteral _interval_1 = p.getInterval();
        int _value_1 = _interval_1.getValue();
        _builder.append(_value_1, "");
        _builder.append("</property>");
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Toc t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<structure name=\"toc\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<expression name=\"expressionValue\" type=\"javascript\">");
    JSExpression _value = t.getValue();
    CharSequence _compile = this.compile(_value);
    _builder.append(_compile, "\t");
    _builder.append("</expression>");
    _builder.newLineIfNotEmpty();
    {
      StyleRef _style = t.getStyle();
      boolean _notEquals = (!Objects.equal(_style, null));
      if (_notEquals) {
        _builder.append("\t");
        _builder.append("<property name=\"TOCStyle\">");
        StyleRef _style_1 = t.getStyle();
        Style _refname = _style_1.getRefname();
        String _name = _refname.getName();
        _builder.append(_name, "\t");
        _builder.append("</property>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</structure>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Bookmark b) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<expression name=\"bookmark\" type=\"javascript\">");
    JSExpression _expression = b.getExpression();
    CharSequence _compile = this.compile(_expression);
    _builder.append(_compile, "");
    _builder.append("</expression>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final StyleRef s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<property name=\"style\">");
    Style _refname = s.getRefname();
    String _name = _refname.getName();
    _builder.append(_name, "");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Style s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<style name=\"");
    String _name = s.getName();
    _builder.append(_name, "");
    _builder.append("\" id=\"");
    _builder.append(this.A = (this.A + 1), "");
    _builder.append("\">");
    _builder.newLineIfNotEmpty();
    {
      EList<LabelProperties> _properties = s.getProperties();
      for(final LabelProperties p : _properties) {
        CharSequence _compile = this.compile(p);
        _builder.append(_compile, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</style>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Width w) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<property name=\"width\">");
    IndentValue _value = w.getValue();
    CharSequence _compile = this.compile(_value);
    _builder.append(_compile, "");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Height h) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<property name=\"height\">");
    IndentValue _value = h.getValue();
    CharSequence _compile = this.compile(_value);
    _builder.append(_compile, "");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final AltText a) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<expression name=\"altText\" type=\"javascript\">");
    JSExpression _expression = a.getExpression();
    CharSequence _compile = this.compile(_expression);
    _builder.append(_compile, "");
    _builder.append("</expression>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final JSExpression j) {
    StringConcatenation _builder = new StringConcatenation();
    {
      Literal _value = j.getValue();
      if ((_value instanceof StringLiteral)) {
        _builder.append("\"");
        Literal _value_1 = j.getValue();
        String _value_2 = ((StringLiteral) _value_1).getValue();
        _builder.append(_value_2, "");
        _builder.append("\"");
      } else {
        Literal _value_3 = j.getValue();
        if ((_value_3 instanceof BooleanLiteral)) {
          _builder.append("\"");
          Literal _value_4 = j.getValue();
          String _value_5 = ((BooleanLiteral) _value_4).getValue();
          _builder.append(_value_5, "");
          _builder.append("\"");
        } else {
          Literal _value_6 = j.getValue();
          EList<EObject> _eCrossReferences = _value_6.eCrossReferences();
          boolean _notEquals = (!Objects.equal(_eCrossReferences, null));
          if (_notEquals) {
            {
              Literal _value_7 = j.getValue();
              EList<EObject> _eCrossReferences_1 = _value_7.eCrossReferences();
              for(final EObject f : _eCrossReferences_1) {
                {
                  if ((f instanceof DatasetField)) {
                    {
                      EStructuralFeature _eContainingFeature = ((DatasetField)f).eContainingFeature();
                      String _name = _eContainingFeature.getName();
                      boolean _equals = Objects.equal(_name, "field");
                      if (_equals) {
                        String _name_1 = ((DatasetField)f).getName();
                        String _plus = ("row[&quot;" + _name_1);
                        String _plus_1 = (_plus + "&quot;]");
                        _builder.append(_plus_1, "");
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final DatasetField f) {
    StringConcatenation _builder = new StringConcatenation();
    String _name = f.getName();
    _builder.append(_name, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence getBoundDataset(final Dataset d) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<property name=\"dataSet\">");
    String _name = d.getName();
    _builder.append(_name, "");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    _builder.append("<list-property name=\"boundDataColumns\">");
    _builder.newLine();
    {
      EList<DatasetField> _field = d.getField();
      for(final DatasetField f : _field) {
        CharSequence _boundDataColumns = this.getBoundDataColumns(f);
        _builder.append(_boundDataColumns, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</list-property>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getBoundDataColumns(final DatasetField f) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<structure>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<property name=\"name\">");
    String _name = f.getName();
    _builder.append(_name, "\t");
    _builder.append("</property>");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("<expression name=\"expression\">dataSetRow[\"");
    String _name_1 = f.getName();
    _builder.append(_name_1, "\t");
    _builder.append("\"]</expression>");
    _builder.newLineIfNotEmpty();
    _builder.append("</structure>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ColorPalette c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      ColorPalette _linkto = c.getLinkto();
      boolean _notEquals = (!Objects.equal(_linkto, null));
      if (_notEquals) {
        {
          ColorPalette _linkto_1 = c.getLinkto();
          EList<EObject> _value = _linkto_1.getValue();
          for(final EObject e : _value) {
            {
              if ((e instanceof RgbColor)) {
                _builder.append("<Entries xsi:type=\"attribute:ColorDefinition\">");
                _builder.newLine();
                _builder.append("\t");
                CharSequence _compile = this.compile(((RgbColor) e));
                _builder.append(_compile, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("</Entries>");
                _builder.newLine();
              }
            }
          }
        }
      } else {
        {
          EList<EObject> _value_1 = c.getValue();
          for(final EObject e_1 : _value_1) {
            {
              if ((e_1 instanceof RgbColor)) {
                _builder.append("<Entries xsi:type=\"attribute:ColorDefinition\">");
                _builder.newLine();
                _builder.append("\t");
                CharSequence _compile_1 = this.compile(((RgbColor) e_1));
                _builder.append(_compile_1, "\t");
                _builder.newLineIfNotEmpty();
                _builder.append("</Entries>");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final RgbColor c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<Transparency>255</Transparency>");
    _builder.newLine();
    _builder.append("<Red>");
    int _r = c.getR();
    _builder.append(_r, "");
    _builder.append("</Red>");
    _builder.newLineIfNotEmpty();
    _builder.append("<Green>");
    int _g = c.getG();
    _builder.append(_g, "");
    _builder.append("</Green>");
    _builder.newLineIfNotEmpty();
    _builder.append("<Blue>");
    int _b = c.getB();
    _builder.append(_b, "");
    _builder.append("</Blue>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Title t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<Caption>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<Value>");
    String _value = t.getValue();
    _builder.append(_value, " ");
    _builder.append("</Value>");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("<Font>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Size>16.0</Size>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Bold>true</Bold>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Alignment>");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("<horizontalAlignment>Center</horizontalAlignment>");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("<verticalAlignment>Center</verticalAlignment>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</Alignment>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("</Font>");
    _builder.newLine();
    _builder.append("</Caption>");
    _builder.newLine();
    _builder.append("<Background xsi:type=\"attribute:ColorDefinition\">");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<Transparency>0</Transparency>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<Red>255</Red>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<Green>255</Green>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<Blue>255</Blue>");
    _builder.newLine();
    _builder.append("</Background>");
    _builder.newLine();
    _builder.append("<Outline>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<Style>Solid</Style>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<Thickness>1</Thickness>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<Color>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Transparency>255</Transparency>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Red>0</Red>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Green>0</Green>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Blue>0</Blue>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("</Color>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<Visible>false</Visible>");
    _builder.newLine();
    _builder.append("</Outline>");
    _builder.newLine();
    _builder.append("<Insets>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<Top>0.0</Top>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<Left>2.0</Left>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<Bottom>0.0</Bottom>");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("<Right>3.0</Right>");
    _builder.newLine();
    _builder.append("</Insets>");
    _builder.newLine();
    _builder.append("<Visible>true</Visible>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence nullTitle() {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _nullBounds = this.getNullBounds();
    _builder.append(_nullBounds, "");
    _builder.newLineIfNotEmpty();
    _builder.append("<Insets>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Top>3.0</Top>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Left>3.0</Left>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Bottom>3.0</Bottom>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Right>3.0</Right>");
    _builder.newLine();
    _builder.append("</Insets>");
    _builder.newLine();
    _builder.append("<Row>-1</Row>");
    _builder.newLine();
    _builder.append("<Column>-1</Column>");
    _builder.newLine();
    _builder.append("<Rowspan>-1</Rowspan>");
    _builder.newLine();
    _builder.append("<Columnspan>-1</Columnspan>");
    _builder.newLine();
    _builder.append("<Outline>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Style>Solid</Style>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Thickness>1</Thickness>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Color>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Transparency>255</Transparency>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Red>0</Red>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Green>0</Green>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Blue>0</Blue>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</Color>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Visible>false</Visible>");
    _builder.newLine();
    _builder.append("</Outline>");
    _builder.newLine();
    _builder.append("<Visible>false</Visible>");
    _builder.newLine();
    _builder.append("<Label>");
    _builder.newLine();
    _builder.append("  ");
    CharSequence _nullLabel = this.nullLabel();
    _builder.append(_nullLabel, "  ");
    _builder.newLineIfNotEmpty();
    _builder.append("</Label>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ChartGrid c) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<LineAttributes>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Style>Solid</Style>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Thickness>1</Thickness>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Color>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Transparency>255</Transparency>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Red>196</Red>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Green>196</Green>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Blue>196</Blue>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</Color>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Visible>true</Visible>");
    _builder.newLine();
    _builder.append("</LineAttributes>");
    _builder.newLine();
    _builder.append("<TickStyle>Across</TickStyle>");
    _builder.newLine();
    _builder.append("<TickAttributes>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Style>Solid</Style>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Thickness>1</Thickness>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Color>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Transparency>255</Transparency>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Red>196</Red>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Green>196</Green>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Blue>196</Blue>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</Color>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Visible>true</Visible>");
    _builder.newLine();
    _builder.append("</TickAttributes>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence nullLabel() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<Caption>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Value>Chart Title</Value>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Font>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Bold>false</Bold>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Alignment>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<horizontalAlignment>Center</horizontalAlignment>");
    _builder.newLine();
    _builder.append("      ");
    _builder.append("<verticalAlignment>Center</verticalAlignment>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</Alignment>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</Font>");
    _builder.newLine();
    _builder.append("</Caption>");
    _builder.newLine();
    _builder.append("<Background xsi:type=\"attribute:ColorDefinition\">");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Transparency>0</Transparency>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Red>255</Red>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Green>255</Green>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Blue>255</Blue>");
    _builder.newLine();
    _builder.append("</Background>");
    _builder.newLine();
    _builder.append("<Outline>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Style>Solid</Style>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Thickness>1</Thickness>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Color>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Transparency>255</Transparency>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Red>0</Red>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Green>0</Green>");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Blue>0</Blue>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("</Color>");
    _builder.newLine();
    _builder.append("</Outline>");
    _builder.newLine();
    _builder.append("<Insets>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Top>0.0</Top>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Left>2.0</Left>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Bottom>0.0</Bottom>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<Right>3.0</Right>");
    _builder.newLine();
    _builder.append("</Insets>");
    _builder.newLine();
    _builder.append("<Visible>false</Visible>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence nullGrid() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<LineAttributes>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Style>Solid</Style>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Thickness>1</Thickness>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Color>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Transparency>255</Transparency>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Red>196</Red>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Green>196</Green>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Blue>196</Blue>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</Color>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Visible>false</Visible>");
    _builder.newLine();
    _builder.append("</LineAttributes>");
    _builder.newLine();
    _builder.append("<TickStyle>Across</TickStyle>");
    _builder.newLine();
    _builder.append("<TickAttributes>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Style>Solid</Style>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Thickness>1</Thickness>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Color>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Transparency>255</Transparency>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Red>196</Red>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Green>196</Green>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Blue>196</Blue>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</Color>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Visible>true</Visible>");
    _builder.newLine();
    _builder.append("</TickAttributes>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence emptyMessage() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<EmptyMessage>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Caption>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Value>This chart contains no data.</Value>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Font>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<Alignment>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<horizontalAlignment>Center</horizontalAlignment>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("<verticalAlignment>Center</verticalAlignment>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("</Alignment>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</Font>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</Caption>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Background xsi:type=\"attribute:ColorDefinition\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Transparency>64</Transparency>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Red>127</Red>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Green>127</Green>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Blue>127</Blue>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</Background>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Outline>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Color>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<Transparency>128</Transparency>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<Red>127</Red>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<Green>127</Green>");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("<Blue>127</Blue>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("</Color>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Visible>true</Visible>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</Outline>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Insets>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Top>10.0</Top>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Left>10.0</Left>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Bottom>10.0</Bottom>");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<Right>10.0</Right>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</Insets>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Visible>false</Visible>");
    _builder.newLine();
    _builder.append("</EmptyMessage>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence getNullBounds() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<Bounds>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Left>0.0</Left>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Top>0.0</Top>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Width>0.0</Width>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<Height>0.0</Height>");
    _builder.newLine();
    _builder.append("</Bounds>");
    _builder.newLine();
    return _builder;
  }
}
