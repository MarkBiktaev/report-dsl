/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Root");
		private final Assignment cRootAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRootReportParserRuleCall_0 = (RuleCall)cRootAssignment.eContents().get(0);
		
		//Root:
		//	root=Report;
		public ParserRule getRule() { return rule; }

		//root=Report
		public Assignment getRootAssignment() { return cRootAssignment; }

		//Report
		public RuleCall getRootReportParserRuleCall_0() { return cRootReportParserRuleCall_0; }
	}

	public class ReportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Report");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cDatasourcesAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final RuleCall cDatasourcesDatasourcesParserRuleCall_3_0_0 = (RuleCall)cDatasourcesAssignment_3_0.eContents().get(0);
		private final Assignment cDatasetsAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final RuleCall cDatasetsDatasetsParserRuleCall_3_1_0 = (RuleCall)cDatasetsAssignment_3_1.eContents().get(0);
		private final Assignment cParametersAssignment_3_2 = (Assignment)cUnorderedGroup_3.eContents().get(2);
		private final RuleCall cParametersParametersParserRuleCall_3_2_0 = (RuleCall)cParametersAssignment_3_2.eContents().get(0);
		private final Assignment cStylesAssignment_3_3 = (Assignment)cUnorderedGroup_3.eContents().get(3);
		private final RuleCall cStylesStylesParserRuleCall_3_3_0 = (RuleCall)cStylesAssignment_3_3.eContents().get(0);
		private final Assignment cPagesetupAssignment_3_4 = (Assignment)cUnorderedGroup_3.eContents().get(4);
		private final RuleCall cPagesetupPageSetupParserRuleCall_3_4_0 = (RuleCall)cPagesetupAssignment_3_4.eContents().get(0);
		private final Assignment cBodyAssignment_3_5 = (Assignment)cUnorderedGroup_3.eContents().get(5);
		private final RuleCall cBodyBodyParserRuleCall_3_5_0 = (RuleCall)cBodyAssignment_3_5.eContents().get(0);
		private final Assignment cElementPropertiesAssignment_3_6 = (Assignment)cUnorderedGroup_3.eContents().get(6);
		private final RuleCall cElementPropertiesElementPropertiesParserRuleCall_3_6_0 = (RuleCall)cElementPropertiesAssignment_3_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Report:
		//	"report" name=ID "{" (datasources=Datasources? & datasets=Datasets? & parameters=Parameters? & styles=Styles? &
		//	pagesetup=PageSetup? & body=Body? & elementProperties=elementProperties?) "}";
		public ParserRule getRule() { return rule; }

		//"report" name=ID "{" (datasources=Datasources? & datasets=Datasets? & parameters=Parameters? & styles=Styles? &
		//pagesetup=PageSetup? & body=Body? & elementProperties=elementProperties?) "}"
		public Group getGroup() { return cGroup; }

		//"report"
		public Keyword getReportKeyword_0() { return cReportKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//datasources=Datasources? & datasets=Datasets? & parameters=Parameters? & styles=Styles? & pagesetup=PageSetup? &
		//body=Body? & elementProperties=elementProperties?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//datasources=Datasources?
		public Assignment getDatasourcesAssignment_3_0() { return cDatasourcesAssignment_3_0; }

		//Datasources
		public RuleCall getDatasourcesDatasourcesParserRuleCall_3_0_0() { return cDatasourcesDatasourcesParserRuleCall_3_0_0; }

		//datasets=Datasets?
		public Assignment getDatasetsAssignment_3_1() { return cDatasetsAssignment_3_1; }

		//Datasets
		public RuleCall getDatasetsDatasetsParserRuleCall_3_1_0() { return cDatasetsDatasetsParserRuleCall_3_1_0; }

		//parameters=Parameters?
		public Assignment getParametersAssignment_3_2() { return cParametersAssignment_3_2; }

		//Parameters
		public RuleCall getParametersParametersParserRuleCall_3_2_0() { return cParametersParametersParserRuleCall_3_2_0; }

		//styles=Styles?
		public Assignment getStylesAssignment_3_3() { return cStylesAssignment_3_3; }

		//Styles
		public RuleCall getStylesStylesParserRuleCall_3_3_0() { return cStylesStylesParserRuleCall_3_3_0; }

		//pagesetup=PageSetup?
		public Assignment getPagesetupAssignment_3_4() { return cPagesetupAssignment_3_4; }

		//PageSetup
		public RuleCall getPagesetupPageSetupParserRuleCall_3_4_0() { return cPagesetupPageSetupParserRuleCall_3_4_0; }

		//body=Body?
		public Assignment getBodyAssignment_3_5() { return cBodyAssignment_3_5; }

		//Body
		public RuleCall getBodyBodyParserRuleCall_3_5_0() { return cBodyBodyParserRuleCall_3_5_0; }

		//elementProperties=elementProperties?
		public Assignment getElementPropertiesAssignment_3_6() { return cElementPropertiesAssignment_3_6; }

		//elementProperties
		public RuleCall getElementPropertiesElementPropertiesParserRuleCall_3_6_0() { return cElementPropertiesElementPropertiesParserRuleCall_3_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ElementPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "elementProperties");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElementPropertiesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cPropertiesAlternatives_2_0 = (Alternatives)cPropertiesAssignment_2.eContents().get(0);
		private final RuleCall cPropertiesFontParserRuleCall_2_0_0 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(0);
		private final RuleCall cPropertiesFontSizeParserRuleCall_2_0_1 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(1);
		private final RuleCall cPropertiesColorPaletteParserRuleCall_2_0_2 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(2);
		private final RuleCall cPropertiesHAlignmentParserRuleCall_2_0_3 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(3);
		private final RuleCall cPropertiesVAlignmentParserRuleCall_2_0_4 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(4);
		private final RuleCall cPropertiesWhitespaceParserRuleCall_2_0_5 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(5);
		private final RuleCall cPropertiesStyleRefParserRuleCall_2_0_6 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(6);
		private final RuleCall cPropertiesDisplayParserRuleCall_2_0_7 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(7);
		private final RuleCall cPropertiesBorderParserRuleCall_2_0_8 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(8);
		private final RuleCall cPropertiesPaddingParserRuleCall_2_0_9 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(9);
		private final RuleCall cPropertiesMarginParserRuleCall_2_0_10 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(10);
		private final RuleCall cPropertiesVisibilityParserRuleCall_2_0_11 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(11);
		private final RuleCall cPropertiesPageBreakParserRuleCall_2_0_12 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(12);
		private final RuleCall cPropertiesBookmarkParserRuleCall_2_0_13 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(13);
		private final RuleCall cPropertiesWidthParserRuleCall_2_0_14 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(14);
		private final RuleCall cPropertiesHeightParserRuleCall_2_0_15 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(15);
		private final RuleCall cPropertiesAltTextParserRuleCall_2_0_16 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(16);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//elementProperties:
		//	"element properties" "{" properties+=(Font //			| Color 
		//	//			| BackgroundColor
		//	//			| TextStyle 
		//	| FontSize | ColorPalette | HAlignment | VAlignment | Whitespace | StyleRef | Display | Border | Padding | Margin |
		//	Visibility | PageBreak | Bookmark | Width | Height | AltText)+ "}";
		public ParserRule getRule() { return rule; }

		//"element properties" "{" properties+=(Font //			| Color 
		////			| BackgroundColor
		////			| TextStyle 
		//| FontSize | ColorPalette | HAlignment | VAlignment | Whitespace | StyleRef | Display | Border | Padding | Margin |
		//Visibility | PageBreak | Bookmark | Width | Height | AltText)+ "}"
		public Group getGroup() { return cGroup; }

		//"element properties"
		public Keyword getElementPropertiesKeyword_0() { return cElementPropertiesKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//properties+=(Font //			| Color 
		////			| BackgroundColor
		////			| TextStyle 
		//| FontSize | ColorPalette | HAlignment | VAlignment | Whitespace | StyleRef | Display | Border | Padding | Margin |
		//Visibility | PageBreak | Bookmark | Width | Height | AltText)+
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//Font //			| Color 
		////			| BackgroundColor
		////			| TextStyle 
		//| FontSize | ColorPalette | HAlignment | VAlignment | Whitespace | StyleRef | Display | Border | Padding | Margin |
		//Visibility | PageBreak | Bookmark | Width | Height | AltText
		public Alternatives getPropertiesAlternatives_2_0() { return cPropertiesAlternatives_2_0; }

		//Font
		public RuleCall getPropertiesFontParserRuleCall_2_0_0() { return cPropertiesFontParserRuleCall_2_0_0; }

		//FontSize
		public RuleCall getPropertiesFontSizeParserRuleCall_2_0_1() { return cPropertiesFontSizeParserRuleCall_2_0_1; }

		//ColorPalette
		public RuleCall getPropertiesColorPaletteParserRuleCall_2_0_2() { return cPropertiesColorPaletteParserRuleCall_2_0_2; }

		//HAlignment
		public RuleCall getPropertiesHAlignmentParserRuleCall_2_0_3() { return cPropertiesHAlignmentParserRuleCall_2_0_3; }

		//VAlignment
		public RuleCall getPropertiesVAlignmentParserRuleCall_2_0_4() { return cPropertiesVAlignmentParserRuleCall_2_0_4; }

		//Whitespace
		public RuleCall getPropertiesWhitespaceParserRuleCall_2_0_5() { return cPropertiesWhitespaceParserRuleCall_2_0_5; }

		//StyleRef
		public RuleCall getPropertiesStyleRefParserRuleCall_2_0_6() { return cPropertiesStyleRefParserRuleCall_2_0_6; }

		//Display
		public RuleCall getPropertiesDisplayParserRuleCall_2_0_7() { return cPropertiesDisplayParserRuleCall_2_0_7; }

		//Border
		public RuleCall getPropertiesBorderParserRuleCall_2_0_8() { return cPropertiesBorderParserRuleCall_2_0_8; }

		//Padding
		public RuleCall getPropertiesPaddingParserRuleCall_2_0_9() { return cPropertiesPaddingParserRuleCall_2_0_9; }

		//Margin
		public RuleCall getPropertiesMarginParserRuleCall_2_0_10() { return cPropertiesMarginParserRuleCall_2_0_10; }

		//Visibility
		public RuleCall getPropertiesVisibilityParserRuleCall_2_0_11() { return cPropertiesVisibilityParserRuleCall_2_0_11; }

		//PageBreak
		public RuleCall getPropertiesPageBreakParserRuleCall_2_0_12() { return cPropertiesPageBreakParserRuleCall_2_0_12; }

		//Bookmark
		public RuleCall getPropertiesBookmarkParserRuleCall_2_0_13() { return cPropertiesBookmarkParserRuleCall_2_0_13; }

		//Width
		public RuleCall getPropertiesWidthParserRuleCall_2_0_14() { return cPropertiesWidthParserRuleCall_2_0_14; }

		//Height
		public RuleCall getPropertiesHeightParserRuleCall_2_0_15() { return cPropertiesHeightParserRuleCall_2_0_15; }

		//AltText
		public RuleCall getPropertiesAltTextParserRuleCall_2_0_16() { return cPropertiesAltTextParserRuleCall_2_0_16; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ElementPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementProperty");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cColorpaletteAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cColorpaletteColorPaletteParserRuleCall_0_0 = (RuleCall)cColorpaletteAssignment_0.eContents().get(0);
		private final Assignment cFontAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cFontFontParserRuleCall_1_0 = (RuleCall)cFontAssignment_1.eContents().get(0);
		private final Assignment cFontSizeAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cFontSizeFontSizeParserRuleCall_2_0 = (RuleCall)cFontSizeAssignment_2.eContents().get(0);
		
		////	& color = Color? 
		////	& backgroundColor = BackgroundColor?
		////	& textStyle = TextStyle? 
		////	& hAlign = HAlignment? 
		////	& vAlign = VAlignment? 
		////	& whiteSpace = Whitespace? 
		////	& style = StyleRef? 
		////	& display = Display? 
		////	& border = Border? 
		////	& padding = Padding? 
		////	& margin = Margin? 
		////	& visibility = Visibility? 
		////	& pagebreak = PageBreak? 
		////	& toc = Toc? 
		////	& bookmark = Bookmark? 
		////	& width = Width? 
		////	& height = Height? 
		////	& alttext = AltText?
		//ElementProperty:
		//	colorpalette=ColorPalette? & font=Font? & fontSize=FontSize?;
		public ParserRule getRule() { return rule; }

		//colorpalette=ColorPalette? & font=Font? & fontSize=FontSize?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//colorpalette=ColorPalette?
		public Assignment getColorpaletteAssignment_0() { return cColorpaletteAssignment_0; }

		//ColorPalette
		public RuleCall getColorpaletteColorPaletteParserRuleCall_0_0() { return cColorpaletteColorPaletteParserRuleCall_0_0; }

		//font=Font?
		public Assignment getFontAssignment_1() { return cFontAssignment_1; }

		//Font
		public RuleCall getFontFontParserRuleCall_1_0() { return cFontFontParserRuleCall_1_0; }

		//fontSize=FontSize?
		public Assignment getFontSizeAssignment_2() { return cFontSizeAssignment_2; }

		//FontSize
		public RuleCall getFontSizeFontSizeParserRuleCall_2_0() { return cFontSizeFontSizeParserRuleCall_2_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////Include:
		////	'include' include = QualifiedNameWithWildcard
		////;
		////QualifiedNameWithWildcard:
		////	QualifiedName '.*'?
		////;
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class DatasourcesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Datasources");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDatasourcesAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDataSourcesKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDatasourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDatasourceDatasourceParserRuleCall_3_0 = (RuleCall)cDatasourceAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Datasources:
		//	{Datasources} "data-sources" "{" datasource+=Datasource* "}";
		public ParserRule getRule() { return rule; }

		//{Datasources} "data-sources" "{" datasource+=Datasource* "}"
		public Group getGroup() { return cGroup; }

		//{Datasources}
		public Action getDatasourcesAction_0() { return cDatasourcesAction_0; }

		//"data-sources"
		public Keyword getDataSourcesKeyword_1() { return cDataSourcesKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//datasource+=Datasource*
		public Assignment getDatasourceAssignment_3() { return cDatasourceAssignment_3; }

		//Datasource
		public RuleCall getDatasourceDatasourceParserRuleCall_3_0() { return cDatasourceDatasourceParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DatasourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Datasource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataSourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeDatasourceSampleParserRuleCall_3_0_0 = (RuleCall)cTypeAlternatives_3_0.eContents().get(0);
		private final RuleCall cTypeDatasourceJDBCParserRuleCall_3_0_1 = (RuleCall)cTypeAlternatives_3_0.eContents().get(1);
		private final RuleCall cTypeDatasourceCSVParserRuleCall_3_0_2 = (RuleCall)cTypeAlternatives_3_0.eContents().get(2);
		
		//Datasource:
		//	"data-source" name=ID "type" type=(DatasourceSample | DatasourceJDBC | DatasourceCSV);
		public ParserRule getRule() { return rule; }

		//"data-source" name=ID "type" type=(DatasourceSample | DatasourceJDBC | DatasourceCSV)
		public Group getGroup() { return cGroup; }

		//"data-source"
		public Keyword getDataSourceKeyword_0() { return cDataSourceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"type"
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }

		//type=(DatasourceSample | DatasourceJDBC | DatasourceCSV)
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//DatasourceSample | DatasourceJDBC | DatasourceCSV
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }

		//DatasourceSample
		public RuleCall getTypeDatasourceSampleParserRuleCall_3_0_0() { return cTypeDatasourceSampleParserRuleCall_3_0_0; }

		//DatasourceJDBC
		public RuleCall getTypeDatasourceJDBCParserRuleCall_3_0_1() { return cTypeDatasourceJDBCParserRuleCall_3_0_1; }

		//DatasourceCSV
		public RuleCall getTypeDatasourceCSVParserRuleCall_3_0_2() { return cTypeDatasourceCSVParserRuleCall_3_0_2; }
	}

	public class DatasourceSampleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatasourceSample");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTypeSampleKeyword_0 = (Keyword)cTypeAssignment.eContents().get(0);
		
		//DatasourceSample:
		//	type="sample";
		public ParserRule getRule() { return rule; }

		//type="sample"
		public Assignment getTypeAssignment() { return cTypeAssignment; }

		//"sample"
		public Keyword getTypeSampleKeyword_0() { return cTypeSampleKeyword_0; }
	}

	public class DatasourceJDBCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatasourceJDBC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJdbcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cDriverKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cDriverAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cDriverSTRINGTerminalRuleCall_2_0_1_0 = (RuleCall)cDriverAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cUrlKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cUrlAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cUrlAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cUserKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cUserAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cUserSTRINGTerminalRuleCall_2_2_1_0 = (RuleCall)cUserAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cPasswordKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cPasswordAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cPasswordSTRINGTerminalRuleCall_2_3_1_0 = (RuleCall)cPasswordAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DatasourceJDBC:
		//	"jdbc" "{" ("driver" driver=STRING & "url" url=STRING & "user" user=STRING & "password" password=STRING) "}";
		public ParserRule getRule() { return rule; }

		//"jdbc" "{" ("driver" driver=STRING & "url" url=STRING & "user" user=STRING & "password" password=STRING) "}"
		public Group getGroup() { return cGroup; }

		//"jdbc"
		public Keyword getJdbcKeyword_0() { return cJdbcKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"driver" driver=STRING & "url" url=STRING & "user" user=STRING & "password" password=STRING
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//"driver" driver=STRING
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"driver"
		public Keyword getDriverKeyword_2_0_0() { return cDriverKeyword_2_0_0; }

		//driver=STRING
		public Assignment getDriverAssignment_2_0_1() { return cDriverAssignment_2_0_1; }

		//STRING
		public RuleCall getDriverSTRINGTerminalRuleCall_2_0_1_0() { return cDriverSTRINGTerminalRuleCall_2_0_1_0; }

		//"url" url=STRING
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"url"
		public Keyword getUrlKeyword_2_1_0() { return cUrlKeyword_2_1_0; }

		//url=STRING
		public Assignment getUrlAssignment_2_1_1() { return cUrlAssignment_2_1_1; }

		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_1_1_0() { return cUrlSTRINGTerminalRuleCall_2_1_1_0; }

		//"user" user=STRING
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"user"
		public Keyword getUserKeyword_2_2_0() { return cUserKeyword_2_2_0; }

		//user=STRING
		public Assignment getUserAssignment_2_2_1() { return cUserAssignment_2_2_1; }

		//STRING
		public RuleCall getUserSTRINGTerminalRuleCall_2_2_1_0() { return cUserSTRINGTerminalRuleCall_2_2_1_0; }

		//"password" password=STRING
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"password"
		public Keyword getPasswordKeyword_2_3_0() { return cPasswordKeyword_2_3_0; }

		//password=STRING
		public Assignment getPasswordAssignment_2_3_1() { return cPasswordAssignment_2_3_1; }

		//STRING
		public RuleCall getPasswordSTRINGTerminalRuleCall_2_3_1_0() { return cPasswordSTRINGTerminalRuleCall_2_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class DatasourceCSVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatasourceCSV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCsvKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cUrlKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cUrlAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cUrlSTRINGTerminalRuleCall_2_0_1_0 = (RuleCall)cUrlAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cCharsetKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cCharsetAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cCharsetSTRINGTerminalRuleCall_2_1_1_0 = (RuleCall)cCharsetAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cDelimiterKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cDelimiterAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cDelimiterSTRINGTerminalRuleCall_2_2_1_0 = (RuleCall)cDelimiterAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cHeaderlineKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cHeaderlineAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cHeaderlineBooleanLiteralParserRuleCall_2_3_1_0 = (RuleCall)cHeaderlineAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////#TODO Generator statement
		//DatasourceCSV:
		//	"csv" "{" ("url" url=STRING //#TODO String+
		//	& "charset" charset=STRING & "delimiter" delimiter=STRING & "headerline" headerline=BooleanLiteral) "}";
		public ParserRule getRule() { return rule; }

		//"csv" "{" ("url" url=STRING //#TODO String+
		//& "charset" charset=STRING & "delimiter" delimiter=STRING & "headerline" headerline=BooleanLiteral) "}"
		public Group getGroup() { return cGroup; }

		//"csv"
		public Keyword getCsvKeyword_0() { return cCsvKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"url" url=STRING //#TODO String+
		//& "charset" charset=STRING & "delimiter" delimiter=STRING & "headerline" headerline=BooleanLiteral
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//"url" url=STRING
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"url"
		public Keyword getUrlKeyword_2_0_0() { return cUrlKeyword_2_0_0; }

		//url=STRING
		public Assignment getUrlAssignment_2_0_1() { return cUrlAssignment_2_0_1; }

		//STRING
		public RuleCall getUrlSTRINGTerminalRuleCall_2_0_1_0() { return cUrlSTRINGTerminalRuleCall_2_0_1_0; }

		//"charset" charset=STRING
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"charset"
		public Keyword getCharsetKeyword_2_1_0() { return cCharsetKeyword_2_1_0; }

		//charset=STRING
		public Assignment getCharsetAssignment_2_1_1() { return cCharsetAssignment_2_1_1; }

		//STRING
		public RuleCall getCharsetSTRINGTerminalRuleCall_2_1_1_0() { return cCharsetSTRINGTerminalRuleCall_2_1_1_0; }

		//"delimiter" delimiter=STRING
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"delimiter"
		public Keyword getDelimiterKeyword_2_2_0() { return cDelimiterKeyword_2_2_0; }

		//delimiter=STRING
		public Assignment getDelimiterAssignment_2_2_1() { return cDelimiterAssignment_2_2_1; }

		//STRING
		public RuleCall getDelimiterSTRINGTerminalRuleCall_2_2_1_0() { return cDelimiterSTRINGTerminalRuleCall_2_2_1_0; }

		//"headerline" headerline=BooleanLiteral
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"headerline"
		public Keyword getHeaderlineKeyword_2_3_0() { return cHeaderlineKeyword_2_3_0; }

		//headerline=BooleanLiteral
		public Assignment getHeaderlineAssignment_2_3_1() { return cHeaderlineAssignment_2_3_1; }

		//BooleanLiteral
		public RuleCall getHeaderlineBooleanLiteralParserRuleCall_2_3_1_0() { return cHeaderlineBooleanLiteralParserRuleCall_2_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class DatasetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Datasets");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataSetsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDatasetAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDatasetDatasetParserRuleCall_2_0 = (RuleCall)cDatasetAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Datasets:
		//	"data-sets" "{" dataset+=Dataset* "}";
		public ParserRule getRule() { return rule; }

		//"data-sets" "{" dataset+=Dataset* "}"
		public Group getGroup() { return cGroup; }

		//"data-sets"
		public Keyword getDataSetsKeyword_0() { return cDataSetsKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//dataset+=Dataset*
		public Assignment getDatasetAssignment_2() { return cDatasetAssignment_2; }

		//Dataset
		public RuleCall getDatasetDatasetParserRuleCall_2_0() { return cDatasetDatasetParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class DatasetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dataset");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatasetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cDatasourceKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cDatasourcerefAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final CrossReference cDatasourcerefDatasourceCrossReference_3_0_1_0 = (CrossReference)cDatasourcerefAssignment_3_0_1.eContents().get(0);
		private final RuleCall cDatasourcerefDatasourceQualifiedNameParserRuleCall_3_0_1_0_1 = (RuleCall)cDatasourcerefDatasourceCrossReference_3_0_1_0.eContents().get(1);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cFieldsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cFieldAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cFieldDatasetFieldParserRuleCall_3_1_2_0 = (RuleCall)cFieldAssignment_3_1_2.eContents().get(0);
		private final Group cGroup_3_1_3 = (Group)cGroup_3_1.eContents().get(3);
		private final Keyword cCommaKeyword_3_1_3_0 = (Keyword)cGroup_3_1_3.eContents().get(0);
		private final Assignment cFieldAssignment_3_1_3_1 = (Assignment)cGroup_3_1_3.eContents().get(1);
		private final RuleCall cFieldDatasetFieldParserRuleCall_3_1_3_1_0 = (RuleCall)cFieldAssignment_3_1_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_4 = (Keyword)cGroup_3_1.eContents().get(4);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cParametersKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_2_1 = (Keyword)cGroup_3_2.eContents().get(1);
		private final Assignment cParameterAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final CrossReference cParameterParameterCrossReference_3_2_2_0 = (CrossReference)cParameterAssignment_3_2_2.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_3_2_2_0_1 = (RuleCall)cParameterParameterCrossReference_3_2_2_0.eContents().get(1);
		private final Group cGroup_3_2_3 = (Group)cGroup_3_2.eContents().get(3);
		private final Keyword cCommaKeyword_3_2_3_0 = (Keyword)cGroup_3_2_3.eContents().get(0);
		private final Assignment cParameterAssignment_3_2_3_1 = (Assignment)cGroup_3_2_3.eContents().get(1);
		private final CrossReference cParameterParameterCrossReference_3_2_3_1_0 = (CrossReference)cParameterAssignment_3_2_3_1.eContents().get(0);
		private final RuleCall cParameterParameterIDTerminalRuleCall_3_2_3_1_0_1 = (RuleCall)cParameterParameterCrossReference_3_2_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3_2_4 = (Keyword)cGroup_3_2.eContents().get(4);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cQueryKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_3_1 = (Keyword)cGroup_3_3.eContents().get(1);
		private final Assignment cQueryAssignment_3_3_2 = (Assignment)cGroup_3_3.eContents().get(2);
		private final RuleCall cQuerySTRINGTerminalRuleCall_3_3_2_0 = (RuleCall)cQueryAssignment_3_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3_3 = (Keyword)cGroup_3_3.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Dataset:
		//	"dataset" name=ID "{" ("datasource" datasourceref=[Datasource|QualifiedName] & ("fields" "{" field+=DatasetField (","
		//	field+=DatasetField)* "}")? & ("parameters" "{" parameter+=[Parameter] ("," parameter+=[Parameter])* "}")? & //	('computed fields' '{' computedfield += ComputedDatasetField* '}')?
		//	"query" "{" query=STRING? //#TODO SelectStatement
		//	"}") "}";
		public ParserRule getRule() { return rule; }

		//"dataset" name=ID "{" ("datasource" datasourceref=[Datasource|QualifiedName] & ("fields" "{" field+=DatasetField (","
		//field+=DatasetField)* "}")? & ("parameters" "{" parameter+=[Parameter] ("," parameter+=[Parameter])* "}")? & //	('computed fields' '{' computedfield += ComputedDatasetField* '}')?
		//"query" "{" query=STRING? //#TODO SelectStatement
		//"}") "}"
		public Group getGroup() { return cGroup; }

		//"dataset"
		public Keyword getDatasetKeyword_0() { return cDatasetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"datasource" datasourceref=[Datasource|QualifiedName] & ("fields" "{" field+=DatasetField ("," field+=DatasetField)*
		//"}")? & ("parameters" "{" parameter+=[Parameter] ("," parameter+=[Parameter])* "}")? & //	('computed fields' '{' computedfield += ComputedDatasetField* '}')?
		//"query" "{" query=STRING? //#TODO SelectStatement
		//"}"
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//"datasource" datasourceref=[Datasource|QualifiedName]
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"datasource"
		public Keyword getDatasourceKeyword_3_0_0() { return cDatasourceKeyword_3_0_0; }

		//datasourceref=[Datasource|QualifiedName]
		public Assignment getDatasourcerefAssignment_3_0_1() { return cDatasourcerefAssignment_3_0_1; }

		//[Datasource|QualifiedName]
		public CrossReference getDatasourcerefDatasourceCrossReference_3_0_1_0() { return cDatasourcerefDatasourceCrossReference_3_0_1_0; }

		//QualifiedName
		public RuleCall getDatasourcerefDatasourceQualifiedNameParserRuleCall_3_0_1_0_1() { return cDatasourcerefDatasourceQualifiedNameParserRuleCall_3_0_1_0_1; }

		//("fields" "{" field+=DatasetField ("," field+=DatasetField)* "}")?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"fields"
		public Keyword getFieldsKeyword_3_1_0() { return cFieldsKeyword_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1_1() { return cLeftCurlyBracketKeyword_3_1_1; }

		//field+=DatasetField
		public Assignment getFieldAssignment_3_1_2() { return cFieldAssignment_3_1_2; }

		//DatasetField
		public RuleCall getFieldDatasetFieldParserRuleCall_3_1_2_0() { return cFieldDatasetFieldParserRuleCall_3_1_2_0; }

		//("," field+=DatasetField)*
		public Group getGroup_3_1_3() { return cGroup_3_1_3; }

		//","
		public Keyword getCommaKeyword_3_1_3_0() { return cCommaKeyword_3_1_3_0; }

		//field+=DatasetField
		public Assignment getFieldAssignment_3_1_3_1() { return cFieldAssignment_3_1_3_1; }

		//DatasetField
		public RuleCall getFieldDatasetFieldParserRuleCall_3_1_3_1_0() { return cFieldDatasetFieldParserRuleCall_3_1_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_1_4() { return cRightCurlyBracketKeyword_3_1_4; }

		//("parameters" "{" parameter+=[Parameter] ("," parameter+=[Parameter])* "}")?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"parameters"
		public Keyword getParametersKeyword_3_2_0() { return cParametersKeyword_3_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_2_1() { return cLeftCurlyBracketKeyword_3_2_1; }

		//parameter+=[Parameter]
		public Assignment getParameterAssignment_3_2_2() { return cParameterAssignment_3_2_2; }

		//[Parameter]
		public CrossReference getParameterParameterCrossReference_3_2_2_0() { return cParameterParameterCrossReference_3_2_2_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_3_2_2_0_1() { return cParameterParameterIDTerminalRuleCall_3_2_2_0_1; }

		//("," parameter+=[Parameter])*
		public Group getGroup_3_2_3() { return cGroup_3_2_3; }

		//","
		public Keyword getCommaKeyword_3_2_3_0() { return cCommaKeyword_3_2_3_0; }

		//parameter+=[Parameter]
		public Assignment getParameterAssignment_3_2_3_1() { return cParameterAssignment_3_2_3_1; }

		//[Parameter]
		public CrossReference getParameterParameterCrossReference_3_2_3_1_0() { return cParameterParameterCrossReference_3_2_3_1_0; }

		//ID
		public RuleCall getParameterParameterIDTerminalRuleCall_3_2_3_1_0_1() { return cParameterParameterIDTerminalRuleCall_3_2_3_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2_4() { return cRightCurlyBracketKeyword_3_2_4; }

		////	('computed fields' '{' computedfield += ComputedDatasetField* '}')?
		//"query" "{" query=STRING? //#TODO SelectStatement
		//"}"
		public Group getGroup_3_3() { return cGroup_3_3; }

		////	('computed fields' '{' computedfield += ComputedDatasetField* '}')?
		//"query"
		public Keyword getQueryKeyword_3_3_0() { return cQueryKeyword_3_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_3_1() { return cLeftCurlyBracketKeyword_3_3_1; }

		//query=STRING?
		public Assignment getQueryAssignment_3_3_2() { return cQueryAssignment_3_3_2; }

		//STRING
		public RuleCall getQuerySTRINGTerminalRuleCall_3_3_2_0() { return cQuerySTRINGTerminalRuleCall_3_3_2_0; }

		////#TODO SelectStatement
		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3_3() { return cRightCurlyBracketKeyword_3_3_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DatasetFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DatasetField");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleDatasetFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComputedDatasetFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DatasetField:
		//	SimpleDatasetField | ComputedDatasetField;
		public ParserRule getRule() { return rule; }

		//SimpleDatasetField | ComputedDatasetField
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleDatasetField
		public RuleCall getSimpleDatasetFieldParserRuleCall_0() { return cSimpleDatasetFieldParserRuleCall_0; }

		//ComputedDatasetField
		public RuleCall getComputedDatasetFieldParserRuleCall_1() { return cComputedDatasetFieldParserRuleCall_1; }
	}

	public class SimpleDatasetFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleDatasetField");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//SimpleDatasetField:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ComputedDatasetFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComputedDatasetField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cAggregationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAggregationAggregatorFunctionEnumRuleCall_1_0 = (RuleCall)cAggregationAssignment_1.eContents().get(0);
		private final Assignment cDatatypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDatatypeDataTypeEnumRuleCall_2_0 = (RuleCall)cDatatypeAssignment_2.eContents().get(0);
		private final Assignment cArgumentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgumentJSExpressionParserRuleCall_3_0 = (RuleCall)cArgumentAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFilterKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFilterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFilterJSExpressionParserRuleCall_4_1_0 = (RuleCall)cFilterAssignment_4_1.eContents().get(0);
		
		//ComputedDatasetField:
		//	name=ID aggregation=AggregatorFunction datatype=DataType argument=JSExpression ("filter" filter=JSExpression)?;
		public ParserRule getRule() { return rule; }

		//name=ID aggregation=AggregatorFunction datatype=DataType argument=JSExpression ("filter" filter=JSExpression)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//aggregation=AggregatorFunction
		public Assignment getAggregationAssignment_1() { return cAggregationAssignment_1; }

		//AggregatorFunction
		public RuleCall getAggregationAggregatorFunctionEnumRuleCall_1_0() { return cAggregationAggregatorFunctionEnumRuleCall_1_0; }

		//datatype=DataType
		public Assignment getDatatypeAssignment_2() { return cDatatypeAssignment_2; }

		//DataType
		public RuleCall getDatatypeDataTypeEnumRuleCall_2_0() { return cDatatypeDataTypeEnumRuleCall_2_0; }

		//argument=JSExpression
		public Assignment getArgumentAssignment_3() { return cArgumentAssignment_3; }

		//JSExpression
		public RuleCall getArgumentJSExpressionParserRuleCall_3_0() { return cArgumentJSExpressionParserRuleCall_3_0; }

		//("filter" filter=JSExpression)?
		public Group getGroup_4() { return cGroup_4; }

		//"filter"
		public Keyword getFilterKeyword_4_0() { return cFilterKeyword_4_0; }

		//filter=JSExpression
		public Assignment getFilterAssignment_4_1() { return cFilterAssignment_4_1; }

		//JSExpression
		public RuleCall getFilterJSExpressionParserRuleCall_4_1_0() { return cFilterJSExpressionParserRuleCall_4_1_0; }
	}

	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParametersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterParameterParserRuleCall_2_0 = (RuleCall)cParameterAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parameters:
		//	"parameters" "{" parameter+=Parameter* "}";
		public ParserRule getRule() { return rule; }

		//"parameters" "{" parameter+=Parameter* "}"
		public Group getGroup() { return cGroup; }

		//"parameters"
		public Keyword getParametersKeyword_0() { return cParametersKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//parameter+=Parameter*
		public Assignment getParameterAssignment_2() { return cParameterAssignment_2; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_2_0() { return cParameterParameterParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class StaticParameterValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticParameterValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueStaticParameterValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cSortByKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSortAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSortStaticParameterSortEnumRuleCall_2_1_0 = (RuleCall)cSortAssignment_2_1.eContents().get(0);
		private final Assignment cSorttypeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cSorttypeSortTypeEnumRuleCall_2_2_0 = (RuleCall)cSorttypeAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StaticParameterValues:
		//	"{" value+=StaticParameterValue* ("sort by" sort=StaticParameterSort sorttype=SortType)? "}";
		public ParserRule getRule() { return rule; }

		//"{" value+=StaticParameterValue* ("sort by" sort=StaticParameterSort sorttype=SortType)? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//value+=StaticParameterValue*
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//StaticParameterValue
		public RuleCall getValueStaticParameterValueParserRuleCall_1_0() { return cValueStaticParameterValueParserRuleCall_1_0; }

		//("sort by" sort=StaticParameterSort sorttype=SortType)?
		public Group getGroup_2() { return cGroup_2; }

		//"sort by"
		public Keyword getSortByKeyword_2_0() { return cSortByKeyword_2_0; }

		//sort=StaticParameterSort
		public Assignment getSortAssignment_2_1() { return cSortAssignment_2_1; }

		//StaticParameterSort
		public RuleCall getSortStaticParameterSortEnumRuleCall_2_1_0() { return cSortStaticParameterSortEnumRuleCall_2_1_0; }

		//sorttype=SortType
		public Assignment getSorttypeAssignment_2_2() { return cSorttypeAssignment_2_2; }

		//SortType
		public RuleCall getSorttypeSortTypeEnumRuleCall_2_2_0() { return cSorttypeSortTypeEnumRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class StaticParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticParameterValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLabelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLabelSTRINGTerminalRuleCall_0_0 = (RuleCall)cLabelAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Assignment cDefaultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cDefaultDefaultKeyword_3_0 = (Keyword)cDefaultAssignment_3.eContents().get(0);
		
		//StaticParameterValue:
		//	label=STRING ":" value=STRING default?="default"?;
		public ParserRule getRule() { return rule; }

		//label=STRING ":" value=STRING default?="default"?
		public Group getGroup() { return cGroup; }

		//label=STRING
		public Assignment getLabelAssignment_0() { return cLabelAssignment_0; }

		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_0_0() { return cLabelSTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }

		//default?="default"?
		public Assignment getDefaultAssignment_3() { return cDefaultAssignment_3; }

		//"default"
		public Keyword getDefaultDefaultKeyword_3_0() { return cDefaultDefaultKeyword_3_0; }
	}

	public class DynamicParameterValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DynamicParameterValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDynamicParameterValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DynamicParameterValues:
		//	"{" value+=DynamicParameterValue "}";
		public ParserRule getRule() { return rule; }

		//"{" value+=DynamicParameterValue "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//value+=DynamicParameterValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//DynamicParameterValue
		public RuleCall getValueDynamicParameterValueParserRuleCall_1_0() { return cValueDynamicParameterValueParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class DynamicParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DynamicParameterValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatasetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDatasetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDatasetDatasetCrossReference_1_0 = (CrossReference)cDatasetAssignment_1.eContents().get(0);
		private final RuleCall cDatasetDatasetIDTerminalRuleCall_1_0_1 = (RuleCall)cDatasetDatasetCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLabelAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLabelJSExpressionParserRuleCall_2_0_0 = (RuleCall)cLabelAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cValueAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cValueJSExpressionParserRuleCall_2_2_0 = (RuleCall)cValueAssignment_2_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cDefaultKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cDefaultAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cDefaultJSExpressionParserRuleCall_3_0_1_0 = (RuleCall)cDefaultAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cSortByKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cSortAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final CrossReference cSortDatasetFieldCrossReference_3_1_1_0 = (CrossReference)cSortAssignment_3_1_1.eContents().get(0);
		private final RuleCall cSortDatasetFieldQualifiedNameParserRuleCall_3_1_1_0_1 = (RuleCall)cSortDatasetFieldCrossReference_3_1_1_0.eContents().get(1);
		private final Assignment cSorttypeAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cSorttypeSortTypeEnumRuleCall_3_1_2_0 = (RuleCall)cSorttypeAssignment_3_1_2.eContents().get(0);
		
		//DynamicParameterValue:
		//	"dataset" dataset=[Dataset] (label=JSExpression ":" value=JSExpression) (("default" default+=JSExpression*)? &
		//	("sort by" sort=[DatasetField|QualifiedName] sorttype=SortType)?);
		public ParserRule getRule() { return rule; }

		//"dataset" dataset=[Dataset] (label=JSExpression ":" value=JSExpression) (("default" default+=JSExpression*)? &
		//("sort by" sort=[DatasetField|QualifiedName] sorttype=SortType)?)
		public Group getGroup() { return cGroup; }

		//"dataset"
		public Keyword getDatasetKeyword_0() { return cDatasetKeyword_0; }

		//dataset=[Dataset]
		public Assignment getDatasetAssignment_1() { return cDatasetAssignment_1; }

		//[Dataset]
		public CrossReference getDatasetDatasetCrossReference_1_0() { return cDatasetDatasetCrossReference_1_0; }

		//ID
		public RuleCall getDatasetDatasetIDTerminalRuleCall_1_0_1() { return cDatasetDatasetIDTerminalRuleCall_1_0_1; }

		//label=JSExpression ":" value=JSExpression
		public Group getGroup_2() { return cGroup_2; }

		//label=JSExpression
		public Assignment getLabelAssignment_2_0() { return cLabelAssignment_2_0; }

		//JSExpression
		public RuleCall getLabelJSExpressionParserRuleCall_2_0_0() { return cLabelJSExpressionParserRuleCall_2_0_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//value=JSExpression
		public Assignment getValueAssignment_2_2() { return cValueAssignment_2_2; }

		//JSExpression
		public RuleCall getValueJSExpressionParserRuleCall_2_2_0() { return cValueJSExpressionParserRuleCall_2_2_0; }

		//("default" default+=JSExpression*)? & ("sort by" sort=[DatasetField|QualifiedName] sorttype=SortType)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("default" default+=JSExpression*)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"default"
		public Keyword getDefaultKeyword_3_0_0() { return cDefaultKeyword_3_0_0; }

		//default+=JSExpression*
		public Assignment getDefaultAssignment_3_0_1() { return cDefaultAssignment_3_0_1; }

		//JSExpression
		public RuleCall getDefaultJSExpressionParserRuleCall_3_0_1_0() { return cDefaultJSExpressionParserRuleCall_3_0_1_0; }

		//("sort by" sort=[DatasetField|QualifiedName] sorttype=SortType)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"sort by"
		public Keyword getSortByKeyword_3_1_0() { return cSortByKeyword_3_1_0; }

		//sort=[DatasetField|QualifiedName]
		public Assignment getSortAssignment_3_1_1() { return cSortAssignment_3_1_1; }

		//[DatasetField|QualifiedName]
		public CrossReference getSortDatasetFieldCrossReference_3_1_1_0() { return cSortDatasetFieldCrossReference_3_1_1_0; }

		//QualifiedName
		public RuleCall getSortDatasetFieldQualifiedNameParserRuleCall_3_1_1_0_1() { return cSortDatasetFieldQualifiedNameParserRuleCall_3_1_1_0_1; }

		//sorttype=SortType
		public Assignment getSorttypeAssignment_3_1_2() { return cSorttypeAssignment_3_1_2; }

		//SortType
		public RuleCall getSorttypeSortTypeEnumRuleCall_3_1_2_0() { return cSorttypeSortTypeEnumRuleCall_3_1_2_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cControltypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cControltypeParameterControlTypeEnumRuleCall_0_0 = (RuleCall)cControltypeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cPromtTextKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cPromtAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cPromtSTRINGTerminalRuleCall_3_0_1_0 = (RuleCall)cPromtAssignment_3_0_1.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cHelpTextKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cHelpAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cHelpSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cHelpAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cHiddenKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cHideAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cHideBooleanLiteralParserRuleCall_3_2_1_0 = (RuleCall)cHideAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cRequiredKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cRequiredAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cRequiredBooleanLiteralParserRuleCall_3_3_1_0 = (RuleCall)cRequiredAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cDuplicateKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cDuplicateAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cDuplicateBooleanLiteralParserRuleCall_3_4_1_0 = (RuleCall)cDuplicateAssignment_3_4_1.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final Keyword cValuesKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cValuetypeAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final RuleCall cValuetypeParameterValueTypeEnumRuleCall_3_5_1_0 = (RuleCall)cValuetypeAssignment_3_5_1.eContents().get(0);
		private final Assignment cParamtypeAssignment_3_5_2 = (Assignment)cGroup_3_5.eContents().get(2);
		private final RuleCall cParamtypeParameterTypeEnumRuleCall_3_5_2_0 = (RuleCall)cParamtypeAssignment_3_5_2.eContents().get(0);
		private final Assignment cDatatypeAssignment_3_5_3 = (Assignment)cGroup_3_5.eContents().get(3);
		private final RuleCall cDatatypeDataTypeEnumRuleCall_3_5_3_0 = (RuleCall)cDatatypeAssignment_3_5_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_5_4 = (Assignment)cGroup_3_5.eContents().get(4);
		private final RuleCall cValuesParameterValueParserRuleCall_3_5_4_0 = (RuleCall)cValuesAssignment_3_5_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Parameter:
		//	controltype=ParameterControlType name=ID "{" (("promt-text" promt=STRING)? & ("help-text" help=STRING)? & ("hidden"
		//	hide=BooleanLiteral)? & ("required" required=BooleanLiteral)? & ("duplicate" duplicate=BooleanLiteral)? & "values"
		//	valuetype=ParameterValueType paramtype=ParameterType datatype=DataType values=ParameterValue)? "}";
		public ParserRule getRule() { return rule; }

		//controltype=ParameterControlType name=ID "{" (("promt-text" promt=STRING)? & ("help-text" help=STRING)? & ("hidden"
		//hide=BooleanLiteral)? & ("required" required=BooleanLiteral)? & ("duplicate" duplicate=BooleanLiteral)? & "values"
		//valuetype=ParameterValueType paramtype=ParameterType datatype=DataType values=ParameterValue)? "}"
		public Group getGroup() { return cGroup; }

		//controltype=ParameterControlType
		public Assignment getControltypeAssignment_0() { return cControltypeAssignment_0; }

		//ParameterControlType
		public RuleCall getControltypeParameterControlTypeEnumRuleCall_0_0() { return cControltypeParameterControlTypeEnumRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(("promt-text" promt=STRING)? & ("help-text" help=STRING)? & ("hidden" hide=BooleanLiteral)? & ("required"
		//required=BooleanLiteral)? & ("duplicate" duplicate=BooleanLiteral)? & "values" valuetype=ParameterValueType
		//paramtype=ParameterType datatype=DataType values=ParameterValue)?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//("promt-text" promt=STRING)?
		public Group getGroup_3_0() { return cGroup_3_0; }

		//"promt-text"
		public Keyword getPromtTextKeyword_3_0_0() { return cPromtTextKeyword_3_0_0; }

		//promt=STRING
		public Assignment getPromtAssignment_3_0_1() { return cPromtAssignment_3_0_1; }

		//STRING
		public RuleCall getPromtSTRINGTerminalRuleCall_3_0_1_0() { return cPromtSTRINGTerminalRuleCall_3_0_1_0; }

		//("help-text" help=STRING)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"help-text"
		public Keyword getHelpTextKeyword_3_1_0() { return cHelpTextKeyword_3_1_0; }

		//help=STRING
		public Assignment getHelpAssignment_3_1_1() { return cHelpAssignment_3_1_1; }

		//STRING
		public RuleCall getHelpSTRINGTerminalRuleCall_3_1_1_0() { return cHelpSTRINGTerminalRuleCall_3_1_1_0; }

		//("hidden" hide=BooleanLiteral)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"hidden"
		public Keyword getHiddenKeyword_3_2_0() { return cHiddenKeyword_3_2_0; }

		//hide=BooleanLiteral
		public Assignment getHideAssignment_3_2_1() { return cHideAssignment_3_2_1; }

		//BooleanLiteral
		public RuleCall getHideBooleanLiteralParserRuleCall_3_2_1_0() { return cHideBooleanLiteralParserRuleCall_3_2_1_0; }

		//("required" required=BooleanLiteral)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//"required"
		public Keyword getRequiredKeyword_3_3_0() { return cRequiredKeyword_3_3_0; }

		//required=BooleanLiteral
		public Assignment getRequiredAssignment_3_3_1() { return cRequiredAssignment_3_3_1; }

		//BooleanLiteral
		public RuleCall getRequiredBooleanLiteralParserRuleCall_3_3_1_0() { return cRequiredBooleanLiteralParserRuleCall_3_3_1_0; }

		//("duplicate" duplicate=BooleanLiteral)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//"duplicate"
		public Keyword getDuplicateKeyword_3_4_0() { return cDuplicateKeyword_3_4_0; }

		//duplicate=BooleanLiteral
		public Assignment getDuplicateAssignment_3_4_1() { return cDuplicateAssignment_3_4_1; }

		//BooleanLiteral
		public RuleCall getDuplicateBooleanLiteralParserRuleCall_3_4_1_0() { return cDuplicateBooleanLiteralParserRuleCall_3_4_1_0; }

		//"values" valuetype=ParameterValueType paramtype=ParameterType datatype=DataType values=ParameterValue
		public Group getGroup_3_5() { return cGroup_3_5; }

		//"values"
		public Keyword getValuesKeyword_3_5_0() { return cValuesKeyword_3_5_0; }

		//valuetype=ParameterValueType
		public Assignment getValuetypeAssignment_3_5_1() { return cValuetypeAssignment_3_5_1; }

		//ParameterValueType
		public RuleCall getValuetypeParameterValueTypeEnumRuleCall_3_5_1_0() { return cValuetypeParameterValueTypeEnumRuleCall_3_5_1_0; }

		//paramtype=ParameterType
		public Assignment getParamtypeAssignment_3_5_2() { return cParamtypeAssignment_3_5_2; }

		//ParameterType
		public RuleCall getParamtypeParameterTypeEnumRuleCall_3_5_2_0() { return cParamtypeParameterTypeEnumRuleCall_3_5_2_0; }

		//datatype=DataType
		public Assignment getDatatypeAssignment_3_5_3() { return cDatatypeAssignment_3_5_3; }

		//DataType
		public RuleCall getDatatypeDataTypeEnumRuleCall_3_5_3_0() { return cDatatypeDataTypeEnumRuleCall_3_5_3_0; }

		//values=ParameterValue
		public Assignment getValuesAssignment_3_5_4() { return cValuesAssignment_3_5_4; }

		//ParameterValue
		public RuleCall getValuesParameterValueParserRuleCall_3_5_4_0() { return cValuesParameterValueParserRuleCall_3_5_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDynamicParameterValuesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStaticParameterValuesParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ParameterValue:
		//	DynamicParameterValues | StaticParameterValues;
		public ParserRule getRule() { return rule; }

		//DynamicParameterValues | StaticParameterValues
		public Alternatives getAlternatives() { return cAlternatives; }

		//DynamicParameterValues
		public RuleCall getDynamicParameterValuesParserRuleCall_0() { return cDynamicParameterValuesParserRuleCall_0; }

		//StaticParameterValues
		public RuleCall getStaticParameterValuesParserRuleCall_1() { return cStaticParameterValuesParserRuleCall_1; }
	}

	public class StylesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Styles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStylesKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStyleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStyleStyleParserRuleCall_2_0 = (RuleCall)cStyleAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Styles:
		//	"styles" "{" style+=Style* "}";
		public ParserRule getRule() { return rule; }

		//"styles" "{" style+=Style* "}"
		public Group getGroup() { return cGroup; }

		//"styles"
		public Keyword getStylesKeyword_0() { return cStylesKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//style+=Style*
		public Assignment getStyleAssignment_2() { return cStyleAssignment_2; }

		//Style
		public RuleCall getStyleStyleParserRuleCall_2_0() { return cStyleStyleParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PageSetupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageSetup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPageSetupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPropertiesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPropertiesPagePropertiesParserRuleCall_1_1_0 = (RuleCall)cPropertiesAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//PageSetup:
		//	"page-setup" ("{" properties+=PageProperties "}")?;
		public ParserRule getRule() { return rule; }

		//"page-setup" ("{" properties+=PageProperties "}")?
		public Group getGroup() { return cGroup; }

		//"page-setup"
		public Keyword getPageSetupKeyword_0() { return cPageSetupKeyword_0; }

		//("{" properties+=PageProperties "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//properties+=PageProperties
		public Assignment getPropertiesAssignment_1_1() { return cPropertiesAssignment_1_1; }

		//PageProperties
		public RuleCall getPropertiesPagePropertiesParserRuleCall_1_1_0() { return cPropertiesPagePropertiesParserRuleCall_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBodyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsReportElementsParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Body:
		//	{Body} "body" "{" elements+=ReportElements* "}";
		public ParserRule getRule() { return rule; }

		//{Body} "body" "{" elements+=ReportElements* "}"
		public Group getGroup() { return cGroup; }

		//{Body}
		public Action getBodyAction_0() { return cBodyAction_0; }

		//"body"
		public Keyword getBodyKeyword_1() { return cBodyKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=ReportElements*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//ReportElements
		public RuleCall getElementsReportElementsParserRuleCall_3_0() { return cElementsReportElementsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ReportElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReportElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDynamicTextParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXDataParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cImageParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cChartParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cListParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cGridParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cTableParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cCrossTableParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//ReportElements: //	BasicElements | ComplexElements
		//	Label | Text | DynamicText | xData | Image | Chart | List | Grid | Table | CrossTable;
		public ParserRule getRule() { return rule; }

		////	BasicElements | ComplexElements
		//Label | Text | DynamicText | xData | Image | Chart | List | Grid | Table | CrossTable
		public Alternatives getAlternatives() { return cAlternatives; }

		////	BasicElements | ComplexElements
		//Label
		public RuleCall getLabelParserRuleCall_0() { return cLabelParserRuleCall_0; }

		//Text
		public RuleCall getTextParserRuleCall_1() { return cTextParserRuleCall_1; }

		//DynamicText
		public RuleCall getDynamicTextParserRuleCall_2() { return cDynamicTextParserRuleCall_2; }

		//xData
		public RuleCall getXDataParserRuleCall_3() { return cXDataParserRuleCall_3; }

		//Image
		public RuleCall getImageParserRuleCall_4() { return cImageParserRuleCall_4; }

		//Chart
		public RuleCall getChartParserRuleCall_5() { return cChartParserRuleCall_5; }

		//List
		public RuleCall getListParserRuleCall_6() { return cListParserRuleCall_6; }

		//Grid
		public RuleCall getGridParserRuleCall_7() { return cGridParserRuleCall_7; }

		//Table
		public RuleCall getTableParserRuleCall_8() { return cTableParserRuleCall_8; }

		//CrossTable
		public RuleCall getCrossTableParserRuleCall_9() { return cCrossTableParserRuleCall_9; }
	}

	public class BasicElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLabelParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTextParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDynamicTextParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cXDataParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cImageParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cChartParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//BasicElements:
		//	Label | Text | DynamicText | xData | Image | Chart;
		public ParserRule getRule() { return rule; }

		//Label | Text | DynamicText | xData | Image | Chart
		public Alternatives getAlternatives() { return cAlternatives; }

		//Label
		public RuleCall getLabelParserRuleCall_0() { return cLabelParserRuleCall_0; }

		//Text
		public RuleCall getTextParserRuleCall_1() { return cTextParserRuleCall_1; }

		//DynamicText
		public RuleCall getDynamicTextParserRuleCall_2() { return cDynamicTextParserRuleCall_2; }

		//xData
		public RuleCall getXDataParserRuleCall_3() { return cXDataParserRuleCall_3; }

		//Image
		public RuleCall getImageParserRuleCall_4() { return cImageParserRuleCall_4; }

		//Chart
		public RuleCall getChartParserRuleCall_5() { return cChartParserRuleCall_5; }
	}

	public class ComplexElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexElements");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cListParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGridParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCrossTableParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ComplexElements:
		//	List | Grid | Table | CrossTable;
		public ParserRule getRule() { return rule; }

		//List | Grid | Table | CrossTable
		public Alternatives getAlternatives() { return cAlternatives; }

		//List
		public RuleCall getListParserRuleCall_0() { return cListParserRuleCall_0; }

		//Grid
		public RuleCall getGridParserRuleCall_1() { return cGridParserRuleCall_1; }

		//Table
		public RuleCall getTableParserRuleCall_2() { return cTableParserRuleCall_2; }

		//CrossTable
		public RuleCall getCrossTableParserRuleCall_3() { return cCrossTableParserRuleCall_3; }
	}

	public class LabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Label");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Label:
		//	"label" name=ID content=STRING ("{" properties+=LabelProperties //		( ref ?= 'from' reference = [TextBoxProperty]
		//	//		| property = TextBoxProperty
		//	//		)
		//	"}")?;
		public ParserRule getRule() { return rule; }

		//"label" name=ID content=STRING ("{" properties+=LabelProperties //		( ref ?= 'from' reference = [TextBoxProperty]
		////		| property = TextBoxProperty
		////		)
		//"}")?
		public Group getGroup() { return cGroup; }

		//"label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//content=STRING
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }

		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_2_0() { return cContentSTRINGTerminalRuleCall_2_0; }

		//("{" properties+=LabelProperties //		( ref ?= 'from' reference = [TextBoxProperty]
		////		| property = TextBoxProperty
		////		)
		//"}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//properties+=LabelProperties
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_3_1_0() { return cPropertiesLabelPropertiesParserRuleCall_3_1_0; }

		////		( ref ?= 'from' reference = [TextBoxProperty]
		////		| property = TextBoxProperty
		////		)
		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentSTRINGTerminalRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Text:
		//	"text" name=ID content= // #TODO HTML
		//	STRING ("{" properties+=LabelProperties "}")?;
		public ParserRule getRule() { return rule; }

		//"text" name=ID content= // #TODO HTML
		//STRING ("{" properties+=LabelProperties "}")?
		public Group getGroup() { return cGroup; }

		//"text"
		public Keyword getTextKeyword_0() { return cTextKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//content= // #TODO HTML
		//STRING
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }

		//// #TODO HTML
		//STRING
		public RuleCall getContentSTRINGTerminalRuleCall_2_0() { return cContentSTRINGTerminalRuleCall_2_0; }

		//("{" properties+=LabelProperties "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//properties+=LabelProperties
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_3_1_0() { return cPropertiesLabelPropertiesParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class DynamicTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DynamicText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDynamicTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentJSExpressionParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//DynamicText:
		//	"dynamic-text" name=ID content=JSExpression ("{" properties+=LabelProperties "}")?;
		public ParserRule getRule() { return rule; }

		//"dynamic-text" name=ID content=JSExpression ("{" properties+=LabelProperties "}")?
		public Group getGroup() { return cGroup; }

		//"dynamic-text"
		public Keyword getDynamicTextKeyword_0() { return cDynamicTextKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//content=JSExpression
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }

		//JSExpression
		public RuleCall getContentJSExpressionParserRuleCall_2_0() { return cContentJSExpressionParserRuleCall_2_0; }

		//("{" properties+=LabelProperties "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//properties+=LabelProperties
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_3_1_0() { return cPropertiesLabelPropertiesParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class XDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "xData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cContentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentJSExpressionParserRuleCall_2_0 = (RuleCall)cContentAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//xData:
		//	"data" name=ID // content = [SelectColumnAlias|QualifiedName] // #TODO Add Data Expression to Text
		//	content=JSExpression // 	#TODO 'format-type'
		//	("{" properties+=LabelProperties "}")?;
		public ParserRule getRule() { return rule; }

		//"data" name=ID // content = [SelectColumnAlias|QualifiedName] // #TODO Add Data Expression to Text
		//content=JSExpression // 	#TODO 'format-type'
		//("{" properties+=LabelProperties "}")?
		public Group getGroup() { return cGroup; }

		//"data"
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//// content = [SelectColumnAlias|QualifiedName] // #TODO Add Data Expression to Text
		//content=JSExpression
		public Assignment getContentAssignment_2() { return cContentAssignment_2; }

		//JSExpression
		public RuleCall getContentJSExpressionParserRuleCall_2_0() { return cContentJSExpressionParserRuleCall_2_0; }

		//("{" properties+=LabelProperties "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//properties+=LabelProperties
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_3_1_0() { return cPropertiesLabelPropertiesParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class ImageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Image");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTypeAlternatives_3_0 = (Alternatives)cTypeAssignment_3.eContents().get(0);
		private final Keyword cTypeFileKeyword_3_0_0 = (Keyword)cTypeAlternatives_3_0.eContents().get(0);
		private final Keyword cTypeUrlKeyword_3_0_1 = (Keyword)cTypeAlternatives_3_0.eContents().get(1);
		private final Keyword cContentKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cContentAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cContentJSExpressionParserRuleCall_5_0 = (RuleCall)cContentAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPropertiesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_6_1_0 = (RuleCall)cPropertiesAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//Image:
		//	"image" name=ID "type" type=("file" //'embed' 'dynamic' #TODO Image type reference
		//	| "url") "content" content=JSExpression ("{" properties+=LabelProperties "}")?;
		public ParserRule getRule() { return rule; }

		//"image" name=ID "type" type=("file" //'embed' 'dynamic' #TODO Image type reference
		//| "url") "content" content=JSExpression ("{" properties+=LabelProperties "}")?
		public Group getGroup() { return cGroup; }

		//"image"
		public Keyword getImageKeyword_0() { return cImageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"type"
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }

		//type=("file" //'embed' 'dynamic' #TODO Image type reference
		//| "url")
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//"file" //'embed' 'dynamic' #TODO Image type reference
		//| "url"
		public Alternatives getTypeAlternatives_3_0() { return cTypeAlternatives_3_0; }

		//"file"
		public Keyword getTypeFileKeyword_3_0_0() { return cTypeFileKeyword_3_0_0; }

		//"url"
		public Keyword getTypeUrlKeyword_3_0_1() { return cTypeUrlKeyword_3_0_1; }

		//"content"
		public Keyword getContentKeyword_4() { return cContentKeyword_4; }

		//content=JSExpression
		public Assignment getContentAssignment_5() { return cContentAssignment_5; }

		//JSExpression
		public RuleCall getContentJSExpressionParserRuleCall_5_0() { return cContentJSExpressionParserRuleCall_5_0; }

		//("{" properties+=LabelProperties "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_0() { return cLeftCurlyBracketKeyword_6_0; }

		//properties+=LabelProperties
		public Assignment getPropertiesAssignment_6_1() { return cPropertiesAssignment_6_1; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_6_1_0() { return cPropertiesLabelPropertiesParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_2() { return cRightCurlyBracketKeyword_6_2; }
	}

	public class ChartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Chart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Assignment cTypeAssignment_2_0_0 = (Assignment)cGroup_2_0.eContents().get(0);
		private final RuleCall cTypeChartWithAxesTypeEnumRuleCall_2_0_0_0 = (RuleCall)cTypeAssignment_2_0_0.eContents().get(0);
		private final Assignment cSubtypeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cSubtypeChartSubTypeEnumRuleCall_2_0_1_0 = (RuleCall)cSubtypeAssignment_2_0_1.eContents().get(0);
		private final Assignment cTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cTypeChartWithoutAxesTypeEnumRuleCall_2_1_0 = (RuleCall)cTypeAssignment_2_1.eContents().get(0);
		private final Keyword cDatasetKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDatasetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDatasetDatasetCrossReference_4_0 = (CrossReference)cDatasetAssignment_4.eContents().get(0);
		private final RuleCall cDatasetDatasetQualifiedNameParserRuleCall_4_0_1 = (RuleCall)cDatasetDatasetCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cPropertiesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_5_1_0 = (RuleCall)cPropertiesAssignment_5_1.eContents().get(0);
		private final Assignment cTitleAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cTitleTitleParserRuleCall_5_2_0 = (RuleCall)cTitleAssignment_5_2.eContents().get(0);
		private final Assignment cLegendAssignment_5_3 = (Assignment)cGroup_5.eContents().get(3);
		private final RuleCall cLegendLegendParserRuleCall_5_3_0 = (RuleCall)cLegendAssignment_5_3.eContents().get(0);
		private final Assignment cPlotAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cPlotPlotParserRuleCall_5_4_0 = (RuleCall)cPlotAssignment_5_4.eContents().get(0);
		private final Alternatives cAlternatives_5_5 = (Alternatives)cGroup_5.eContents().get(5);
		private final Assignment cAxeAssignment_5_5_0 = (Assignment)cAlternatives_5_5.eContents().get(0);
		private final RuleCall cAxeNoAxeParserRuleCall_5_5_0_0 = (RuleCall)cAxeAssignment_5_5_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_5_5_1 = (UnorderedGroup)cAlternatives_5_5.eContents().get(1);
		private final Assignment cXaxeAssignment_5_5_1_0 = (Assignment)cUnorderedGroup_5_5_1.eContents().get(0);
		private final RuleCall cXaxeXAxeParserRuleCall_5_5_1_0_0 = (RuleCall)cXaxeAssignment_5_5_1_0.eContents().get(0);
		private final Assignment cYaxeAssignment_5_5_1_1 = (Assignment)cUnorderedGroup_5_5_1.eContents().get(1);
		private final RuleCall cYaxeYAxeParserRuleCall_5_5_1_1_0 = (RuleCall)cYaxeAssignment_5_5_1_1.eContents().get(0);
		private final Assignment cColorpaletteAssignment_5_6 = (Assignment)cGroup_5.eContents().get(6);
		private final RuleCall cColorpaletteColorPaletteParserRuleCall_5_6_0 = (RuleCall)cColorpaletteAssignment_5_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_7 = (Keyword)cGroup_5.eContents().get(7);
		
		///////////////////////////////////////////////////
		//Chart:
		//	"chart" name=ID (type=ChartWithAxesType subtype=ChartSubType | type=ChartWithoutAxesType) "dataset"
		//	dataset=[Dataset|QualifiedName] ("{" properties+=LabelProperties title=Title? //#TODO Chart title properties: text-style color bg-color font v-h-alignment visibility
		//	legend=Legend? plot=Plot? (axe=NoAxe | xaxe=XAxe & yaxe=YAxe) colorpalette=ColorPalette? //		( emptymessage = )?
		//	"}")?;
		public ParserRule getRule() { return rule; }

		//"chart" name=ID (type=ChartWithAxesType subtype=ChartSubType | type=ChartWithoutAxesType) "dataset"
		//dataset=[Dataset|QualifiedName] ("{" properties+=LabelProperties title=Title? //#TODO Chart title properties: text-style color bg-color font v-h-alignment visibility
		//legend=Legend? plot=Plot? (axe=NoAxe | xaxe=XAxe & yaxe=YAxe) colorpalette=ColorPalette? //		( emptymessage = )?
		//"}")?
		public Group getGroup() { return cGroup; }

		//"chart"
		public Keyword getChartKeyword_0() { return cChartKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//type=ChartWithAxesType subtype=ChartSubType | type=ChartWithoutAxesType
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//type=ChartWithAxesType subtype=ChartSubType
		public Group getGroup_2_0() { return cGroup_2_0; }

		//type=ChartWithAxesType
		public Assignment getTypeAssignment_2_0_0() { return cTypeAssignment_2_0_0; }

		//ChartWithAxesType
		public RuleCall getTypeChartWithAxesTypeEnumRuleCall_2_0_0_0() { return cTypeChartWithAxesTypeEnumRuleCall_2_0_0_0; }

		//subtype=ChartSubType
		public Assignment getSubtypeAssignment_2_0_1() { return cSubtypeAssignment_2_0_1; }

		//ChartSubType
		public RuleCall getSubtypeChartSubTypeEnumRuleCall_2_0_1_0() { return cSubtypeChartSubTypeEnumRuleCall_2_0_1_0; }

		//type=ChartWithoutAxesType
		public Assignment getTypeAssignment_2_1() { return cTypeAssignment_2_1; }

		//ChartWithoutAxesType
		public RuleCall getTypeChartWithoutAxesTypeEnumRuleCall_2_1_0() { return cTypeChartWithoutAxesTypeEnumRuleCall_2_1_0; }

		//"dataset"
		public Keyword getDatasetKeyword_3() { return cDatasetKeyword_3; }

		//dataset=[Dataset|QualifiedName]
		public Assignment getDatasetAssignment_4() { return cDatasetAssignment_4; }

		//[Dataset|QualifiedName]
		public CrossReference getDatasetDatasetCrossReference_4_0() { return cDatasetDatasetCrossReference_4_0; }

		//QualifiedName
		public RuleCall getDatasetDatasetQualifiedNameParserRuleCall_4_0_1() { return cDatasetDatasetQualifiedNameParserRuleCall_4_0_1; }

		//("{" properties+=LabelProperties title=Title? //#TODO Chart title properties: text-style color bg-color font v-h-alignment visibility
		//legend=Legend? plot=Plot? (axe=NoAxe | xaxe=XAxe & yaxe=YAxe) colorpalette=ColorPalette? //		( emptymessage = )?
		//"}")?
		public Group getGroup_5() { return cGroup_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_0() { return cLeftCurlyBracketKeyword_5_0; }

		//properties+=LabelProperties
		public Assignment getPropertiesAssignment_5_1() { return cPropertiesAssignment_5_1; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_5_1_0() { return cPropertiesLabelPropertiesParserRuleCall_5_1_0; }

		//title=Title?
		public Assignment getTitleAssignment_5_2() { return cTitleAssignment_5_2; }

		//Title
		public RuleCall getTitleTitleParserRuleCall_5_2_0() { return cTitleTitleParserRuleCall_5_2_0; }

		//legend=Legend?
		public Assignment getLegendAssignment_5_3() { return cLegendAssignment_5_3; }

		//Legend
		public RuleCall getLegendLegendParserRuleCall_5_3_0() { return cLegendLegendParserRuleCall_5_3_0; }

		//plot=Plot?
		public Assignment getPlotAssignment_5_4() { return cPlotAssignment_5_4; }

		//Plot
		public RuleCall getPlotPlotParserRuleCall_5_4_0() { return cPlotPlotParserRuleCall_5_4_0; }

		//axe=NoAxe | xaxe=XAxe & yaxe=YAxe
		public Alternatives getAlternatives_5_5() { return cAlternatives_5_5; }

		//axe=NoAxe
		public Assignment getAxeAssignment_5_5_0() { return cAxeAssignment_5_5_0; }

		//NoAxe
		public RuleCall getAxeNoAxeParserRuleCall_5_5_0_0() { return cAxeNoAxeParserRuleCall_5_5_0_0; }

		//xaxe=XAxe & yaxe=YAxe
		public UnorderedGroup getUnorderedGroup_5_5_1() { return cUnorderedGroup_5_5_1; }

		//xaxe=XAxe
		public Assignment getXaxeAssignment_5_5_1_0() { return cXaxeAssignment_5_5_1_0; }

		//XAxe
		public RuleCall getXaxeXAxeParserRuleCall_5_5_1_0_0() { return cXaxeXAxeParserRuleCall_5_5_1_0_0; }

		//yaxe=YAxe
		public Assignment getYaxeAssignment_5_5_1_1() { return cYaxeAssignment_5_5_1_1; }

		//YAxe
		public RuleCall getYaxeYAxeParserRuleCall_5_5_1_1_0() { return cYaxeYAxeParserRuleCall_5_5_1_1_0; }

		//colorpalette=ColorPalette?
		public Assignment getColorpaletteAssignment_5_6() { return cColorpaletteAssignment_5_6; }

		//ColorPalette
		public RuleCall getColorpaletteColorPaletteParserRuleCall_5_6_0() { return cColorpaletteColorPaletteParserRuleCall_5_6_0; }

		////		( emptymessage = )?
		//"}"
		public Keyword getRightCurlyBracketKeyword_5_7() { return cRightCurlyBracketKeyword_5_7; }
	}

	public class LegendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Legend");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cLegendKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cPlaceAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cPlacePlaceParserRuleCall_0_1_0 = (RuleCall)cPlaceAssignment_0_1.eContents().get(0);
		private final Assignment cOrientationAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOrientationOrientationTypeEnumRuleCall_0_2_0 = (RuleCall)cOrientationAssignment_0_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cTitleAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cTitleTitleParserRuleCall_0_4_0 = (RuleCall)cTitleAssignment_0_4.eContents().get(0);
		private final Assignment cVisibilityAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cVisibilityLegendVisibilityParserRuleCall_1_0 = (RuleCall)cVisibilityAssignment_1.eContents().get(0);
		private final Keyword cDirectionKeyword_2 = (Keyword)cUnorderedGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cShowValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//Legend:
		//	"legend" place=Place orientation=OrientationType "{" title=Title? & visibility=LegendVisibility? & "direction"? &
		//	"show value"? "}";
		public ParserRule getRule() { return rule; }

		//"legend" place=Place orientation=OrientationType "{" title=Title? & visibility=LegendVisibility? & "direction"? &
		//"show value"? "}"
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"legend" place=Place orientation=OrientationType "{" title=Title?
		public Group getGroup_0() { return cGroup_0; }

		//"legend"
		public Keyword getLegendKeyword_0_0() { return cLegendKeyword_0_0; }

		//place=Place
		public Assignment getPlaceAssignment_0_1() { return cPlaceAssignment_0_1; }

		//Place
		public RuleCall getPlacePlaceParserRuleCall_0_1_0() { return cPlacePlaceParserRuleCall_0_1_0; }

		//orientation=OrientationType
		public Assignment getOrientationAssignment_0_2() { return cOrientationAssignment_0_2; }

		//OrientationType
		public RuleCall getOrientationOrientationTypeEnumRuleCall_0_2_0() { return cOrientationOrientationTypeEnumRuleCall_0_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_3() { return cLeftCurlyBracketKeyword_0_3; }

		//title=Title?
		public Assignment getTitleAssignment_0_4() { return cTitleAssignment_0_4; }

		//Title
		public RuleCall getTitleTitleParserRuleCall_0_4_0() { return cTitleTitleParserRuleCall_0_4_0; }

		//visibility=LegendVisibility?
		public Assignment getVisibilityAssignment_1() { return cVisibilityAssignment_1; }

		//LegendVisibility
		public RuleCall getVisibilityLegendVisibilityParserRuleCall_1_0() { return cVisibilityLegendVisibilityParserRuleCall_1_0; }

		//"direction"?
		public Keyword getDirectionKeyword_2() { return cDirectionKeyword_2; }

		//"show value"? "}"
		public Group getGroup_3() { return cGroup_3; }

		//"show value"?
		public Keyword getShowValueKeyword_3_0() { return cShowValueKeyword_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_1() { return cRightCurlyBracketKeyword_3_1; }
	}

	public class PlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Plot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Plot:
		//	"plot" "{" "}";
		public ParserRule getRule() { return rule; }

		//"plot" "{" "}"
		public Group getGroup() { return cGroup; }

		//"plot"
		public Keyword getPlotKeyword_0() { return cPlotKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class XAxeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XAxe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cXKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueAxeParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//XAxe:
		//	"x-" value=Axe;
		public ParserRule getRule() { return rule; }

		//"x-" value=Axe
		public Group getGroup() { return cGroup; }

		//"x-"
		public Keyword getXKeyword_0() { return cXKeyword_0; }

		//value=Axe
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Axe
		public RuleCall getValueAxeParserRuleCall_1_0() { return cValueAxeParserRuleCall_1_0; }
	}

	public class YAxeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "YAxe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueAxeParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//YAxe:
		//	"y-" value=Axe;
		public ParserRule getRule() { return rule; }

		//"y-" value=Axe
		public Group getGroup() { return cGroup; }

		//"y-"
		public Keyword getYKeyword_0() { return cYKeyword_0; }

		//value=Axe
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Axe
		public RuleCall getValueAxeParserRuleCall_1_0() { return cValueAxeParserRuleCall_1_0; }
	}

	public class AxeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Axe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAxeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final Keyword cTypeLinearKeyword_1_0_0 = (Keyword)cTypeAlternatives_1_0.eContents().get(0);
		private final Keyword cTypeTextKeyword_1_0_1 = (Keyword)cTypeAlternatives_1_0.eContents().get(1);
		private final Keyword cTypeLogarithmicKeyword_1_0_2 = (Keyword)cTypeAlternatives_1_0.eContents().get(2);
		private final Keyword cTypeDateTimeKeyword_1_0_3 = (Keyword)cTypeAlternatives_1_0.eContents().get(3);
		private final Assignment cDataAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataJSExpressionParserRuleCall_2_0 = (RuleCall)cDataAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGroupingByKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGroupingbyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGroupingbyJSExpressionParserRuleCall_3_1_0 = (RuleCall)cGroupingbyAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final UnorderedGroup cUnorderedGroup_5 = (UnorderedGroup)cGroup.eContents().get(5);
		private final Assignment cTitleAssignment_5_0 = (Assignment)cUnorderedGroup_5.eContents().get(0);
		private final RuleCall cTitleTitleParserRuleCall_5_0_0 = (RuleCall)cTitleAssignment_5_0.eContents().get(0);
		private final Assignment cLineAssignment_5_1 = (Assignment)cUnorderedGroup_5.eContents().get(1);
		private final RuleCall cLineLineParserRuleCall_5_1_0 = (RuleCall)cLineAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cUnorderedGroup_5.eContents().get(2);
		private final Keyword cMajorKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cMajorgridAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cMajorgridChartGridParserRuleCall_5_2_1_0 = (RuleCall)cMajorgridAssignment_5_2_1.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cUnorderedGroup_5.eContents().get(3);
		private final Keyword cMinorKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cMinorgridAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cMinorgridChartGridParserRuleCall_5_3_1_0 = (RuleCall)cMinorgridAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Axe:
		//	"axe" type=("linear" | "text" | "logarithmic" | "date-time") data=JSExpression ("grouping by"
		//	groupingby=JSExpression)? "{" (title=Title? & line=Line? & ("major-" majorgrid=ChartGrid)? & ("minor-"
		//	minorgrid=ChartGrid)?) "}";
		public ParserRule getRule() { return rule; }

		//"axe" type=("linear" | "text" | "logarithmic" | "date-time") data=JSExpression ("grouping by" groupingby=JSExpression)?
		//"{" (title=Title? & line=Line? & ("major-" majorgrid=ChartGrid)? & ("minor-" minorgrid=ChartGrid)?) "}"
		public Group getGroup() { return cGroup; }

		//"axe"
		public Keyword getAxeKeyword_0() { return cAxeKeyword_0; }

		//type=("linear" | "text" | "logarithmic" | "date-time")
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//"linear" | "text" | "logarithmic" | "date-time"
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }

		//"linear"
		public Keyword getTypeLinearKeyword_1_0_0() { return cTypeLinearKeyword_1_0_0; }

		//"text"
		public Keyword getTypeTextKeyword_1_0_1() { return cTypeTextKeyword_1_0_1; }

		//"logarithmic"
		public Keyword getTypeLogarithmicKeyword_1_0_2() { return cTypeLogarithmicKeyword_1_0_2; }

		//"date-time"
		public Keyword getTypeDateTimeKeyword_1_0_3() { return cTypeDateTimeKeyword_1_0_3; }

		//data=JSExpression
		public Assignment getDataAssignment_2() { return cDataAssignment_2; }

		//JSExpression
		public RuleCall getDataJSExpressionParserRuleCall_2_0() { return cDataJSExpressionParserRuleCall_2_0; }

		//("grouping by" groupingby=JSExpression)?
		public Group getGroup_3() { return cGroup_3; }

		//"grouping by"
		public Keyword getGroupingByKeyword_3_0() { return cGroupingByKeyword_3_0; }

		//groupingby=JSExpression
		public Assignment getGroupingbyAssignment_3_1() { return cGroupingbyAssignment_3_1; }

		//JSExpression
		public RuleCall getGroupingbyJSExpressionParserRuleCall_3_1_0() { return cGroupingbyJSExpressionParserRuleCall_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//title=Title? & line=Line? & ("major-" majorgrid=ChartGrid)? & ("minor-" minorgrid=ChartGrid)?
		public UnorderedGroup getUnorderedGroup_5() { return cUnorderedGroup_5; }

		//title=Title?
		public Assignment getTitleAssignment_5_0() { return cTitleAssignment_5_0; }

		//Title
		public RuleCall getTitleTitleParserRuleCall_5_0_0() { return cTitleTitleParserRuleCall_5_0_0; }

		//line=Line?
		public Assignment getLineAssignment_5_1() { return cLineAssignment_5_1; }

		//Line
		public RuleCall getLineLineParserRuleCall_5_1_0() { return cLineLineParserRuleCall_5_1_0; }

		//("major-" majorgrid=ChartGrid)?
		public Group getGroup_5_2() { return cGroup_5_2; }

		//"major-"
		public Keyword getMajorKeyword_5_2_0() { return cMajorKeyword_5_2_0; }

		//majorgrid=ChartGrid
		public Assignment getMajorgridAssignment_5_2_1() { return cMajorgridAssignment_5_2_1; }

		//ChartGrid
		public RuleCall getMajorgridChartGridParserRuleCall_5_2_1_0() { return cMajorgridChartGridParserRuleCall_5_2_1_0; }

		//("minor-" minorgrid=ChartGrid)?
		public Group getGroup_5_3() { return cGroup_5_3; }

		//"minor-"
		public Keyword getMinorKeyword_5_3_0() { return cMinorKeyword_5_3_0; }

		//minorgrid=ChartGrid
		public Assignment getMinorgridAssignment_5_3_1() { return cMinorgridAssignment_5_3_1; }

		//ChartGrid
		public RuleCall getMinorgridChartGridParserRuleCall_5_3_1_0() { return cMinorgridChartGridParserRuleCall_5_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class NoAxeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoAxe");
		private final Keyword cNoAxeKeyword = (Keyword)rule.eContents().get(1);
		
		//NoAxe:
		//	"no axe";
		public ParserRule getRule() { return rule; }

		//"no axe"
		public Keyword getNoAxeKeyword() { return cNoAxeKeyword; }
	}

	public class LineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueBorderLineParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Line:
		//	"line" "{" value=BorderLine "}";
		public ParserRule getRule() { return rule; }

		//"line" "{" value=BorderLine "}"
		public Group getGroup() { return cGroup; }

		//"line"
		public Keyword getLineKeyword_0() { return cLineKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//value=BorderLine
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//BorderLine
		public RuleCall getValueBorderLineParserRuleCall_2_0() { return cValueBorderLineParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ChartGridElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChartGrid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGridKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cScaleKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cScaleAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cScaleINTTerminalRuleCall_2_0_1_0 = (RuleCall)cScaleAssignment_2_0_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cValueBorderLineParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Assignment cTickAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cTickTickParserRuleCall_2_2_0 = (RuleCall)cTickAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ChartGrid:
		//	"grid" "{" ("scale" scale=INT & value=BorderLine & tick=Tick) "}";
		public ParserRule getRule() { return rule; }

		//"grid" "{" ("scale" scale=INT & value=BorderLine & tick=Tick) "}"
		public Group getGroup() { return cGroup; }

		//"grid"
		public Keyword getGridKeyword_0() { return cGridKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"scale" scale=INT & value=BorderLine & tick=Tick
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//"scale" scale=INT
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"scale"
		public Keyword getScaleKeyword_2_0_0() { return cScaleKeyword_2_0_0; }

		//scale=INT
		public Assignment getScaleAssignment_2_0_1() { return cScaleAssignment_2_0_1; }

		//INT
		public RuleCall getScaleINTTerminalRuleCall_2_0_1_0() { return cScaleINTTerminalRuleCall_2_0_1_0; }

		//value=BorderLine
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//BorderLine
		public RuleCall getValueBorderLineParserRuleCall_2_1_0() { return cValueBorderLineParserRuleCall_2_1_0; }

		//tick=Tick
		public Assignment getTickAssignment_2_2() { return cTickAssignment_2_2; }

		//Tick
		public RuleCall getTickTickParserRuleCall_2_2_0() { return cTickTickParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class TickElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tick");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPlaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPlaceAlternatives_1_0 = (Alternatives)cPlaceAssignment_1.eContents().get(0);
		private final Keyword cPlaceAboveKeyword_1_0_0 = (Keyword)cPlaceAlternatives_1_0.eContents().get(0);
		private final Keyword cPlaceAcrossKeyword_1_0_1 = (Keyword)cPlaceAlternatives_1_0.eContents().get(1);
		private final Keyword cPlaceBelowKeyword_1_0_2 = (Keyword)cPlaceAlternatives_1_0.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBorderLineParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Tick:
		//	"tick" place=("above" | "across" | "below") ("{" value=BorderLine "}")?;
		public ParserRule getRule() { return rule; }

		//"tick" place=("above" | "across" | "below") ("{" value=BorderLine "}")?
		public Group getGroup() { return cGroup; }

		//"tick"
		public Keyword getTickKeyword_0() { return cTickKeyword_0; }

		//place=("above" | "across" | "below")
		public Assignment getPlaceAssignment_1() { return cPlaceAssignment_1; }

		//"above" | "across" | "below"
		public Alternatives getPlaceAlternatives_1_0() { return cPlaceAlternatives_1_0; }

		//"above"
		public Keyword getPlaceAboveKeyword_1_0_0() { return cPlaceAboveKeyword_1_0_0; }

		//"across"
		public Keyword getPlaceAcrossKeyword_1_0_1() { return cPlaceAcrossKeyword_1_0_1; }

		//"below"
		public Keyword getPlaceBelowKeyword_1_0_2() { return cPlaceBelowKeyword_1_0_2; }

		//("{" value=BorderLine "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//value=BorderLine
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//BorderLine
		public RuleCall getValueBorderLineParserRuleCall_2_1_0() { return cValueBorderLineParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class ColorPaletteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColorPalette");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorPaletteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Alternatives cValueAlternatives_3_0_0 = (Alternatives)cValueAssignment_3_0.eContents().get(0);
		private final RuleCall cValueStringColorParserRuleCall_3_0_0_0 = (RuleCall)cValueAlternatives_3_0_0.eContents().get(0);
		private final RuleCall cValueHexColorParserRuleCall_3_0_0_1 = (RuleCall)cValueAlternatives_3_0_0.eContents().get(1);
		private final RuleCall cValueRgbColorParserRuleCall_3_0_0_2 = (RuleCall)cValueAlternatives_3_0_0.eContents().get(2);
		private final Assignment cLinktoAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cLinktoColorPaletteCrossReference_3_1_0 = (CrossReference)cLinktoAssignment_3_1.eContents().get(0);
		private final RuleCall cLinktoColorPaletteIDTerminalRuleCall_3_1_0_1 = (RuleCall)cLinktoColorPaletteCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ColorPalette:
		//	"color-palette" name=ID? "{" (value+=(StringColor | HexColor | RgbColor)+ | linkto=[ColorPalette]) "}";
		public ParserRule getRule() { return rule; }

		//"color-palette" name=ID? "{" (value+=(StringColor | HexColor | RgbColor)+ | linkto=[ColorPalette]) "}"
		public Group getGroup() { return cGroup; }

		//"color-palette"
		public Keyword getColorPaletteKeyword_0() { return cColorPaletteKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//value+=(StringColor | HexColor | RgbColor)+ | linkto=[ColorPalette]
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//value+=(StringColor | HexColor | RgbColor)+
		public Assignment getValueAssignment_3_0() { return cValueAssignment_3_0; }

		//StringColor | HexColor | RgbColor
		public Alternatives getValueAlternatives_3_0_0() { return cValueAlternatives_3_0_0; }

		//StringColor
		public RuleCall getValueStringColorParserRuleCall_3_0_0_0() { return cValueStringColorParserRuleCall_3_0_0_0; }

		//HexColor
		public RuleCall getValueHexColorParserRuleCall_3_0_0_1() { return cValueHexColorParserRuleCall_3_0_0_1; }

		//RgbColor
		public RuleCall getValueRgbColorParserRuleCall_3_0_0_2() { return cValueRgbColorParserRuleCall_3_0_0_2; }

		//linkto=[ColorPalette]
		public Assignment getLinktoAssignment_3_1() { return cLinktoAssignment_3_1; }

		//[ColorPalette]
		public CrossReference getLinktoColorPaletteCrossReference_3_1_0() { return cLinktoColorPaletteCrossReference_3_1_0; }

		//ID
		public RuleCall getLinktoColorPaletteIDTerminalRuleCall_3_1_0_1() { return cLinktoColorPaletteIDTerminalRuleCall_3_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PlaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Place");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cPositionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cPositionAlternatives_0_0_0 = (Alternatives)cPositionAssignment_0_0.eContents().get(0);
		private final Keyword cPositionLeftKeyword_0_0_0_0 = (Keyword)cPositionAlternatives_0_0_0.eContents().get(0);
		private final Keyword cPositionRightKeyword_0_0_0_1 = (Keyword)cPositionAlternatives_0_0_0.eContents().get(1);
		private final Assignment cAnchorAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Alternatives cAnchorAlternatives_0_1_0 = (Alternatives)cAnchorAssignment_0_1.eContents().get(0);
		private final Keyword cAnchorTopKeyword_0_1_0_0 = (Keyword)cAnchorAlternatives_0_1_0.eContents().get(0);
		private final Keyword cAnchorMiddleKeyword_0_1_0_1 = (Keyword)cAnchorAlternatives_0_1_0.eContents().get(1);
		private final Keyword cAnchorBottomKeyword_0_1_0_2 = (Keyword)cAnchorAlternatives_0_1_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cPositionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Alternatives cPositionAlternatives_1_0_0 = (Alternatives)cPositionAssignment_1_0.eContents().get(0);
		private final Keyword cPositionAboveKeyword_1_0_0_0 = (Keyword)cPositionAlternatives_1_0_0.eContents().get(0);
		private final Keyword cPositionBelowKeyword_1_0_0_1 = (Keyword)cPositionAlternatives_1_0_0.eContents().get(1);
		private final Assignment cAnchorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cAnchorAlternatives_1_1_0 = (Alternatives)cAnchorAssignment_1_1.eContents().get(0);
		private final Keyword cAnchorLeftKeyword_1_1_0_0 = (Keyword)cAnchorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cAnchorMiddleKeyword_1_1_0_1 = (Keyword)cAnchorAlternatives_1_1_0.eContents().get(1);
		private final Keyword cAnchorRightKeyword_1_1_0_2 = (Keyword)cAnchorAlternatives_1_1_0.eContents().get(2);
		
		//Place:
		//	position=("left" | "right") anchor=("top" | "middle" | "bottom") | position=("above" | "below") anchor=("left" |
		//	"middle" | "right");
		public ParserRule getRule() { return rule; }

		//position=("left" | "right") anchor=("top" | "middle" | "bottom") | position=("above" | "below") anchor=("left" |
		//"middle" | "right")
		public Alternatives getAlternatives() { return cAlternatives; }

		//position=("left" | "right") anchor=("top" | "middle" | "bottom")
		public Group getGroup_0() { return cGroup_0; }

		//position=("left" | "right")
		public Assignment getPositionAssignment_0_0() { return cPositionAssignment_0_0; }

		//"left" | "right"
		public Alternatives getPositionAlternatives_0_0_0() { return cPositionAlternatives_0_0_0; }

		//"left"
		public Keyword getPositionLeftKeyword_0_0_0_0() { return cPositionLeftKeyword_0_0_0_0; }

		//"right"
		public Keyword getPositionRightKeyword_0_0_0_1() { return cPositionRightKeyword_0_0_0_1; }

		//anchor=("top" | "middle" | "bottom")
		public Assignment getAnchorAssignment_0_1() { return cAnchorAssignment_0_1; }

		//"top" | "middle" | "bottom"
		public Alternatives getAnchorAlternatives_0_1_0() { return cAnchorAlternatives_0_1_0; }

		//"top"
		public Keyword getAnchorTopKeyword_0_1_0_0() { return cAnchorTopKeyword_0_1_0_0; }

		//"middle"
		public Keyword getAnchorMiddleKeyword_0_1_0_1() { return cAnchorMiddleKeyword_0_1_0_1; }

		//"bottom"
		public Keyword getAnchorBottomKeyword_0_1_0_2() { return cAnchorBottomKeyword_0_1_0_2; }

		//position=("above" | "below") anchor=("left" | "middle" | "right")
		public Group getGroup_1() { return cGroup_1; }

		//position=("above" | "below")
		public Assignment getPositionAssignment_1_0() { return cPositionAssignment_1_0; }

		//"above" | "below"
		public Alternatives getPositionAlternatives_1_0_0() { return cPositionAlternatives_1_0_0; }

		//"above"
		public Keyword getPositionAboveKeyword_1_0_0_0() { return cPositionAboveKeyword_1_0_0_0; }

		//"below"
		public Keyword getPositionBelowKeyword_1_0_0_1() { return cPositionBelowKeyword_1_0_0_1; }

		//anchor=("left" | "middle" | "right")
		public Assignment getAnchorAssignment_1_1() { return cAnchorAssignment_1_1; }

		//"left" | "middle" | "right"
		public Alternatives getAnchorAlternatives_1_1_0() { return cAnchorAlternatives_1_1_0; }

		//"left"
		public Keyword getAnchorLeftKeyword_1_1_0_0() { return cAnchorLeftKeyword_1_1_0_0; }

		//"middle"
		public Keyword getAnchorMiddleKeyword_1_1_0_1() { return cAnchorMiddleKeyword_1_1_0_1; }

		//"right"
		public Keyword getAnchorRightKeyword_1_1_0_2() { return cAnchorRightKeyword_1_1_0_2; }
	}

	public class TitleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Title");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTitleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cPlaceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cPlaceAlternatives_2_0 = (Alternatives)cPlaceAssignment_2.eContents().get(0);
		private final Keyword cPlaceLeftKeyword_2_0_0 = (Keyword)cPlaceAlternatives_2_0.eContents().get(0);
		private final Keyword cPlaceRightKeyword_2_0_1 = (Keyword)cPlaceAlternatives_2_0.eContents().get(1);
		private final Keyword cPlaceAboveKeyword_2_0_2 = (Keyword)cPlaceAlternatives_2_0.eContents().get(2);
		private final Keyword cPlaceBelowKeyword_2_0_3 = (Keyword)cPlaceAlternatives_2_0.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesChartElementPropertiesParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		////	('{' properties += LabelProperties '}')?
		//Title:
		//	"title" value=STRING place=("left" | "right" | "above" | "below") ("{" properties=ChartElementProperties "}")?;
		public ParserRule getRule() { return rule; }

		//"title" value=STRING place=("left" | "right" | "above" | "below") ("{" properties=ChartElementProperties "}")?
		public Group getGroup() { return cGroup; }

		//"title"
		public Keyword getTitleKeyword_0() { return cTitleKeyword_0; }

		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }

		//place=("left" | "right" | "above" | "below")
		public Assignment getPlaceAssignment_2() { return cPlaceAssignment_2; }

		//"left" | "right" | "above" | "below"
		public Alternatives getPlaceAlternatives_2_0() { return cPlaceAlternatives_2_0; }

		//"left"
		public Keyword getPlaceLeftKeyword_2_0_0() { return cPlaceLeftKeyword_2_0_0; }

		//"right"
		public Keyword getPlaceRightKeyword_2_0_1() { return cPlaceRightKeyword_2_0_1; }

		//"above"
		public Keyword getPlaceAboveKeyword_2_0_2() { return cPlaceAboveKeyword_2_0_2; }

		//"below"
		public Keyword getPlaceBelowKeyword_2_0_3() { return cPlaceBelowKeyword_2_0_3; }

		//("{" properties=ChartElementProperties "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//properties=ChartElementProperties
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//ChartElementProperties
		public RuleCall getPropertiesChartElementPropertiesParserRuleCall_3_1_0() { return cPropertiesChartElementPropertiesParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class ChartElementPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChartElementProperties");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cPaddingAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cPaddingPaddingParserRuleCall_0_0 = (RuleCall)cPaddingAssignment_0.eContents().get(0);
		private final Assignment cBorderAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cBorderBorderParserRuleCall_1_0 = (RuleCall)cBorderAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cVisibilityVisibilityParserRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		private final Assignment cFontAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cFontFontParserRuleCall_3_0 = (RuleCall)cFontAssignment_3.eContents().get(0);
		private final Assignment cFontSizeAssignment_4 = (Assignment)cUnorderedGroup.eContents().get(4);
		private final RuleCall cFontSizeFontSizeParserRuleCall_4_0 = (RuleCall)cFontSizeAssignment_4.eContents().get(0);
		private final Assignment cColorAssignment_5 = (Assignment)cUnorderedGroup.eContents().get(5);
		private final RuleCall cColorColorParserRuleCall_5_0 = (RuleCall)cColorAssignment_5.eContents().get(0);
		private final Assignment cBackgroundColorAssignment_6 = (Assignment)cUnorderedGroup.eContents().get(6);
		private final RuleCall cBackgroundColorBackgroundColorParserRuleCall_6_0 = (RuleCall)cBackgroundColorAssignment_6.eContents().get(0);
		private final Assignment cTextStyleAssignment_7 = (Assignment)cUnorderedGroup.eContents().get(7);
		private final RuleCall cTextStyleTextStyleParserRuleCall_7_0 = (RuleCall)cTextStyleAssignment_7.eContents().get(0);
		private final Assignment cHAlignAssignment_8 = (Assignment)cUnorderedGroup.eContents().get(8);
		private final RuleCall cHAlignHAlignmentParserRuleCall_8_0 = (RuleCall)cHAlignAssignment_8.eContents().get(0);
		private final Assignment cVAlignAssignment_9 = (Assignment)cUnorderedGroup.eContents().get(9);
		private final RuleCall cVAlignVAlignmentParserRuleCall_9_0 = (RuleCall)cVAlignAssignment_9.eContents().get(0);
		private final Assignment cWhiteSpaceAssignment_10 = (Assignment)cUnorderedGroup.eContents().get(10);
		private final RuleCall cWhiteSpaceWhitespaceParserRuleCall_10_0 = (RuleCall)cWhiteSpaceAssignment_10.eContents().get(0);
		private final Assignment cStyleAssignment_11 = (Assignment)cUnorderedGroup.eContents().get(11);
		private final RuleCall cStyleStyleRefParserRuleCall_11_0 = (RuleCall)cStyleAssignment_11.eContents().get(0);
		private final Assignment cDisplayAssignment_12 = (Assignment)cUnorderedGroup.eContents().get(12);
		private final RuleCall cDisplayDisplayParserRuleCall_12_0 = (RuleCall)cDisplayAssignment_12.eContents().get(0);
		
		//ChartElementProperties:
		//	padding=Padding? & border=Border? & visibility=Visibility? & font=Font? & fontSize=FontSize? & color=Color? &
		//	backgroundColor=BackgroundColor? & textStyle=TextStyle? & hAlign=HAlignment? & vAlign=VAlignment? &
		//	whiteSpace=Whitespace? & style=StyleRef? & display=Display?;
		public ParserRule getRule() { return rule; }

		//padding=Padding? & border=Border? & visibility=Visibility? & font=Font? & fontSize=FontSize? & color=Color? &
		//backgroundColor=BackgroundColor? & textStyle=TextStyle? & hAlign=HAlignment? & vAlign=VAlignment? &
		//whiteSpace=Whitespace? & style=StyleRef? & display=Display?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//padding=Padding?
		public Assignment getPaddingAssignment_0() { return cPaddingAssignment_0; }

		//Padding
		public RuleCall getPaddingPaddingParserRuleCall_0_0() { return cPaddingPaddingParserRuleCall_0_0; }

		//border=Border?
		public Assignment getBorderAssignment_1() { return cBorderAssignment_1; }

		//Border
		public RuleCall getBorderBorderParserRuleCall_1_0() { return cBorderBorderParserRuleCall_1_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }

		//Visibility
		public RuleCall getVisibilityVisibilityParserRuleCall_2_0() { return cVisibilityVisibilityParserRuleCall_2_0; }

		//font=Font?
		public Assignment getFontAssignment_3() { return cFontAssignment_3; }

		//Font
		public RuleCall getFontFontParserRuleCall_3_0() { return cFontFontParserRuleCall_3_0; }

		//fontSize=FontSize?
		public Assignment getFontSizeAssignment_4() { return cFontSizeAssignment_4; }

		//FontSize
		public RuleCall getFontSizeFontSizeParserRuleCall_4_0() { return cFontSizeFontSizeParserRuleCall_4_0; }

		//color=Color?
		public Assignment getColorAssignment_5() { return cColorAssignment_5; }

		//Color
		public RuleCall getColorColorParserRuleCall_5_0() { return cColorColorParserRuleCall_5_0; }

		//backgroundColor=BackgroundColor?
		public Assignment getBackgroundColorAssignment_6() { return cBackgroundColorAssignment_6; }

		//BackgroundColor
		public RuleCall getBackgroundColorBackgroundColorParserRuleCall_6_0() { return cBackgroundColorBackgroundColorParserRuleCall_6_0; }

		//textStyle=TextStyle?
		public Assignment getTextStyleAssignment_7() { return cTextStyleAssignment_7; }

		//TextStyle
		public RuleCall getTextStyleTextStyleParserRuleCall_7_0() { return cTextStyleTextStyleParserRuleCall_7_0; }

		//hAlign=HAlignment?
		public Assignment getHAlignAssignment_8() { return cHAlignAssignment_8; }

		//HAlignment
		public RuleCall getHAlignHAlignmentParserRuleCall_8_0() { return cHAlignHAlignmentParserRuleCall_8_0; }

		//vAlign=VAlignment?
		public Assignment getVAlignAssignment_9() { return cVAlignAssignment_9; }

		//VAlignment
		public RuleCall getVAlignVAlignmentParserRuleCall_9_0() { return cVAlignVAlignmentParserRuleCall_9_0; }

		//whiteSpace=Whitespace?
		public Assignment getWhiteSpaceAssignment_10() { return cWhiteSpaceAssignment_10; }

		//Whitespace
		public RuleCall getWhiteSpaceWhitespaceParserRuleCall_10_0() { return cWhiteSpaceWhitespaceParserRuleCall_10_0; }

		//style=StyleRef?
		public Assignment getStyleAssignment_11() { return cStyleAssignment_11; }

		//StyleRef
		public RuleCall getStyleStyleRefParserRuleCall_11_0() { return cStyleStyleRefParserRuleCall_11_0; }

		//display=Display?
		public Assignment getDisplayAssignment_12() { return cDisplayAssignment_12; }

		//Display
		public RuleCall getDisplayDisplayParserRuleCall_12_0() { return cDisplayDisplayParserRuleCall_12_0; }
	}

	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cHeaderKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cHeaderelementsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cHeaderelementsReportElementsParserRuleCall_4_2_0 = (RuleCall)cHeaderelementsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cDetailKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cDetailelementsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cDetailelementsReportElementsParserRuleCall_5_2_0 = (RuleCall)cDetailelementsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cFooterKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cFooterelementsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cFooterelementsReportElementsParserRuleCall_6_2_0 = (RuleCall)cFooterelementsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////enum AggregatorType:
		////	
		////;
		///////////////////////////////////////////////////
		//List:
		//	"list" name=ID ("{" properties+=LabelProperties "}")? "{" ("header" "{" headerelements+=ReportElements* "}")?
		//	("detail" "{" detailelements+=ReportElements* "}")? ("footer" "{" footerelements+=ReportElements* "}")? "}";
		public ParserRule getRule() { return rule; }

		//"list" name=ID ("{" properties+=LabelProperties "}")? "{" ("header" "{" headerelements+=ReportElements* "}")? ("detail"
		//"{" detailelements+=ReportElements* "}")? ("footer" "{" footerelements+=ReportElements* "}")? "}"
		public Group getGroup() { return cGroup; }

		//"list"
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" properties+=LabelProperties "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//properties+=LabelProperties
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_2_1_0() { return cPropertiesLabelPropertiesParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("header" "{" headerelements+=ReportElements* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"header"
		public Keyword getHeaderKeyword_4_0() { return cHeaderKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//headerelements+=ReportElements*
		public Assignment getHeaderelementsAssignment_4_2() { return cHeaderelementsAssignment_4_2; }

		//ReportElements
		public RuleCall getHeaderelementsReportElementsParserRuleCall_4_2_0() { return cHeaderelementsReportElementsParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }

		//("detail" "{" detailelements+=ReportElements* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"detail"
		public Keyword getDetailKeyword_5_0() { return cDetailKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//detailelements+=ReportElements*
		public Assignment getDetailelementsAssignment_5_2() { return cDetailelementsAssignment_5_2; }

		//ReportElements
		public RuleCall getDetailelementsReportElementsParserRuleCall_5_2_0() { return cDetailelementsReportElementsParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }

		//("footer" "{" footerelements+=ReportElements* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"footer"
		public Keyword getFooterKeyword_6_0() { return cFooterKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//footerelements+=ReportElements*
		public Assignment getFooterelementsAssignment_6_2() { return cFooterelementsAssignment_6_2; }

		//ReportElements
		public RuleCall getFooterelementsReportElementsParserRuleCall_6_2_0() { return cFooterelementsReportElementsParserRuleCall_6_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class GridElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Grid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGridKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColumnsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColumnsColumnParserRuleCall_4_0 = (RuleCall)cColumnsAssignment_4.eContents().get(0);
		private final Assignment cRowsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRowsRowParserRuleCall_5_0 = (RuleCall)cRowsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Grid:
		//	"grid" name=ID ("{" properties+=LabelProperties "}")? "{" columns+=Column+ rows+=Row+ "}";
		public ParserRule getRule() { return rule; }

		//"grid" name=ID ("{" properties+=LabelProperties "}")? "{" columns+=Column+ rows+=Row+ "}"
		public Group getGroup() { return cGroup; }

		//"grid"
		public Keyword getGridKeyword_0() { return cGridKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" properties+=LabelProperties "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//properties+=LabelProperties
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_2_1_0() { return cPropertiesLabelPropertiesParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//columns+=Column+
		public Assignment getColumnsAssignment_4() { return cColumnsAssignment_4; }

		//Column
		public RuleCall getColumnsColumnParserRuleCall_4_0() { return cColumnsColumnParserRuleCall_4_0; }

		//rows+=Row+
		public Assignment getRowsAssignment_5() { return cRowsAssignment_5; }

		//Row
		public RuleCall getRowsRowParserRuleCall_5_0() { return cRowsRowParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDatasetKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDatasetAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cDatasetDatasetCrossReference_3_1_0 = (CrossReference)cDatasetAssignment_3_1.eContents().get(0);
		private final RuleCall cDatasetDatasetQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cDatasetDatasetCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cColumnsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cColumnsColumnParserRuleCall_5_0 = (RuleCall)cColumnsAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cHeaderKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cHeaderrowsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cHeaderrowsRowParserRuleCall_6_2_0 = (RuleCall)cHeaderrowsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDetailKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cDetailrowsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cDetailrowsRowParserRuleCall_7_2_0 = (RuleCall)cDetailrowsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cFooterKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cFooterrowsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cFooterrowsRowParserRuleCall_8_2_0 = (RuleCall)cFooterrowsAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Table:
		//	"table" name=ID ("{" properties+=LabelProperties "}")? ("dataset" dataset=[Dataset|QualifiedName])? "{"
		//	columns+=Column+ ("header" "{" headerrows+=Row+ "}")? ("detail" "{" detailrows+=Row+ "}")? ("footer" "{"
		//	footerrows+=Row+ "}")? "}";
		public ParserRule getRule() { return rule; }

		//"table" name=ID ("{" properties+=LabelProperties "}")? ("dataset" dataset=[Dataset|QualifiedName])? "{" columns+=Column+
		//("header" "{" headerrows+=Row+ "}")? ("detail" "{" detailrows+=Row+ "}")? ("footer" "{" footerrows+=Row+ "}")? "}"
		public Group getGroup() { return cGroup; }

		//"table"
		public Keyword getTableKeyword_0() { return cTableKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" properties+=LabelProperties "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//properties+=LabelProperties
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_2_1_0() { return cPropertiesLabelPropertiesParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }

		//("dataset" dataset=[Dataset|QualifiedName])?
		public Group getGroup_3() { return cGroup_3; }

		//"dataset"
		public Keyword getDatasetKeyword_3_0() { return cDatasetKeyword_3_0; }

		//dataset=[Dataset|QualifiedName]
		public Assignment getDatasetAssignment_3_1() { return cDatasetAssignment_3_1; }

		//[Dataset|QualifiedName]
		public CrossReference getDatasetDatasetCrossReference_3_1_0() { return cDatasetDatasetCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getDatasetDatasetQualifiedNameParserRuleCall_3_1_0_1() { return cDatasetDatasetQualifiedNameParserRuleCall_3_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//columns+=Column+
		public Assignment getColumnsAssignment_5() { return cColumnsAssignment_5; }

		//Column
		public RuleCall getColumnsColumnParserRuleCall_5_0() { return cColumnsColumnParserRuleCall_5_0; }

		//("header" "{" headerrows+=Row+ "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"header"
		public Keyword getHeaderKeyword_6_0() { return cHeaderKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//headerrows+=Row+
		public Assignment getHeaderrowsAssignment_6_2() { return cHeaderrowsAssignment_6_2; }

		//Row
		public RuleCall getHeaderrowsRowParserRuleCall_6_2_0() { return cHeaderrowsRowParserRuleCall_6_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }

		//("detail" "{" detailrows+=Row+ "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"detail"
		public Keyword getDetailKeyword_7_0() { return cDetailKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//detailrows+=Row+
		public Assignment getDetailrowsAssignment_7_2() { return cDetailrowsAssignment_7_2; }

		//Row
		public RuleCall getDetailrowsRowParserRuleCall_7_2_0() { return cDetailrowsRowParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }

		//("footer" "{" footerrows+=Row+ "}")?
		public Group getGroup_8() { return cGroup_8; }

		//"footer"
		public Keyword getFooterKeyword_8_0() { return cFooterKeyword_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }

		//footerrows+=Row+
		public Assignment getFooterrowsAssignment_8_2() { return cFooterrowsAssignment_8_2; }

		//Row
		public RuleCall getFooterrowsRowParserRuleCall_8_2_0() { return cFooterrowsRowParserRuleCall_8_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class CrossTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CrossTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCrossTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//CrossTable:
		//	"cross-table" name=ID ("{" properties+=LabelProperties "}")?;
		public ParserRule getRule() { return rule; }

		//"cross-table" name=ID ("{" properties+=LabelProperties "}")?
		public Group getGroup() { return cGroup; }

		//"cross-table"
		public Keyword getCrossTableKeyword_0() { return cCrossTableKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" properties+=LabelProperties "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//properties+=LabelProperties
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_2_1_0() { return cPropertiesLabelPropertiesParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColumnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOrderAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrderINTTerminalRuleCall_2_0 = (RuleCall)cOrderAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Column:
		//	{Column} "column" order=INT? ("{" properties+=LabelProperties "}")?;
		public ParserRule getRule() { return rule; }

		//{Column} "column" order=INT? ("{" properties+=LabelProperties "}")?
		public Group getGroup() { return cGroup; }

		//{Column}
		public Action getColumnAction_0() { return cColumnAction_0; }

		//"column"
		public Keyword getColumnKeyword_1() { return cColumnKeyword_1; }

		//order=INT?
		public Assignment getOrderAssignment_2() { return cOrderAssignment_2; }

		//INT
		public RuleCall getOrderINTTerminalRuleCall_2_0() { return cOrderINTTerminalRuleCall_2_0; }

		//("{" properties+=LabelProperties "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//properties+=LabelProperties
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_3_1_0() { return cPropertiesLabelPropertiesParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }
	}

	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOrderAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOrderINTTerminalRuleCall_1_0 = (RuleCall)cOrderAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cCellsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cCellsCellParserRuleCall_4_0 = (RuleCall)cCellsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Row:
		//	"row" order=INT? ("{" properties+=LabelProperties "}")? "{" cells+=Cell+ "}";
		public ParserRule getRule() { return rule; }

		//"row" order=INT? ("{" properties+=LabelProperties "}")? "{" cells+=Cell+ "}"
		public Group getGroup() { return cGroup; }

		//"row"
		public Keyword getRowKeyword_0() { return cRowKeyword_0; }

		//order=INT?
		public Assignment getOrderAssignment_1() { return cOrderAssignment_1; }

		//INT
		public RuleCall getOrderINTTerminalRuleCall_1_0() { return cOrderINTTerminalRuleCall_1_0; }

		//("{" properties+=LabelProperties "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//properties+=LabelProperties
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_2_1_0() { return cPropertiesLabelPropertiesParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//cells+=Cell+
		public Assignment getCellsAssignment_4() { return cCellsAssignment_4; }

		//Cell
		public RuleCall getCellsCellParserRuleCall_4_0() { return cCellsCellParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class CellElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cell");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCellAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCellKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOrderAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOrderINTTerminalRuleCall_2_0 = (RuleCall)cOrderAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cPropertiesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_3_1_0 = (RuleCall)cPropertiesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cElementsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cElementsReportElementsParserRuleCall_5_0 = (RuleCall)cElementsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Cell:
		//	{Cell} "cell" order=INT? ("{" properties+=LabelProperties "}")? "{" elements+=ReportElements* "}";
		public ParserRule getRule() { return rule; }

		//{Cell} "cell" order=INT? ("{" properties+=LabelProperties "}")? "{" elements+=ReportElements* "}"
		public Group getGroup() { return cGroup; }

		//{Cell}
		public Action getCellAction_0() { return cCellAction_0; }

		//"cell"
		public Keyword getCellKeyword_1() { return cCellKeyword_1; }

		//order=INT?
		public Assignment getOrderAssignment_2() { return cOrderAssignment_2; }

		//INT
		public RuleCall getOrderINTTerminalRuleCall_2_0() { return cOrderINTTerminalRuleCall_2_0; }

		//("{" properties+=LabelProperties "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//properties+=LabelProperties
		public Assignment getPropertiesAssignment_3_1() { return cPropertiesAssignment_3_1; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_3_1_0() { return cPropertiesLabelPropertiesParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_2() { return cRightCurlyBracketKeyword_3_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//elements+=ReportElements*
		public Assignment getElementsAssignment_5() { return cElementsAssignment_5; }

		//ReportElements
		public RuleCall getElementsReportElementsParserRuleCall_5_0() { return cElementsReportElementsParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class PagePropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageProperties");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cFontAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cFontFontParserRuleCall_0_0 = (RuleCall)cFontAssignment_0.eContents().get(0);
		private final Assignment cFontSizeAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cFontSizeFontSizeParserRuleCall_1_0 = (RuleCall)cFontSizeAssignment_1.eContents().get(0);
		private final Assignment cColorAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cColorColorParserRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		private final Assignment cBackgroundColorAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cBackgroundColorBackgroundColorParserRuleCall_3_0 = (RuleCall)cBackgroundColorAssignment_3.eContents().get(0);
		private final Assignment cTextStyleAssignment_4 = (Assignment)cUnorderedGroup.eContents().get(4);
		private final RuleCall cTextStyleTextStyleParserRuleCall_4_0 = (RuleCall)cTextStyleAssignment_4.eContents().get(0);
		private final Assignment cHAlignAssignment_5 = (Assignment)cUnorderedGroup.eContents().get(5);
		private final RuleCall cHAlignHAlignmentParserRuleCall_5_0 = (RuleCall)cHAlignAssignment_5.eContents().get(0);
		private final Assignment cVAlignAssignment_6 = (Assignment)cUnorderedGroup.eContents().get(6);
		private final RuleCall cVAlignVAlignmentParserRuleCall_6_0 = (RuleCall)cVAlignAssignment_6.eContents().get(0);
		private final Assignment cWhiteSpaceAssignment_7 = (Assignment)cUnorderedGroup.eContents().get(7);
		private final RuleCall cWhiteSpaceWhitespaceParserRuleCall_7_0 = (RuleCall)cWhiteSpaceAssignment_7.eContents().get(0);
		private final Assignment cStyleAssignment_8 = (Assignment)cUnorderedGroup.eContents().get(8);
		private final RuleCall cStyleStyleRefParserRuleCall_8_0 = (RuleCall)cStyleAssignment_8.eContents().get(0);
		private final Assignment cDisplayAssignment_9 = (Assignment)cUnorderedGroup.eContents().get(9);
		private final RuleCall cDisplayDisplayParserRuleCall_9_0 = (RuleCall)cDisplayAssignment_9.eContents().get(0);
		private final Assignment cBorderAssignment_10 = (Assignment)cUnorderedGroup.eContents().get(10);
		private final RuleCall cBorderBorderParserRuleCall_10_0 = (RuleCall)cBorderAssignment_10.eContents().get(0);
		private final Assignment cPaddingAssignment_11 = (Assignment)cUnorderedGroup.eContents().get(11);
		private final RuleCall cPaddingPaddingParserRuleCall_11_0 = (RuleCall)cPaddingAssignment_11.eContents().get(0);
		private final Assignment cMarginAssignment_12 = (Assignment)cUnorderedGroup.eContents().get(12);
		private final RuleCall cMarginMarginParserRuleCall_12_0 = (RuleCall)cMarginAssignment_12.eContents().get(0);
		private final Assignment cVisibilityAssignment_13 = (Assignment)cUnorderedGroup.eContents().get(13);
		private final RuleCall cVisibilityVisibilityParserRuleCall_13_0 = (RuleCall)cVisibilityAssignment_13.eContents().get(0);
		private final Assignment cPagebreakAssignment_14 = (Assignment)cUnorderedGroup.eContents().get(14);
		private final RuleCall cPagebreakPageBreakParserRuleCall_14_0 = (RuleCall)cPagebreakAssignment_14.eContents().get(0);
		private final Assignment cTocAssignment_15 = (Assignment)cUnorderedGroup.eContents().get(15);
		private final RuleCall cTocTocParserRuleCall_15_0 = (RuleCall)cTocAssignment_15.eContents().get(0);
		private final Assignment cBookmarkAssignment_16 = (Assignment)cUnorderedGroup.eContents().get(16);
		private final RuleCall cBookmarkBookmarkParserRuleCall_16_0 = (RuleCall)cBookmarkAssignment_16.eContents().get(0);
		private final Assignment cWidthAssignment_17 = (Assignment)cUnorderedGroup.eContents().get(17);
		private final RuleCall cWidthWidthParserRuleCall_17_0 = (RuleCall)cWidthAssignment_17.eContents().get(0);
		private final Assignment cHeightAssignment_18 = (Assignment)cUnorderedGroup.eContents().get(18);
		private final RuleCall cHeightHeightParserRuleCall_18_0 = (RuleCall)cHeightAssignment_18.eContents().get(0);
		
		/// **************************
		// * ELEMENT PROPERTY GROUPS
		// ************************** / PageProperties:
		//	font=Font? & fontSize=FontSize? & color=Color? & backgroundColor=BackgroundColor? & textStyle=TextStyle? &
		//	hAlign=HAlignment? & vAlign=VAlignment? & whiteSpace=Whitespace? & style=StyleRef? & display=Display? &
		//	border=Border? & padding=Padding? & margin=Margin? & visibility=Visibility? & pagebreak=PageBreak? & toc=Toc? &
		//	bookmark=Bookmark? & width=Width? & height=Height?;
		public ParserRule getRule() { return rule; }

		//font=Font? & fontSize=FontSize? & color=Color? & backgroundColor=BackgroundColor? & textStyle=TextStyle? &
		//hAlign=HAlignment? & vAlign=VAlignment? & whiteSpace=Whitespace? & style=StyleRef? & display=Display? & border=Border?
		//& padding=Padding? & margin=Margin? & visibility=Visibility? & pagebreak=PageBreak? & toc=Toc? & bookmark=Bookmark? &
		//width=Width? & height=Height?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//font=Font?
		public Assignment getFontAssignment_0() { return cFontAssignment_0; }

		//Font
		public RuleCall getFontFontParserRuleCall_0_0() { return cFontFontParserRuleCall_0_0; }

		//fontSize=FontSize?
		public Assignment getFontSizeAssignment_1() { return cFontSizeAssignment_1; }

		//FontSize
		public RuleCall getFontSizeFontSizeParserRuleCall_1_0() { return cFontSizeFontSizeParserRuleCall_1_0; }

		//color=Color?
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }

		//Color
		public RuleCall getColorColorParserRuleCall_2_0() { return cColorColorParserRuleCall_2_0; }

		//backgroundColor=BackgroundColor?
		public Assignment getBackgroundColorAssignment_3() { return cBackgroundColorAssignment_3; }

		//BackgroundColor
		public RuleCall getBackgroundColorBackgroundColorParserRuleCall_3_0() { return cBackgroundColorBackgroundColorParserRuleCall_3_0; }

		//textStyle=TextStyle?
		public Assignment getTextStyleAssignment_4() { return cTextStyleAssignment_4; }

		//TextStyle
		public RuleCall getTextStyleTextStyleParserRuleCall_4_0() { return cTextStyleTextStyleParserRuleCall_4_0; }

		//hAlign=HAlignment?
		public Assignment getHAlignAssignment_5() { return cHAlignAssignment_5; }

		//HAlignment
		public RuleCall getHAlignHAlignmentParserRuleCall_5_0() { return cHAlignHAlignmentParserRuleCall_5_0; }

		//vAlign=VAlignment?
		public Assignment getVAlignAssignment_6() { return cVAlignAssignment_6; }

		//VAlignment
		public RuleCall getVAlignVAlignmentParserRuleCall_6_0() { return cVAlignVAlignmentParserRuleCall_6_0; }

		//whiteSpace=Whitespace?
		public Assignment getWhiteSpaceAssignment_7() { return cWhiteSpaceAssignment_7; }

		//Whitespace
		public RuleCall getWhiteSpaceWhitespaceParserRuleCall_7_0() { return cWhiteSpaceWhitespaceParserRuleCall_7_0; }

		//style=StyleRef?
		public Assignment getStyleAssignment_8() { return cStyleAssignment_8; }

		//StyleRef
		public RuleCall getStyleStyleRefParserRuleCall_8_0() { return cStyleStyleRefParserRuleCall_8_0; }

		//display=Display?
		public Assignment getDisplayAssignment_9() { return cDisplayAssignment_9; }

		//Display
		public RuleCall getDisplayDisplayParserRuleCall_9_0() { return cDisplayDisplayParserRuleCall_9_0; }

		//border=Border?
		public Assignment getBorderAssignment_10() { return cBorderAssignment_10; }

		//Border
		public RuleCall getBorderBorderParserRuleCall_10_0() { return cBorderBorderParserRuleCall_10_0; }

		//padding=Padding?
		public Assignment getPaddingAssignment_11() { return cPaddingAssignment_11; }

		//Padding
		public RuleCall getPaddingPaddingParserRuleCall_11_0() { return cPaddingPaddingParserRuleCall_11_0; }

		//margin=Margin?
		public Assignment getMarginAssignment_12() { return cMarginAssignment_12; }

		//Margin
		public RuleCall getMarginMarginParserRuleCall_12_0() { return cMarginMarginParserRuleCall_12_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_13() { return cVisibilityAssignment_13; }

		//Visibility
		public RuleCall getVisibilityVisibilityParserRuleCall_13_0() { return cVisibilityVisibilityParserRuleCall_13_0; }

		//pagebreak=PageBreak?
		public Assignment getPagebreakAssignment_14() { return cPagebreakAssignment_14; }

		//PageBreak
		public RuleCall getPagebreakPageBreakParserRuleCall_14_0() { return cPagebreakPageBreakParserRuleCall_14_0; }

		//toc=Toc?
		public Assignment getTocAssignment_15() { return cTocAssignment_15; }

		//Toc
		public RuleCall getTocTocParserRuleCall_15_0() { return cTocTocParserRuleCall_15_0; }

		//bookmark=Bookmark?
		public Assignment getBookmarkAssignment_16() { return cBookmarkAssignment_16; }

		//Bookmark
		public RuleCall getBookmarkBookmarkParserRuleCall_16_0() { return cBookmarkBookmarkParserRuleCall_16_0; }

		//width=Width?
		public Assignment getWidthAssignment_17() { return cWidthAssignment_17; }

		//Width
		public RuleCall getWidthWidthParserRuleCall_17_0() { return cWidthWidthParserRuleCall_17_0; }

		//height=Height?
		public Assignment getHeightAssignment_18() { return cHeightAssignment_18; }

		//Height
		public RuleCall getHeightHeightParserRuleCall_18_0() { return cHeightHeightParserRuleCall_18_0; }
	}

	public class LabelPropertiesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelProperties");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cFontAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cFontFontParserRuleCall_0_0 = (RuleCall)cFontAssignment_0.eContents().get(0);
		private final Assignment cFontSizeAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cFontSizeFontSizeParserRuleCall_1_0 = (RuleCall)cFontSizeAssignment_1.eContents().get(0);
		private final Assignment cColorAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cColorColorParserRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		private final Assignment cBackgroundColorAssignment_3 = (Assignment)cUnorderedGroup.eContents().get(3);
		private final RuleCall cBackgroundColorBackgroundColorParserRuleCall_3_0 = (RuleCall)cBackgroundColorAssignment_3.eContents().get(0);
		private final Assignment cTextStyleAssignment_4 = (Assignment)cUnorderedGroup.eContents().get(4);
		private final RuleCall cTextStyleTextStyleParserRuleCall_4_0 = (RuleCall)cTextStyleAssignment_4.eContents().get(0);
		private final Assignment cHAlignAssignment_5 = (Assignment)cUnorderedGroup.eContents().get(5);
		private final RuleCall cHAlignHAlignmentParserRuleCall_5_0 = (RuleCall)cHAlignAssignment_5.eContents().get(0);
		private final Assignment cVAlignAssignment_6 = (Assignment)cUnorderedGroup.eContents().get(6);
		private final RuleCall cVAlignVAlignmentParserRuleCall_6_0 = (RuleCall)cVAlignAssignment_6.eContents().get(0);
		private final Assignment cWhiteSpaceAssignment_7 = (Assignment)cUnorderedGroup.eContents().get(7);
		private final RuleCall cWhiteSpaceWhitespaceParserRuleCall_7_0 = (RuleCall)cWhiteSpaceAssignment_7.eContents().get(0);
		private final Assignment cStyleAssignment_8 = (Assignment)cUnorderedGroup.eContents().get(8);
		private final RuleCall cStyleStyleRefParserRuleCall_8_0 = (RuleCall)cStyleAssignment_8.eContents().get(0);
		private final Assignment cDisplayAssignment_9 = (Assignment)cUnorderedGroup.eContents().get(9);
		private final RuleCall cDisplayDisplayParserRuleCall_9_0 = (RuleCall)cDisplayAssignment_9.eContents().get(0);
		private final Assignment cBorderAssignment_10 = (Assignment)cUnorderedGroup.eContents().get(10);
		private final RuleCall cBorderBorderParserRuleCall_10_0 = (RuleCall)cBorderAssignment_10.eContents().get(0);
		private final Assignment cPaddingAssignment_11 = (Assignment)cUnorderedGroup.eContents().get(11);
		private final RuleCall cPaddingPaddingParserRuleCall_11_0 = (RuleCall)cPaddingAssignment_11.eContents().get(0);
		private final Assignment cMarginAssignment_12 = (Assignment)cUnorderedGroup.eContents().get(12);
		private final RuleCall cMarginMarginParserRuleCall_12_0 = (RuleCall)cMarginAssignment_12.eContents().get(0);
		private final Assignment cVisibilityAssignment_13 = (Assignment)cUnorderedGroup.eContents().get(13);
		private final RuleCall cVisibilityVisibilityParserRuleCall_13_0 = (RuleCall)cVisibilityAssignment_13.eContents().get(0);
		private final Assignment cPagebreakAssignment_14 = (Assignment)cUnorderedGroup.eContents().get(14);
		private final RuleCall cPagebreakPageBreakParserRuleCall_14_0 = (RuleCall)cPagebreakAssignment_14.eContents().get(0);
		private final Assignment cTocAssignment_15 = (Assignment)cUnorderedGroup.eContents().get(15);
		private final RuleCall cTocTocParserRuleCall_15_0 = (RuleCall)cTocAssignment_15.eContents().get(0);
		private final Assignment cBookmarkAssignment_16 = (Assignment)cUnorderedGroup.eContents().get(16);
		private final RuleCall cBookmarkBookmarkParserRuleCall_16_0 = (RuleCall)cBookmarkAssignment_16.eContents().get(0);
		private final Assignment cWidthAssignment_17 = (Assignment)cUnorderedGroup.eContents().get(17);
		private final RuleCall cWidthWidthParserRuleCall_17_0 = (RuleCall)cWidthAssignment_17.eContents().get(0);
		private final Assignment cHeightAssignment_18 = (Assignment)cUnorderedGroup.eContents().get(18);
		private final RuleCall cHeightHeightParserRuleCall_18_0 = (RuleCall)cHeightAssignment_18.eContents().get(0);
		private final Assignment cAlttextAssignment_19 = (Assignment)cUnorderedGroup.eContents().get(19);
		private final RuleCall cAlttextAltTextParserRuleCall_19_0 = (RuleCall)cAlttextAssignment_19.eContents().get(0);
		
		//LabelProperties:
		//	font=Font? & fontSize=FontSize? & color=Color? & backgroundColor=BackgroundColor? & textStyle=TextStyle? &
		//	hAlign=HAlignment? & vAlign=VAlignment? & whiteSpace=Whitespace? & style=StyleRef? & display=Display? &
		//	border=Border? & padding=Padding? & margin=Margin? & visibility=Visibility? & pagebreak=PageBreak? & toc=Toc? &
		//	bookmark=Bookmark? & width=Width? & height=Height? & alttext=AltText?;
		public ParserRule getRule() { return rule; }

		//font=Font? & fontSize=FontSize? & color=Color? & backgroundColor=BackgroundColor? & textStyle=TextStyle? &
		//hAlign=HAlignment? & vAlign=VAlignment? & whiteSpace=Whitespace? & style=StyleRef? & display=Display? & border=Border?
		//& padding=Padding? & margin=Margin? & visibility=Visibility? & pagebreak=PageBreak? & toc=Toc? & bookmark=Bookmark? &
		//width=Width? & height=Height? & alttext=AltText?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//font=Font?
		public Assignment getFontAssignment_0() { return cFontAssignment_0; }

		//Font
		public RuleCall getFontFontParserRuleCall_0_0() { return cFontFontParserRuleCall_0_0; }

		//fontSize=FontSize?
		public Assignment getFontSizeAssignment_1() { return cFontSizeAssignment_1; }

		//FontSize
		public RuleCall getFontSizeFontSizeParserRuleCall_1_0() { return cFontSizeFontSizeParserRuleCall_1_0; }

		//color=Color?
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }

		//Color
		public RuleCall getColorColorParserRuleCall_2_0() { return cColorColorParserRuleCall_2_0; }

		//backgroundColor=BackgroundColor?
		public Assignment getBackgroundColorAssignment_3() { return cBackgroundColorAssignment_3; }

		//BackgroundColor
		public RuleCall getBackgroundColorBackgroundColorParserRuleCall_3_0() { return cBackgroundColorBackgroundColorParserRuleCall_3_0; }

		//textStyle=TextStyle?
		public Assignment getTextStyleAssignment_4() { return cTextStyleAssignment_4; }

		//TextStyle
		public RuleCall getTextStyleTextStyleParserRuleCall_4_0() { return cTextStyleTextStyleParserRuleCall_4_0; }

		//hAlign=HAlignment?
		public Assignment getHAlignAssignment_5() { return cHAlignAssignment_5; }

		//HAlignment
		public RuleCall getHAlignHAlignmentParserRuleCall_5_0() { return cHAlignHAlignmentParserRuleCall_5_0; }

		//vAlign=VAlignment?
		public Assignment getVAlignAssignment_6() { return cVAlignAssignment_6; }

		//VAlignment
		public RuleCall getVAlignVAlignmentParserRuleCall_6_0() { return cVAlignVAlignmentParserRuleCall_6_0; }

		//whiteSpace=Whitespace?
		public Assignment getWhiteSpaceAssignment_7() { return cWhiteSpaceAssignment_7; }

		//Whitespace
		public RuleCall getWhiteSpaceWhitespaceParserRuleCall_7_0() { return cWhiteSpaceWhitespaceParserRuleCall_7_0; }

		//style=StyleRef?
		public Assignment getStyleAssignment_8() { return cStyleAssignment_8; }

		//StyleRef
		public RuleCall getStyleStyleRefParserRuleCall_8_0() { return cStyleStyleRefParserRuleCall_8_0; }

		//display=Display?
		public Assignment getDisplayAssignment_9() { return cDisplayAssignment_9; }

		//Display
		public RuleCall getDisplayDisplayParserRuleCall_9_0() { return cDisplayDisplayParserRuleCall_9_0; }

		//border=Border?
		public Assignment getBorderAssignment_10() { return cBorderAssignment_10; }

		//Border
		public RuleCall getBorderBorderParserRuleCall_10_0() { return cBorderBorderParserRuleCall_10_0; }

		//padding=Padding?
		public Assignment getPaddingAssignment_11() { return cPaddingAssignment_11; }

		//Padding
		public RuleCall getPaddingPaddingParserRuleCall_11_0() { return cPaddingPaddingParserRuleCall_11_0; }

		//margin=Margin?
		public Assignment getMarginAssignment_12() { return cMarginAssignment_12; }

		//Margin
		public RuleCall getMarginMarginParserRuleCall_12_0() { return cMarginMarginParserRuleCall_12_0; }

		//visibility=Visibility?
		public Assignment getVisibilityAssignment_13() { return cVisibilityAssignment_13; }

		//Visibility
		public RuleCall getVisibilityVisibilityParserRuleCall_13_0() { return cVisibilityVisibilityParserRuleCall_13_0; }

		//pagebreak=PageBreak?
		public Assignment getPagebreakAssignment_14() { return cPagebreakAssignment_14; }

		//PageBreak
		public RuleCall getPagebreakPageBreakParserRuleCall_14_0() { return cPagebreakPageBreakParserRuleCall_14_0; }

		//toc=Toc?
		public Assignment getTocAssignment_15() { return cTocAssignment_15; }

		//Toc
		public RuleCall getTocTocParserRuleCall_15_0() { return cTocTocParserRuleCall_15_0; }

		//bookmark=Bookmark?
		public Assignment getBookmarkAssignment_16() { return cBookmarkAssignment_16; }

		//Bookmark
		public RuleCall getBookmarkBookmarkParserRuleCall_16_0() { return cBookmarkBookmarkParserRuleCall_16_0; }

		//width=Width?
		public Assignment getWidthAssignment_17() { return cWidthAssignment_17; }

		//Width
		public RuleCall getWidthWidthParserRuleCall_17_0() { return cWidthWidthParserRuleCall_17_0; }

		//height=Height?
		public Assignment getHeightAssignment_18() { return cHeightAssignment_18; }

		//Height
		public RuleCall getHeightHeightParserRuleCall_18_0() { return cHeightHeightParserRuleCall_18_0; }

		//alttext=AltText?
		public Assignment getAlttextAssignment_19() { return cAlttextAssignment_19; }

		//AltText
		public RuleCall getAlttextAltTextParserRuleCall_19_0() { return cAlttextAltTextParserRuleCall_19_0; }
	}

	public class FontElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Font");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFontKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cLinktoAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cLinktoFontCrossReference_2_1_0 = (CrossReference)cLinktoAssignment_2_1.eContents().get(0);
		private final RuleCall cLinktoFontIDTerminalRuleCall_2_1_0_1 = (RuleCall)cLinktoFontCrossReference_2_1_0.eContents().get(1);
		
		/// **********************
		// * ELEMENT PROPERTIES
		// ********************** / //RefX:
		////	value = STRING | datafield = [SelectColumnAlias]
		////;
		////HtmlContent:
		////	'html' value = STRING
		////;
		////ContentString:
		////	STRING
		////;
		//Font:
		//	"font" name=ID? (value=STRING | linkto=[Font]);
		public ParserRule getRule() { return rule; }

		//"font" name=ID? (value=STRING | linkto=[Font])
		public Group getGroup() { return cGroup; }

		//"font"
		public Keyword getFontKeyword_0() { return cFontKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//value=STRING | linkto=[Font]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=STRING
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0_0() { return cValueSTRINGTerminalRuleCall_2_0_0; }

		//linkto=[Font]
		public Assignment getLinktoAssignment_2_1() { return cLinktoAssignment_2_1; }

		//[Font]
		public CrossReference getLinktoFontCrossReference_2_1_0() { return cLinktoFontCrossReference_2_1_0; }

		//ID
		public RuleCall getLinktoFontIDTerminalRuleCall_2_1_0_1() { return cLinktoFontIDTerminalRuleCall_2_1_0_1; }
	}

	public class FontSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontSize");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFontSizeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Alternatives cValueAlternatives_2_0_0 = (Alternatives)cValueAssignment_2_0.eContents().get(0);
		private final RuleCall cValueSizeValueUnitParserRuleCall_2_0_0_0 = (RuleCall)cValueAlternatives_2_0_0.eContents().get(0);
		private final RuleCall cValueSizeValueParserRuleCall_2_0_0_1 = (RuleCall)cValueAlternatives_2_0_0.eContents().get(1);
		private final RuleCall cValueSizeValuePercentParserRuleCall_2_0_0_2 = (RuleCall)cValueAlternatives_2_0_0.eContents().get(2);
		private final Assignment cLinktoAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cLinktoFontSizeCrossReference_2_1_0 = (CrossReference)cLinktoAssignment_2_1.eContents().get(0);
		private final RuleCall cLinktoFontSizeIDTerminalRuleCall_2_1_0_1 = (RuleCall)cLinktoFontSizeCrossReference_2_1_0.eContents().get(1);
		
		//FontSize:
		//	"font-size" name=ID? (value=(SizeValueUnit | SizeValue | SizeValuePercent) | linkto=[FontSize]);
		public ParserRule getRule() { return rule; }

		//"font-size" name=ID? (value=(SizeValueUnit | SizeValue | SizeValuePercent) | linkto=[FontSize])
		public Group getGroup() { return cGroup; }

		//"font-size"
		public Keyword getFontSizeKeyword_0() { return cFontSizeKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//value=(SizeValueUnit | SizeValue | SizeValuePercent) | linkto=[FontSize]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=(SizeValueUnit | SizeValue | SizeValuePercent)
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//SizeValueUnit | SizeValue | SizeValuePercent
		public Alternatives getValueAlternatives_2_0_0() { return cValueAlternatives_2_0_0; }

		//SizeValueUnit
		public RuleCall getValueSizeValueUnitParserRuleCall_2_0_0_0() { return cValueSizeValueUnitParserRuleCall_2_0_0_0; }

		//SizeValue
		public RuleCall getValueSizeValueParserRuleCall_2_0_0_1() { return cValueSizeValueParserRuleCall_2_0_0_1; }

		//SizeValuePercent
		public RuleCall getValueSizeValuePercentParserRuleCall_2_0_0_2() { return cValueSizeValuePercentParserRuleCall_2_0_0_2; }

		//linkto=[FontSize]
		public Assignment getLinktoAssignment_2_1() { return cLinktoAssignment_2_1; }

		//[FontSize]
		public CrossReference getLinktoFontSizeCrossReference_2_1_0() { return cLinktoFontSizeCrossReference_2_1_0; }

		//ID
		public RuleCall getLinktoFontSizeIDTerminalRuleCall_2_1_0_1() { return cLinktoFontSizeIDTerminalRuleCall_2_1_0_1; }
	}

	public class SizeValueUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SizeValueUnit");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSizeUnitEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//SizeValueUnit:
		//	value=SizeUnit;
		public ParserRule getRule() { return rule; }

		//value=SizeUnit
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SizeUnit
		public RuleCall getValueSizeUnitEnumRuleCall_0() { return cValueSizeUnitEnumRuleCall_0; }
	}

	public class SizeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SizeValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueFLOATTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitLengthUnitEnumRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		//SizeValue:
		//	value=FLOAT unit=LengthUnit;
		public ParserRule getRule() { return rule; }

		//value=FLOAT unit=LengthUnit
		public Group getGroup() { return cGroup; }

		//value=FLOAT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0_0() { return cValueFLOATTerminalRuleCall_0_0; }

		//unit=LengthUnit
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//LengthUnit
		public RuleCall getUnitLengthUnitEnumRuleCall_1_0() { return cUnitLengthUnitEnumRuleCall_1_0; }
	}

	public class SizeValuePercentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SizeValuePercent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueFLOATTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Keyword cPercentSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//SizeValuePercent:
		//	value=FLOAT "%";
		public ParserRule getRule() { return rule; }

		//value=FLOAT "%"
		public Group getGroup() { return cGroup; }

		//value=FLOAT
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0_0() { return cValueFLOATTerminalRuleCall_0_0; }

		//"%"
		public Keyword getPercentSignKeyword_1() { return cPercentSignKeyword_1; }
	}

	public class ColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Color");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cStringColorParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cHexColorParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//Color:
		//	"color" (StringColor | HexColor);
		public ParserRule getRule() { return rule; }

		//"color" (StringColor | HexColor)
		public Group getGroup() { return cGroup; }

		//"color"
		public Keyword getColorKeyword_0() { return cColorKeyword_0; }

		//StringColor | HexColor
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//StringColor
		public RuleCall getStringColorParserRuleCall_1_0() { return cStringColorParserRuleCall_1_0; }

		//HexColor
		public RuleCall getHexColorParserRuleCall_1_1() { return cHexColorParserRuleCall_1_1; }
	}

	public class BackgroundColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BackgroundColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBgColorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cStringColorParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final RuleCall cHexColorParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		
		//BackgroundColor returns Color:
		//	"bg-color" (StringColor | HexColor);
		public ParserRule getRule() { return rule; }

		//"bg-color" (StringColor | HexColor)
		public Group getGroup() { return cGroup; }

		//"bg-color"
		public Keyword getBgColorKeyword_0() { return cBgColorKeyword_0; }

		//StringColor | HexColor
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//StringColor
		public RuleCall getStringColorParserRuleCall_1_0() { return cStringColorParserRuleCall_1_0; }

		//HexColor
		public RuleCall getHexColorParserRuleCall_1_1() { return cHexColorParserRuleCall_1_1; }
	}

	public class StringColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringColor");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueColorTypeEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringColor:
		//	value=ColorType;
		public ParserRule getRule() { return rule; }

		//value=ColorType
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ColorType
		public RuleCall getValueColorTypeEnumRuleCall_0() { return cValueColorTypeEnumRuleCall_0; }
	}

	public class HexColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HexColor");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueHEX_COLORTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//HexColor:
		//	value=HEX_COLOR;
		public ParserRule getRule() { return rule; }

		//value=HEX_COLOR
		public Assignment getValueAssignment() { return cValueAssignment; }

		//HEX_COLOR
		public RuleCall getValueHEX_COLORTerminalRuleCall_0() { return cValueHEX_COLORTerminalRuleCall_0; }
	}

	public class RgbColorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RgbColor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRgbKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRINTTerminalRuleCall_1_0 = (RuleCall)cRAssignment_1.eContents().get(0);
		private final Assignment cGAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGINTTerminalRuleCall_2_0 = (RuleCall)cGAssignment_2.eContents().get(0);
		private final Assignment cBAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBINTTerminalRuleCall_3_0 = (RuleCall)cBAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RgbColor:
		//	"rgb(" r=INT g=INT b=INT ")";
		public ParserRule getRule() { return rule; }

		//"rgb(" r=INT g=INT b=INT ")"
		public Group getGroup() { return cGroup; }

		//"rgb("
		public Keyword getRgbKeyword_0() { return cRgbKeyword_0; }

		//r=INT
		public Assignment getRAssignment_1() { return cRAssignment_1; }

		//INT
		public RuleCall getRINTTerminalRuleCall_1_0() { return cRINTTerminalRuleCall_1_0; }

		//g=INT
		public Assignment getGAssignment_2() { return cGAssignment_2; }

		//INT
		public RuleCall getGINTTerminalRuleCall_2_0() { return cGINTTerminalRuleCall_2_0; }

		//b=INT
		public Assignment getBAssignment_3() { return cBAssignment_3; }

		//INT
		public RuleCall getBINTTerminalRuleCall_3_0() { return cBINTTerminalRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class TextStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextStyle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTextStyleAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTextStyleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cIAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cIItalicKeyword_3_0_0 = (Keyword)cIAssignment_3_0.eContents().get(0);
		private final Assignment cBAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cBBoldKeyword_3_1_0 = (Keyword)cBAssignment_3_1.eContents().get(0);
		private final Assignment cUAssignment_3_2 = (Assignment)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cUUnderlineKeyword_3_2_0 = (Keyword)cUAssignment_3_2.eContents().get(0);
		private final Assignment cTAssignment_3_3 = (Assignment)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cTThroughLineKeyword_3_3_0 = (Keyword)cTAssignment_3_3.eContents().get(0);
		
		//TextStyle:
		//	{TextStyle} "text-style" name=ID? (I?="italic"? & B?="bold"? & U?="underline"? & T?="through-line"?);
		public ParserRule getRule() { return rule; }

		//{TextStyle} "text-style" name=ID? (I?="italic"? & B?="bold"? & U?="underline"? & T?="through-line"?)
		public Group getGroup() { return cGroup; }

		//{TextStyle}
		public Action getTextStyleAction_0() { return cTextStyleAction_0; }

		//"text-style"
		public Keyword getTextStyleKeyword_1() { return cTextStyleKeyword_1; }

		//name=ID?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//I?="italic"? & B?="bold"? & U?="underline"? & T?="through-line"?
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//I?="italic"?
		public Assignment getIAssignment_3_0() { return cIAssignment_3_0; }

		//"italic"
		public Keyword getIItalicKeyword_3_0_0() { return cIItalicKeyword_3_0_0; }

		//B?="bold"?
		public Assignment getBAssignment_3_1() { return cBAssignment_3_1; }

		//"bold"
		public Keyword getBBoldKeyword_3_1_0() { return cBBoldKeyword_3_1_0; }

		//U?="underline"?
		public Assignment getUAssignment_3_2() { return cUAssignment_3_2; }

		//"underline"
		public Keyword getUUnderlineKeyword_3_2_0() { return cUUnderlineKeyword_3_2_0; }

		//T?="through-line"?
		public Assignment getTAssignment_3_3() { return cTAssignment_3_3; }

		//"through-line"
		public Keyword getTThroughLineKeyword_3_3_0() { return cTThroughLineKeyword_3_3_0; }
	}

	public class HAlignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HAlignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHAlignmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueHalignmentTypeEnumRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cLinktoAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cLinktoHAlignmentCrossReference_2_1_0 = (CrossReference)cLinktoAssignment_2_1.eContents().get(0);
		private final RuleCall cLinktoHAlignmentIDTerminalRuleCall_2_1_0_1 = (RuleCall)cLinktoHAlignmentCrossReference_2_1_0.eContents().get(1);
		
		//HAlignment:
		//	"h-alignment" name=ID? (value=HalignmentType | linkto=[HAlignment]);
		public ParserRule getRule() { return rule; }

		//"h-alignment" name=ID? (value=HalignmentType | linkto=[HAlignment])
		public Group getGroup() { return cGroup; }

		//"h-alignment"
		public Keyword getHAlignmentKeyword_0() { return cHAlignmentKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//value=HalignmentType | linkto=[HAlignment]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=HalignmentType
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//HalignmentType
		public RuleCall getValueHalignmentTypeEnumRuleCall_2_0_0() { return cValueHalignmentTypeEnumRuleCall_2_0_0; }

		//linkto=[HAlignment]
		public Assignment getLinktoAssignment_2_1() { return cLinktoAssignment_2_1; }

		//[HAlignment]
		public CrossReference getLinktoHAlignmentCrossReference_2_1_0() { return cLinktoHAlignmentCrossReference_2_1_0; }

		//ID
		public RuleCall getLinktoHAlignmentIDTerminalRuleCall_2_1_0_1() { return cLinktoHAlignmentIDTerminalRuleCall_2_1_0_1; }
	}

	public class VAlignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VAlignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVAlignmentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueValignmentTypeEnumRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cLinktoAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cLinktoVAlignmentCrossReference_2_1_0 = (CrossReference)cLinktoAssignment_2_1.eContents().get(0);
		private final RuleCall cLinktoVAlignmentIDTerminalRuleCall_2_1_0_1 = (RuleCall)cLinktoVAlignmentCrossReference_2_1_0.eContents().get(1);
		
		//VAlignment:
		//	"v-alignment" name=ID? (value=ValignmentType | linkto=[VAlignment]);
		public ParserRule getRule() { return rule; }

		//"v-alignment" name=ID? (value=ValignmentType | linkto=[VAlignment])
		public Group getGroup() { return cGroup; }

		//"v-alignment"
		public Keyword getVAlignmentKeyword_0() { return cVAlignmentKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//value=ValignmentType | linkto=[VAlignment]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=ValignmentType
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//ValignmentType
		public RuleCall getValueValignmentTypeEnumRuleCall_2_0_0() { return cValueValignmentTypeEnumRuleCall_2_0_0; }

		//linkto=[VAlignment]
		public Assignment getLinktoAssignment_2_1() { return cLinktoAssignment_2_1; }

		//[VAlignment]
		public CrossReference getLinktoVAlignmentCrossReference_2_1_0() { return cLinktoVAlignmentCrossReference_2_1_0; }

		//ID
		public RuleCall getLinktoVAlignmentIDTerminalRuleCall_2_1_0_1() { return cLinktoVAlignmentIDTerminalRuleCall_2_1_0_1; }
	}

	public class WhitespaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Whitespace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhitespaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueWhitespaceTypeEnumRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cLinktoAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cLinktoWhitespaceCrossReference_2_1_0 = (CrossReference)cLinktoAssignment_2_1.eContents().get(0);
		private final RuleCall cLinktoWhitespaceIDTerminalRuleCall_2_1_0_1 = (RuleCall)cLinktoWhitespaceCrossReference_2_1_0.eContents().get(1);
		
		//Whitespace:
		//	"whitespace" name=ID? (value=WhitespaceType | linkto=[Whitespace]);
		public ParserRule getRule() { return rule; }

		//"whitespace" name=ID? (value=WhitespaceType | linkto=[Whitespace])
		public Group getGroup() { return cGroup; }

		//"whitespace"
		public Keyword getWhitespaceKeyword_0() { return cWhitespaceKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//value=WhitespaceType | linkto=[Whitespace]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=WhitespaceType
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//WhitespaceType
		public RuleCall getValueWhitespaceTypeEnumRuleCall_2_0_0() { return cValueWhitespaceTypeEnumRuleCall_2_0_0; }

		//linkto=[Whitespace]
		public Assignment getLinktoAssignment_2_1() { return cLinktoAssignment_2_1; }

		//[Whitespace]
		public CrossReference getLinktoWhitespaceCrossReference_2_1_0() { return cLinktoWhitespaceCrossReference_2_1_0; }

		//ID
		public RuleCall getLinktoWhitespaceIDTerminalRuleCall_2_1_0_1() { return cLinktoWhitespaceIDTerminalRuleCall_2_1_0_1; }
	}

	public class DisplayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Display");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDisplayKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueDisplayTypeEnumRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cLinktoAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final CrossReference cLinktoDisplayCrossReference_2_1_0 = (CrossReference)cLinktoAssignment_2_1.eContents().get(0);
		private final RuleCall cLinktoDisplayIDTerminalRuleCall_2_1_0_1 = (RuleCall)cLinktoDisplayCrossReference_2_1_0.eContents().get(1);
		
		//Display:
		//	"display" name=ID? (value=DisplayType | linkto=[Display]);
		public ParserRule getRule() { return rule; }

		//"display" name=ID? (value=DisplayType | linkto=[Display])
		public Group getGroup() { return cGroup; }

		//"display"
		public Keyword getDisplayKeyword_0() { return cDisplayKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//value=DisplayType | linkto=[Display]
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=DisplayType
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//DisplayType
		public RuleCall getValueDisplayTypeEnumRuleCall_2_0_0() { return cValueDisplayTypeEnumRuleCall_2_0_0; }

		//linkto=[Display]
		public Assignment getLinktoAssignment_2_1() { return cLinktoAssignment_2_1; }

		//[Display]
		public CrossReference getLinktoDisplayCrossReference_2_1_0() { return cLinktoDisplayCrossReference_2_1_0; }

		//ID
		public RuleCall getLinktoDisplayIDTerminalRuleCall_2_1_0_1() { return cLinktoDisplayIDTerminalRuleCall_2_1_0_1; }
	}

	public class BorderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Border");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBorderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final Alternatives cValueAlternatives_3_0_0 = (Alternatives)cValueAssignment_3_0.eContents().get(0);
		private final RuleCall cValueBorderAllParserRuleCall_3_0_0_0 = (RuleCall)cValueAlternatives_3_0_0.eContents().get(0);
		private final RuleCall cValueBorderSideParserRuleCall_3_0_0_1 = (RuleCall)cValueAlternatives_3_0_0.eContents().get(1);
		private final Assignment cLinktoAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final CrossReference cLinktoBorderCrossReference_3_1_0 = (CrossReference)cLinktoAssignment_3_1.eContents().get(0);
		private final RuleCall cLinktoBorderIDTerminalRuleCall_3_1_0_1 = (RuleCall)cLinktoBorderCrossReference_3_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Border:
		//	"border" name=ID? "{" (value=(BorderAll | BorderSide) | linkto=[Border]) "}";
		public ParserRule getRule() { return rule; }

		//"border" name=ID? "{" (value=(BorderAll | BorderSide) | linkto=[Border]) "}"
		public Group getGroup() { return cGroup; }

		//"border"
		public Keyword getBorderKeyword_0() { return cBorderKeyword_0; }

		//name=ID?
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//value=(BorderAll | BorderSide) | linkto=[Border]
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//value=(BorderAll | BorderSide)
		public Assignment getValueAssignment_3_0() { return cValueAssignment_3_0; }

		//BorderAll | BorderSide
		public Alternatives getValueAlternatives_3_0_0() { return cValueAlternatives_3_0_0; }

		//BorderAll
		public RuleCall getValueBorderAllParserRuleCall_3_0_0_0() { return cValueBorderAllParserRuleCall_3_0_0_0; }

		//BorderSide
		public RuleCall getValueBorderSideParserRuleCall_3_0_0_1() { return cValueBorderSideParserRuleCall_3_0_0_1; }

		//linkto=[Border]
		public Assignment getLinktoAssignment_3_1() { return cLinktoAssignment_3_1; }

		//[Border]
		public CrossReference getLinktoBorderCrossReference_3_1_0() { return cLinktoBorderCrossReference_3_1_0; }

		//ID
		public RuleCall getLinktoBorderIDTerminalRuleCall_3_1_0_1() { return cLinktoBorderIDTerminalRuleCall_3_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class BorderAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BorderAll");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBorderLineParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//BorderAll:
		//	"all" "{" BorderLine? "}";
		public ParserRule getRule() { return rule; }

		//"all" "{" BorderLine? "}"
		public Group getGroup() { return cGroup; }

		//"all"
		public Keyword getAllKeyword_0() { return cAllKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//BorderLine?
		public RuleCall getBorderLineParserRuleCall_2() { return cBorderLineParserRuleCall_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class BorderSideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BorderSide");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cRightKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cRightAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cRightBorderLineParserRuleCall_0_2_0 = (RuleCall)cRightAssignment_0_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cLeftKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLeftAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLeftBorderLineParserRuleCall_1_2_0 = (RuleCall)cLeftAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cTopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cTopAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cTopBorderLineParserRuleCall_2_2_0 = (RuleCall)cTopAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cBottomKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cBottomAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cBottomBorderLineParserRuleCall_3_2_0 = (RuleCall)cBottomAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//BorderSide:
		//	("right" "{" right=BorderLine "}")? & ("left" "{" left=BorderLine "}")? & ("top" "{" top=BorderLine "}")? & ("bottom"
		//	"{" bottom=BorderLine "}")?;
		public ParserRule getRule() { return rule; }

		//("right" "{" right=BorderLine "}")? & ("left" "{" left=BorderLine "}")? & ("top" "{" top=BorderLine "}")? & ("bottom"
		//"{" bottom=BorderLine "}")?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//("right" "{" right=BorderLine "}")?
		public Group getGroup_0() { return cGroup_0; }

		//"right"
		public Keyword getRightKeyword_0_0() { return cRightKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_1() { return cLeftCurlyBracketKeyword_0_1; }

		//right=BorderLine
		public Assignment getRightAssignment_0_2() { return cRightAssignment_0_2; }

		//BorderLine
		public RuleCall getRightBorderLineParserRuleCall_0_2_0() { return cRightBorderLineParserRuleCall_0_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_3() { return cRightCurlyBracketKeyword_0_3; }

		//("left" "{" left=BorderLine "}")?
		public Group getGroup_1() { return cGroup_1; }

		//"left"
		public Keyword getLeftKeyword_1_0() { return cLeftKeyword_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }

		//left=BorderLine
		public Assignment getLeftAssignment_1_2() { return cLeftAssignment_1_2; }

		//BorderLine
		public RuleCall getLeftBorderLineParserRuleCall_1_2_0() { return cLeftBorderLineParserRuleCall_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }

		//("top" "{" top=BorderLine "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"top"
		public Keyword getTopKeyword_2_0() { return cTopKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//top=BorderLine
		public Assignment getTopAssignment_2_2() { return cTopAssignment_2_2; }

		//BorderLine
		public RuleCall getTopBorderLineParserRuleCall_2_2_0() { return cTopBorderLineParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }

		//("bottom" "{" bottom=BorderLine "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"bottom"
		public Keyword getBottomKeyword_3_0() { return cBottomKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//bottom=BorderLine
		public Assignment getBottomAssignment_3_2() { return cBottomAssignment_3_2; }

		//BorderLine
		public RuleCall getBottomBorderLineParserRuleCall_3_2_0() { return cBottomBorderLineParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class BorderLineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BorderLine");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cStyleKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cStyleAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cStyleBorderLineStyleTypeEnumRuleCall_0_1_0 = (RuleCall)cStyleAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cWidthKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cWidthAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cWidthBorderWidthParserRuleCall_1_1_0 = (RuleCall)cWidthAssignment_1_1.eContents().get(0);
		private final Assignment cColorAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cColorColorParserRuleCall_2_0 = (RuleCall)cColorAssignment_2.eContents().get(0);
		
		//BorderLine:
		//	"style" style=BorderLineStyleType & "width" width=BorderWidth & color=Color;
		public ParserRule getRule() { return rule; }

		//"style" style=BorderLineStyleType & "width" width=BorderWidth & color=Color
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//"style" style=BorderLineStyleType
		public Group getGroup_0() { return cGroup_0; }

		//"style"
		public Keyword getStyleKeyword_0_0() { return cStyleKeyword_0_0; }

		//style=BorderLineStyleType
		public Assignment getStyleAssignment_0_1() { return cStyleAssignment_0_1; }

		//BorderLineStyleType
		public RuleCall getStyleBorderLineStyleTypeEnumRuleCall_0_1_0() { return cStyleBorderLineStyleTypeEnumRuleCall_0_1_0; }

		//"width" width=BorderWidth
		public Group getGroup_1() { return cGroup_1; }

		//"width"
		public Keyword getWidthKeyword_1_0() { return cWidthKeyword_1_0; }

		//width=BorderWidth
		public Assignment getWidthAssignment_1_1() { return cWidthAssignment_1_1; }

		//BorderWidth
		public RuleCall getWidthBorderWidthParserRuleCall_1_1_0() { return cWidthBorderWidthParserRuleCall_1_1_0; }

		//color=Color
		public Assignment getColorAssignment_2() { return cColorAssignment_2; }

		//Color
		public RuleCall getColorColorParserRuleCall_2_0() { return cColorColorParserRuleCall_2_0; }
	}

	public class BorderWidthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BorderWidth");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueWidthTypeValueParserRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueSizeValueParserRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		
		//BorderWidth:
		//	value=(WidthTypeValue | SizeValue);
		public ParserRule getRule() { return rule; }

		//value=(WidthTypeValue | SizeValue)
		public Assignment getValueAssignment() { return cValueAssignment; }

		//WidthTypeValue | SizeValue
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//WidthTypeValue
		public RuleCall getValueWidthTypeValueParserRuleCall_0_0() { return cValueWidthTypeValueParserRuleCall_0_0; }

		//SizeValue
		public RuleCall getValueSizeValueParserRuleCall_0_1() { return cValueSizeValueParserRuleCall_0_1; }
	}

	public class WidthTypeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WidthTypeValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueWidthTypeEnumRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//WidthTypeValue:
		//	value=WidthType;
		public ParserRule getRule() { return rule; }

		//value=WidthType
		public Assignment getValueAssignment() { return cValueAssignment; }

		//WidthType
		public RuleCall getValueWidthTypeEnumRuleCall_0() { return cValueWidthTypeEnumRuleCall_0; }
	}

	public class PaddingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Padding");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPaddingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cIndentAllParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cIndentSideParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Padding:
		//	"padding" "{" (IndentAll | IndentSide) "}";
		public ParserRule getRule() { return rule; }

		//"padding" "{" (IndentAll | IndentSide) "}"
		public Group getGroup() { return cGroup; }

		//"padding"
		public Keyword getPaddingKeyword_0() { return cPaddingKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//IndentAll | IndentSide
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//IndentAll
		public RuleCall getIndentAllParserRuleCall_2_0() { return cIndentAllParserRuleCall_2_0; }

		//IndentSide
		public RuleCall getIndentSideParserRuleCall_2_1() { return cIndentSideParserRuleCall_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class MarginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Margin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMarginKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final RuleCall cIndentAllParserRuleCall_2_0 = (RuleCall)cAlternatives_2.eContents().get(0);
		private final RuleCall cIndentSideParserRuleCall_2_1 = (RuleCall)cAlternatives_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Margin returns Padding:
		//	"margin" "{" (IndentAll | IndentSide) "}";
		public ParserRule getRule() { return rule; }

		//"margin" "{" (IndentAll | IndentSide) "}"
		public Group getGroup() { return cGroup; }

		//"margin"
		public Keyword getMarginKeyword_0() { return cMarginKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//IndentAll | IndentSide
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//IndentAll
		public RuleCall getIndentAllParserRuleCall_2_0() { return cIndentAllParserRuleCall_2_0; }

		//IndentSide
		public RuleCall getIndentSideParserRuleCall_2_1() { return cIndentSideParserRuleCall_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class IndentAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndentAll");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIndentValueParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//IndentAll:
		//	"all" IndentValue;
		public ParserRule getRule() { return rule; }

		//"all" IndentValue
		public Group getGroup() { return cGroup; }

		//"all"
		public Keyword getAllKeyword_0() { return cAllKeyword_0; }

		//IndentValue
		public RuleCall getIndentValueParserRuleCall_1() { return cIndentValueParserRuleCall_1; }
	}

	public class IndentSideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndentSide");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cRightKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cRightAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRightIndentValueParserRuleCall_0_1_0 = (RuleCall)cRightAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cLeftKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLeftAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLeftIndentValueParserRuleCall_1_1_0 = (RuleCall)cLeftAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cTopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTopAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTopIndentValueParserRuleCall_2_1_0 = (RuleCall)cTopAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cUnorderedGroup.eContents().get(3);
		private final Keyword cBottomKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBottomAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBottomIndentValueParserRuleCall_3_1_0 = (RuleCall)cBottomAssignment_3_1.eContents().get(0);
		
		//IndentSide:
		//	("right" right=IndentValue)? & ("left" left=IndentValue)? & ("top" top=IndentValue)? & ("bottom"
		//	bottom=IndentValue)?;
		public ParserRule getRule() { return rule; }

		//("right" right=IndentValue)? & ("left" left=IndentValue)? & ("top" top=IndentValue)? & ("bottom" bottom=IndentValue)?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//("right" right=IndentValue)?
		public Group getGroup_0() { return cGroup_0; }

		//"right"
		public Keyword getRightKeyword_0_0() { return cRightKeyword_0_0; }

		//right=IndentValue
		public Assignment getRightAssignment_0_1() { return cRightAssignment_0_1; }

		//IndentValue
		public RuleCall getRightIndentValueParserRuleCall_0_1_0() { return cRightIndentValueParserRuleCall_0_1_0; }

		//("left" left=IndentValue)?
		public Group getGroup_1() { return cGroup_1; }

		//"left"
		public Keyword getLeftKeyword_1_0() { return cLeftKeyword_1_0; }

		//left=IndentValue
		public Assignment getLeftAssignment_1_1() { return cLeftAssignment_1_1; }

		//IndentValue
		public RuleCall getLeftIndentValueParserRuleCall_1_1_0() { return cLeftIndentValueParserRuleCall_1_1_0; }

		//("top" top=IndentValue)?
		public Group getGroup_2() { return cGroup_2; }

		//"top"
		public Keyword getTopKeyword_2_0() { return cTopKeyword_2_0; }

		//top=IndentValue
		public Assignment getTopAssignment_2_1() { return cTopAssignment_2_1; }

		//IndentValue
		public RuleCall getTopIndentValueParserRuleCall_2_1_0() { return cTopIndentValueParserRuleCall_2_1_0; }

		//("bottom" bottom=IndentValue)?
		public Group getGroup_3() { return cGroup_3; }

		//"bottom"
		public Keyword getBottomKeyword_3_0() { return cBottomKeyword_3_0; }

		//bottom=IndentValue
		public Assignment getBottomAssignment_3_1() { return cBottomAssignment_3_1; }

		//IndentValue
		public RuleCall getBottomIndentValueParserRuleCall_3_1_0() { return cBottomIndentValueParserRuleCall_3_1_0; }
	}

	public class IndentValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndentValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final RuleCall cValueSizeValueParserRuleCall_0_0 = (RuleCall)cValueAlternatives_0.eContents().get(0);
		private final RuleCall cValueSizeValuePercentParserRuleCall_0_1 = (RuleCall)cValueAlternatives_0.eContents().get(1);
		
		//IndentValue:
		//	value=(SizeValue | SizeValuePercent);
		public ParserRule getRule() { return rule; }

		//value=(SizeValue | SizeValuePercent)
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SizeValue | SizeValuePercent
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//SizeValue
		public RuleCall getValueSizeValueParserRuleCall_0_0() { return cValueSizeValueParserRuleCall_0_0; }

		//SizeValuePercent
		public RuleCall getValueSizeValuePercentParserRuleCall_0_1() { return cValueSizeValuePercentParserRuleCall_0_1; }
	}

	public class PageBreakElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PageBreak");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPageBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cBeforeKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cBeforeAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cBeforePageBreakValueEnumRuleCall_2_0_1_0 = (RuleCall)cBeforeAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cAfterKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAfterAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAfterPageBreakValueEnumRuleCall_2_1_1_0 = (RuleCall)cAfterAssignment_2_1_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cUnorderedGroup_2.eContents().get(2);
		private final Keyword cInsideKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInsideAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInsidePageBreakValueEnumRuleCall_2_2_1_0 = (RuleCall)cInsideAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cUnorderedGroup_2.eContents().get(3);
		private final Keyword cIntervalKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cIntervalAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cIntervalIntLiteralParserRuleCall_2_3_1_0 = (RuleCall)cIntervalAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cUnorderedGroup_2.eContents().get(4);
		private final Keyword cRepeatHeaderKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cRepeatAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cRepeatBooleanLiteralParserRuleCall_2_4_1_0 = (RuleCall)cRepeatAssignment_2_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////Hyperlink:
		////	property = 'link' (uri = STRING | InternalBookmark = [BodyElement])
		////; //#TODO Hyperlink: | DrillTrough = STRING | InternalBookmark = Element, Bookmark | Add Builder Expression
		//PageBreak:
		//	"page-break" "{" (("before" before=PageBreakValue)? & ("after" after=PageBreakValue)? & ("inside"
		//	inside=PageBreakValue)? & ("interval" interval=IntLiteral)? & ("repeat-header" repeat=BooleanLiteral)?) "}";
		public ParserRule getRule() { return rule; }

		//"page-break" "{" (("before" before=PageBreakValue)? & ("after" after=PageBreakValue)? & ("inside"
		//inside=PageBreakValue)? & ("interval" interval=IntLiteral)? & ("repeat-header" repeat=BooleanLiteral)?) "}"
		public Group getGroup() { return cGroup; }

		//"page-break"
		public Keyword getPageBreakKeyword_0() { return cPageBreakKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//("before" before=PageBreakValue)? & ("after" after=PageBreakValue)? & ("inside" inside=PageBreakValue)? & ("interval"
		//interval=IntLiteral)? & ("repeat-header" repeat=BooleanLiteral)?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//("before" before=PageBreakValue)?
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"before"
		public Keyword getBeforeKeyword_2_0_0() { return cBeforeKeyword_2_0_0; }

		//before=PageBreakValue
		public Assignment getBeforeAssignment_2_0_1() { return cBeforeAssignment_2_0_1; }

		//PageBreakValue
		public RuleCall getBeforePageBreakValueEnumRuleCall_2_0_1_0() { return cBeforePageBreakValueEnumRuleCall_2_0_1_0; }

		//("after" after=PageBreakValue)?
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"after"
		public Keyword getAfterKeyword_2_1_0() { return cAfterKeyword_2_1_0; }

		//after=PageBreakValue
		public Assignment getAfterAssignment_2_1_1() { return cAfterAssignment_2_1_1; }

		//PageBreakValue
		public RuleCall getAfterPageBreakValueEnumRuleCall_2_1_1_0() { return cAfterPageBreakValueEnumRuleCall_2_1_1_0; }

		//("inside" inside=PageBreakValue)?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"inside"
		public Keyword getInsideKeyword_2_2_0() { return cInsideKeyword_2_2_0; }

		//inside=PageBreakValue
		public Assignment getInsideAssignment_2_2_1() { return cInsideAssignment_2_2_1; }

		//PageBreakValue
		public RuleCall getInsidePageBreakValueEnumRuleCall_2_2_1_0() { return cInsidePageBreakValueEnumRuleCall_2_2_1_0; }

		//("interval" interval=IntLiteral)?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"interval"
		public Keyword getIntervalKeyword_2_3_0() { return cIntervalKeyword_2_3_0; }

		//interval=IntLiteral
		public Assignment getIntervalAssignment_2_3_1() { return cIntervalAssignment_2_3_1; }

		//IntLiteral
		public RuleCall getIntervalIntLiteralParserRuleCall_2_3_1_0() { return cIntervalIntLiteralParserRuleCall_2_3_1_0; }

		//("repeat-header" repeat=BooleanLiteral)?
		public Group getGroup_2_4() { return cGroup_2_4; }

		//"repeat-header"
		public Keyword getRepeatHeaderKeyword_2_4_0() { return cRepeatHeaderKeyword_2_4_0; }

		//repeat=BooleanLiteral
		public Assignment getRepeatAssignment_2_4_1() { return cRepeatAssignment_2_4_1; }

		//BooleanLiteral
		public RuleCall getRepeatBooleanLiteralParserRuleCall_2_4_1_0() { return cRepeatBooleanLiteralParserRuleCall_2_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class VisibilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Visibility");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVisibilityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cShowAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cShowTrueKeyword_1_0_0 = (Keyword)cShowAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cHideForKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final RuleCall cHideAllParserRuleCall_1_1_1_0 = (RuleCall)cAlternatives_1_1_1.eContents().get(0);
		private final RuleCall cHideForOneParserRuleCall_1_1_1_1 = (RuleCall)cAlternatives_1_1_1.eContents().get(1);
		private final RuleCall cHideForMoreParserRuleCall_1_1_1_2 = (RuleCall)cAlternatives_1_1_1.eContents().get(2);
		
		//Visibility:
		//	"visibility" (show?="true" | "hide for" (HideAll | HideForOne | HideForMore));
		public ParserRule getRule() { return rule; }

		//"visibility" (show?="true" | "hide for" (HideAll | HideForOne | HideForMore))
		public Group getGroup() { return cGroup; }

		//"visibility"
		public Keyword getVisibilityKeyword_0() { return cVisibilityKeyword_0; }

		//show?="true" | "hide for" (HideAll | HideForOne | HideForMore)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//show?="true"
		public Assignment getShowAssignment_1_0() { return cShowAssignment_1_0; }

		//"true"
		public Keyword getShowTrueKeyword_1_0_0() { return cShowTrueKeyword_1_0_0; }

		//"hide for" (HideAll | HideForOne | HideForMore)
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"hide for"
		public Keyword getHideForKeyword_1_1_0() { return cHideForKeyword_1_1_0; }

		//HideAll | HideForOne | HideForMore
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//HideAll
		public RuleCall getHideAllParserRuleCall_1_1_1_0() { return cHideAllParserRuleCall_1_1_1_0; }

		//HideForOne
		public RuleCall getHideForOneParserRuleCall_1_1_1_1() { return cHideForOneParserRuleCall_1_1_1_1; }

		//HideForMore
		public RuleCall getHideForMoreParserRuleCall_1_1_1_2() { return cHideForMoreParserRuleCall_1_1_1_2; }
	}

	public class LegendVisibilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LegendVisibility");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVisibilityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAlternatives_1_0.eContents().get(0);
		private final Keyword cValueHideKeyword_1_0_1 = (Keyword)cValueAlternatives_1_0.eContents().get(1);
		
		//LegendVisibility:
		//	"visibility" value=("true" | "hide");
		public ParserRule getRule() { return rule; }

		//"visibility" value=("true" | "hide")
		public Group getGroup() { return cGroup; }

		//"visibility"
		public Keyword getVisibilityKeyword_0() { return cVisibilityKeyword_0; }

		//value=("true" | "hide")
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"true" | "hide"
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }

		//"hide"
		public Keyword getValueHideKeyword_1_0_1() { return cValueHideKeyword_1_0_1; }
	}

	public class HideAllElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HideAll");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAllKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionJSExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//HideAll:
		//	"all" expression=JSExpression?;
		public ParserRule getRule() { return rule; }

		//"all" expression=JSExpression?
		public Group getGroup() { return cGroup; }

		//"all"
		public Keyword getAllKeyword_0() { return cAllKeyword_0; }

		//expression=JSExpression?
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//JSExpression
		public RuleCall getExpressionJSExpressionParserRuleCall_1_0() { return cExpressionJSExpressionParserRuleCall_1_0; }
	}

	public class HideForOneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HideForOne");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueHideForValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//HideForOne:
		//	"{" value+=HideForValue+ "}";
		public ParserRule getRule() { return rule; }

		//"{" value+=HideForValue+ "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//value+=HideForValue+
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//HideForValue
		public RuleCall getValueHideForValueParserRuleCall_1_0() { return cValueHideForValueParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class HideForValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HideForValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFormatAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFormatOutputFormatTypeEnumRuleCall_0_0 = (RuleCall)cFormatAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionJSExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//HideForValue returns HideAll:
		//	format=OutputFormatType expression=JSExpression?;
		public ParserRule getRule() { return rule; }

		//format=OutputFormatType expression=JSExpression?
		public Group getGroup() { return cGroup; }

		//format=OutputFormatType
		public Assignment getFormatAssignment_0() { return cFormatAssignment_0; }

		//OutputFormatType
		public RuleCall getFormatOutputFormatTypeEnumRuleCall_0_0() { return cFormatOutputFormatTypeEnumRuleCall_0_0; }

		//expression=JSExpression?
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//JSExpression
		public RuleCall getExpressionJSExpressionParserRuleCall_1_0() { return cExpressionJSExpressionParserRuleCall_1_0; }
	}

	public class HideForMoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HideForMore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFormatAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFormatOutputFormatTypeEnumRuleCall_1_0 = (RuleCall)cFormatAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionJSExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//HideForMore:
		//	"(" format+=OutputFormatType+ ")" expression=JSExpression?;
		public ParserRule getRule() { return rule; }

		//"(" format+=OutputFormatType+ ")" expression=JSExpression?
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//format+=OutputFormatType+
		public Assignment getFormatAssignment_1() { return cFormatAssignment_1; }

		//OutputFormatType
		public RuleCall getFormatOutputFormatTypeEnumRuleCall_1_0() { return cFormatOutputFormatTypeEnumRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }

		//expression=JSExpression?
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//JSExpression
		public RuleCall getExpressionJSExpressionParserRuleCall_3_0() { return cExpressionJSExpressionParserRuleCall_3_0; }
	}

	public class JSExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JSExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueLiteralParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//JSExpression:
		//	"{" value=Literal //#TODO Builder Expression
		//	"}";
		public ParserRule getRule() { return rule; }

		//"{" value=Literal //#TODO Builder Expression
		//"}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//value=Literal
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Literal
		public RuleCall getValueLiteralParserRuleCall_1_0() { return cValueLiteralParserRuleCall_1_0; }

		////#TODO Builder Expression
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class TocElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Toc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTocKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStyleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStyleStyleRefParserRuleCall_1_0 = (RuleCall)cStyleAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueJSExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Toc:
		//	"toc" style=StyleRef? value=JSExpression;
		public ParserRule getRule() { return rule; }

		//"toc" style=StyleRef? value=JSExpression
		public Group getGroup() { return cGroup; }

		//"toc"
		public Keyword getTocKeyword_0() { return cTocKeyword_0; }

		//style=StyleRef?
		public Assignment getStyleAssignment_1() { return cStyleAssignment_1; }

		//StyleRef
		public RuleCall getStyleStyleRefParserRuleCall_1_0() { return cStyleStyleRefParserRuleCall_1_0; }

		//value=JSExpression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//JSExpression
		public RuleCall getValueJSExpressionParserRuleCall_2_0() { return cValueJSExpressionParserRuleCall_2_0; }
	}

	public class BookmarkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bookmark");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBookmarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionJSExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Bookmark:
		//	"bookmark" expression=JSExpression;
		public ParserRule getRule() { return rule; }

		//"bookmark" expression=JSExpression
		public Group getGroup() { return cGroup; }

		//"bookmark"
		public Keyword getBookmarkKeyword_0() { return cBookmarkKeyword_0; }

		//expression=JSExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//JSExpression
		public RuleCall getExpressionJSExpressionParserRuleCall_1_0() { return cExpressionJSExpressionParserRuleCall_1_0; }
	}

	public class StyleRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StyleRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRefnameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefnameStyleCrossReference_1_0 = (CrossReference)cRefnameAssignment_1.eContents().get(0);
		private final RuleCall cRefnameStyleIDTerminalRuleCall_1_0_1 = (RuleCall)cRefnameStyleCrossReference_1_0.eContents().get(1);
		
		//StyleRef:
		//	"style" refname=[Style];
		public ParserRule getRule() { return rule; }

		//"style" refname=[Style]
		public Group getGroup() { return cGroup; }

		//"style"
		public Keyword getStyleKeyword_0() { return cStyleKeyword_0; }

		//refname=[Style]
		public Assignment getRefnameAssignment_1() { return cRefnameAssignment_1; }

		//[Style]
		public CrossReference getRefnameStyleCrossReference_1_0() { return cRefnameStyleCrossReference_1_0; }

		//ID
		public RuleCall getRefnameStyleIDTerminalRuleCall_1_0_1() { return cRefnameStyleIDTerminalRuleCall_1_0_1; }
	}

	public class StyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Style");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStyleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertiesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertiesLabelPropertiesParserRuleCall_2_1_0 = (RuleCall)cPropertiesAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Style:
		//	"style" name=ID ("{" properties+=LabelProperties "}")?;
		public ParserRule getRule() { return rule; }

		//"style" name=ID ("{" properties+=LabelProperties "}")?
		public Group getGroup() { return cGroup; }

		//"style"
		public Keyword getStyleKeyword_0() { return cStyleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" properties+=LabelProperties "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//properties+=LabelProperties
		public Assignment getPropertiesAssignment_2_1() { return cPropertiesAssignment_2_1; }

		//LabelProperties
		public RuleCall getPropertiesLabelPropertiesParserRuleCall_2_1_0() { return cPropertiesLabelPropertiesParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class WidthElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Width");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWidthKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIndentValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Width:
		//	"width" value=IndentValue;
		public ParserRule getRule() { return rule; }

		//"width" value=IndentValue
		public Group getGroup() { return cGroup; }

		//"width"
		public Keyword getWidthKeyword_0() { return cWidthKeyword_0; }

		//value=IndentValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//IndentValue
		public RuleCall getValueIndentValueParserRuleCall_1_0() { return cValueIndentValueParserRuleCall_1_0; }
	}

	public class HeightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Height");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHeightKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueIndentValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Height:
		//	"height" value=IndentValue;
		public ParserRule getRule() { return rule; }

		//"height" value=IndentValue
		public Group getGroup() { return cGroup; }

		//"height"
		public Keyword getHeightKeyword_0() { return cHeightKeyword_0; }

		//value=IndentValue
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//IndentValue
		public RuleCall getValueIndentValueParserRuleCall_1_0() { return cValueIndentValueParserRuleCall_1_0; }
	}

	public class AltTextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AltText");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAltTextKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionJSExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//AltText:
		//	"alt-text" expression=JSExpression;
		public ParserRule getRule() { return rule; }

		//"alt-text" expression=JSExpression
		public Group getGroup() { return cGroup; }

		//"alt-text"
		public Keyword getAltTextKeyword_0() { return cAltTextKeyword_0; }

		//expression=JSExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//JSExpression
		public RuleCall getExpressionJSExpressionParserRuleCall_1_0() { return cExpressionJSExpressionParserRuleCall_1_0; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFloatLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNullLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cIDAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cValueDatasetFieldCrossReference_5_1_0 = (CrossReference)cValueAssignment_5_1.eContents().get(0);
		private final RuleCall cValueDatasetFieldQualifiedNameParserRuleCall_5_1_0_1 = (RuleCall)cValueDatasetFieldCrossReference_5_1_0.eContents().get(1);
		
		////terminal RGB_COLOR:
		////	('0'..'9' |
		////	(('1'..'9')('0'..'9')) |
		////	('1')('0'..'9')('0'..'9') |
		////	('2')('0'..'4')('0'..'9') |
		////	('2')('5')('0'..'5'))
		////;
		////terminal BOOLEAN_CONSTANT returns ecore::EBoolean:
		////	'true' | 'false';
		////terminal NULL_CONSTANT:
		////	'null';
		/// * *************************************************
		// * Grammar for SelectStatement are remade from 
		// * https://sourceforge.net/projects/plsql-xtext/
		// * http://plsql-editor.eclipselabs.org.codespot.com/svn-history/r3/plsql.editor.xtext/src/plsql/editor/xtext/PlSql.xtext
		// * ************************************************* / //SelectStatement:
		////	'query' name = ID '{'
		////	'select' distinct?='distinct'? unique?='unique'? all?='all'?
		////	selectItem+=SelectColumn (',' selectItems+=SelectColumn)*
		////	'from' tables+=TableReference (',' tables+=TableReference)*
		////	whereClause=WhereClause?
		////	orderClause=OrderClause?
		////	'}'
		////;
		////
		////SelectItem
		////	: SelectColumn
		////	| SelectWildcard
		////;
		////
		////SelectWildcard:
		////	wildcard='*'
		////;
		////
		////SelectColumn:	
		////	item = Expression
		//////	((as Separator ?= 'as')? name=ID)?
		////;
		////
		////TableReference:
		////	name=ObjectReference
		////	alias=ID?
		////;
		////
		////ObjectReference:
		////	(ID '.')?ID
		////;
		////
		////WhereClause: // outer joins are function calls which outerJoin = true
		////	'where' condition=Expression
		////;
		////
		////OrderClause:
		////	'order' 'by' orders+=OrderColumn (',' orders +=OrderColumn)*
		////;
		////OrderColumn:
		////	expression = Expression
		////	asc?='asc'?
		////	desc?='desc'?
		////;
		////
		///// ** **************************************************************
		//// *    E X P R E S S I O N
		//// *****************************************************************
		//// * /
		//// 
		////Expression
		////	:
		//////	Literal
		//////	| VariableRefExpression
		//////	| FunctionExpression
		////BooleanExpression
		////	
		///// *	| simple_expression
		////| compound_expression
		////| case_expression
		////| cursor_expression
		////| datetime_expression
		////| function_expression
		////| interval_expression
		////| object_access_expression
		////| scalar_subquery_expression
		////| model_expression
		////| type_constructor_expression
		////| variable_expression
		////	* /
		////	;
		////
		////BooleanOperator :
		//// EqualTo | NotEqualTo | LessThan | GreaterThan | LessEqual | GreaterEqual | Like | Or | And | Is 
		////;
		////
		////Like : 'like';
		////EqualTo : '=' ;
		////NotEqualTo : '!=' | '~=' | '<>' | '^=' ;
		////LessThan : '<';
		////GreaterThan : '>';
		////LessEqual : '<=';
		////GreaterEqual : '>=';
		////Or: 'or';
		////And: 'and';
		////Is: 'is';
		////
		////BooleanExpression returns Expression:
		////  InExpression ({BooleanExpression.left=current} operator=BooleanOperator right=InExpression)*
		////;
		////
		////InExpression returns Expression:
		////	Addition ({InExpression.left=current} 'in' '(' values+=Expression (',' values+=Expression)* ')')?
		////;
		////
		////Addition returns Expression:
		////  StrCombine ({Addition.left=current} operator=('+'|'-') right=StrCombine)*;
		////  
		////StrCombine returns Expression:
		////  Multiplication ({StrCombine.left=current} '||' right=Multiplication)*;
		////  
		////Multiplication returns Expression:
		////  PrimaryExpression ({Multiplication.left=current} operator=('*'|'/') right=PrimaryExpression)*;
		////  
		////PrimaryExpression returns Expression:
		////  Literal | VariableReference | FunctionCall | Negation | '(' BooleanExpression ')';
		////
		////FunctionCall returns Expression
		////	: (schemaName=ID '.')? name=ID
		////	'(' 
		////		((outerJoin?='+') 
		////		| (param+=FunctionParameter (',' param+=FunctionParameter )*))? 
		////	')'
		////	;
		////
		////FunctionParameter
		////	: (parameterName=ID '=>')? nextValue=BooleanExpression
		////;
		////
		////VariableReference
		////	: variablePath+=ID ('.' variablePath+=ID)* 
		////;
		////
		////Negation returns Expression
		////	: 'not' negatedValue=PrimaryExpression
		////;
		////
		///// ** *************************************
		//// *   L I T E R A L S
		//// ** *************************************
		//// * /
		//Literal:
		//	FloatLiteral | IntLiteral | StringLiteral | BooleanLiteral | NullLiteral | {ID} value=[DatasetField|QualifiedName];
		public ParserRule getRule() { return rule; }

		//FloatLiteral | IntLiteral | StringLiteral | BooleanLiteral | NullLiteral | {ID} value=[DatasetField|QualifiedName]
		public Alternatives getAlternatives() { return cAlternatives; }

		//FloatLiteral
		public RuleCall getFloatLiteralParserRuleCall_0() { return cFloatLiteralParserRuleCall_0; }

		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_1() { return cIntLiteralParserRuleCall_1; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_3() { return cBooleanLiteralParserRuleCall_3; }

		//NullLiteral
		public RuleCall getNullLiteralParserRuleCall_4() { return cNullLiteralParserRuleCall_4; }

		//{ID} value=[DatasetField|QualifiedName]
		public Group getGroup_5() { return cGroup_5; }

		//{ID}
		public Action getIDAction_5_0() { return cIDAction_5_0; }

		//value=[DatasetField|QualifiedName]
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//[DatasetField|QualifiedName]
		public CrossReference getValueDatasetFieldCrossReference_5_1_0() { return cValueDatasetFieldCrossReference_5_1_0; }

		//QualifiedName
		public RuleCall getValueDatasetFieldQualifiedNameParserRuleCall_5_1_0_1() { return cValueDatasetFieldQualifiedNameParserRuleCall_5_1_0_1; }
	}

	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		////
		//////SQLLiteral:
		//////	literal=('SQL%ROWCOUNT')
		//////;
		//IntLiteral:
		//	value= //NUMBER
		//	INT;
		public ParserRule getRule() { return rule; }

		//value= //NUMBER
		//INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		////NUMBER
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class FloatLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FloatLiteral:
		//	value=FLOAT;
		public ParserRule getRule() { return rule; }

		//value=FLOAT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0() { return cValueFLOATTerminalRuleCall_0; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//// TODO: Make a boolean out of this.
		//BooleanLiteral:
		//	value=("true" | "false");
		public ParserRule getRule() { return rule; }

		//value=("true" | "false")
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"true" | "false"
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//"true"
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_0_1() { return cValueFalseKeyword_0_1; }
	}

	public class NullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		/// ** *************************************
		// *   END OF SELECT STATEMENT
		// ** *************************************
		// * / //HTML TEXT TAGS
		////General:
		////<B></B>
		////<I></I>
		////<U></U>
		////<FONT size="" color="" face=""></FONT>
		////Formatting:
		////<H1></H1>
		////<H2></H2>
		////<H3></H3>
		////<H4></H4>
		////<H5></H5>
		////<H6></H6>
		////<SUB></SUB>
		////<SUP></SUP>
		////<EM></EM>
		////<STRONG></STRONG>
		////<PRE></PRE>
		////<CODE></CODE>
		////<TT></TT>
		////Layout:
		////<CENTER></CENTER>
		////<BR>
		////<P></P>
		////<DIV></DIV>
		////<SPAN></SPAN>
		////Content:
		////<IMG src="" alt="">
		////<A name="" href=""></A>
		////<INS cite=""></INS>
		////<DEL cite=""></DEL>
		////<IMAGE name="" type=""></IMAGE>
		////Lists:
		////<DL></DL>
		////<UL></UL>
		////<LI></LI>
		////<DT></DT>
		////<DD></DD>
		////Dynamic Text:
		////<VALUE-OF format=""></VALUE-OF>
		////format="HTML"
		////Numbers:
		////format="General Number"
		////format="#,##0.00{RoundingMode=HALF_UP}"
		////format="###0.00%{RoundingMode=HALF_UP}"
		////format="0.00E00{RoundingMode=HALF_UP}"
		////format="###0.00{RoundingMode=HALF_UP}"
		////format="###0.00{RoundingMode=HALF_EVEN}" 
		////format="###0.00{RoundingMode=HALF_DOWN}"
		////format="###0.00{RoundingMode=CEILING}" 
		////format="###0.00{RoundingMode=UNNECESSARY}"
		////format="###0.00{RoundingMode=UP}"
		////format="###0.00{RoundingMode=DOWN}"
		////format="###0.00{RoundingMode=FLOOR}"
		////format="$ #,##0.00;$ (#,##0.00){RoundingMode=HALF_UP}"
		////
		////String:
		//// format=">" Uppercase
		//// format="<" Lowercase
		//// format="^" String with leading whitespace
		//// format="@@@-@@-@@@@"
		////DateTime:
		//// format="d. MMMM y HH:mm:ss z"
		//// ... NullLiteral:
		//	{NullLiteral} "null";
		public ParserRule getRule() { return rule; }

		//{NullLiteral} "null"
		public Group getGroup() { return cGroup; }

		//{NullLiteral}
		public Action getNullLiteralAction_0() { return cNullLiteralAction_0; }

		//"null"
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	
	
	public class ChartWithAxesTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ChartWithAxesType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBarEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBarBarKeyword_0_0 = (Keyword)cBarEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLineEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLineLineKeyword_1_0 = (Keyword)cLineEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAreaEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAreaAreaKeyword_2_0 = (Keyword)cAreaEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ChartWithAxesType returns STRING:
		//	bar | line | area;
		public EnumRule getRule() { return rule; }

		//bar | line | area
		public Alternatives getAlternatives() { return cAlternatives; }

		//bar
		public EnumLiteralDeclaration getBarEnumLiteralDeclaration_0() { return cBarEnumLiteralDeclaration_0; }

		//"bar"
		public Keyword getBarBarKeyword_0_0() { return cBarBarKeyword_0_0; }

		//line
		public EnumLiteralDeclaration getLineEnumLiteralDeclaration_1() { return cLineEnumLiteralDeclaration_1; }

		//"line"
		public Keyword getLineLineKeyword_1_0() { return cLineLineKeyword_1_0; }

		//area
		public EnumLiteralDeclaration getAreaEnumLiteralDeclaration_2() { return cAreaEnumLiteralDeclaration_2; }

		//"area"
		public Keyword getAreaAreaKeyword_2_0() { return cAreaAreaKeyword_2_0; }
	}

	public class ChartWithoutAxesTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ChartWithoutAxesType");
		private final EnumLiteralDeclaration cPieEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPiePieKeyword_0 = (Keyword)cPieEnumLiteralDeclaration.eContents().get(0);
		
		//enum ChartWithoutAxesType returns STRING:
		//	pie;
		public EnumRule getRule() { return rule; }

		//pie
		public EnumLiteralDeclaration getPieEnumLiteralDeclaration() { return cPieEnumLiteralDeclaration; }

		//"pie"
		public Keyword getPiePieKeyword_0() { return cPiePieKeyword_0; }
	}

	public class ChartSubTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ChartSubType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSbsEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSbsSideBySideKeyword_0_0 = (Keyword)cSbsEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStackedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStackedStackedKeyword_1_0 = (Keyword)cStackedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPercentEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPercentPercentStackedKeyword_2_0 = (Keyword)cPercentEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOverlayEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOverlayOverlayKeyword_3_0 = (Keyword)cOverlayEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum ChartSubType:
		//	sbs="side-by-side" | stacked | percent="percent-stacked" | overlay;
		public EnumRule getRule() { return rule; }

		//sbs="side-by-side" | stacked | percent="percent-stacked" | overlay
		public Alternatives getAlternatives() { return cAlternatives; }

		//sbs="side-by-side"
		public EnumLiteralDeclaration getSbsEnumLiteralDeclaration_0() { return cSbsEnumLiteralDeclaration_0; }

		//"side-by-side"
		public Keyword getSbsSideBySideKeyword_0_0() { return cSbsSideBySideKeyword_0_0; }

		//stacked
		public EnumLiteralDeclaration getStackedEnumLiteralDeclaration_1() { return cStackedEnumLiteralDeclaration_1; }

		//"stacked"
		public Keyword getStackedStackedKeyword_1_0() { return cStackedStackedKeyword_1_0; }

		//percent="percent-stacked"
		public EnumLiteralDeclaration getPercentEnumLiteralDeclaration_2() { return cPercentEnumLiteralDeclaration_2; }

		//"percent-stacked"
		public Keyword getPercentPercentStackedKeyword_2_0() { return cPercentPercentStackedKeyword_2_0; }

		//overlay
		public EnumLiteralDeclaration getOverlayEnumLiteralDeclaration_3() { return cOverlayEnumLiteralDeclaration_3; }

		//"overlay"
		public Keyword getOverlayOverlayKeyword_3_0() { return cOverlayOverlayKeyword_3_0; }
	}

	public class PositionTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PositionType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNorthEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNorthTopKeyword_0_0 = (Keyword)cNorthEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSouthEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSouthBottomKeyword_1_0 = (Keyword)cSouthEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWestEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWestLeftKeyword_2_0 = (Keyword)cWestEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cEastEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cEastRightKeyword_3_0 = (Keyword)cEastEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum PositionType:
		//	North="top" | South="bottom" | West="left" | East="right";
		public EnumRule getRule() { return rule; }

		//North="top" | South="bottom" | West="left" | East="right"
		public Alternatives getAlternatives() { return cAlternatives; }

		//North="top"
		public EnumLiteralDeclaration getNorthEnumLiteralDeclaration_0() { return cNorthEnumLiteralDeclaration_0; }

		//"top"
		public Keyword getNorthTopKeyword_0_0() { return cNorthTopKeyword_0_0; }

		//South="bottom"
		public EnumLiteralDeclaration getSouthEnumLiteralDeclaration_1() { return cSouthEnumLiteralDeclaration_1; }

		//"bottom"
		public Keyword getSouthBottomKeyword_1_0() { return cSouthBottomKeyword_1_0; }

		//West="left"
		public EnumLiteralDeclaration getWestEnumLiteralDeclaration_2() { return cWestEnumLiteralDeclaration_2; }

		//"left"
		public Keyword getWestLeftKeyword_2_0() { return cWestLeftKeyword_2_0; }

		//East="right"
		public EnumLiteralDeclaration getEastEnumLiteralDeclaration_3() { return cEastEnumLiteralDeclaration_3; }

		//"right"
		public Keyword getEastRightKeyword_3_0() { return cEastRightKeyword_3_0; }
	}

	public class OrientationTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OrientationType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVerticalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVerticalVerticalKeyword_0_0 = (Keyword)cVerticalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHorizontalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHorizontalHorizontalKeyword_1_0 = (Keyword)cHorizontalEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum OrientationType:
		//	vertical | horizontal;
		public EnumRule getRule() { return rule; }

		//vertical | horizontal
		public Alternatives getAlternatives() { return cAlternatives; }

		//vertical
		public EnumLiteralDeclaration getVerticalEnumLiteralDeclaration_0() { return cVerticalEnumLiteralDeclaration_0; }

		//"vertical"
		public Keyword getVerticalVerticalKeyword_0_0() { return cVerticalVerticalKeyword_0_0; }

		//horizontal
		public EnumLiteralDeclaration getHorizontalEnumLiteralDeclaration_1() { return cHorizontalEnumLiteralDeclaration_1; }

		//"horizontal"
		public Keyword getHorizontalHorizontalKeyword_1_0() { return cHorizontalHorizontalKeyword_1_0; }
	}

	public class SizeUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SizeUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMMediumKeyword_0_0 = (Keyword)cMEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLLargeKeyword_1_0 = (Keyword)cLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLrEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLrLargerKeyword_2_0 = (Keyword)cLrEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cXLEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cXLXLargeKeyword_3_0 = (Keyword)cXLEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cXXLEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cXXLXxLargeKeyword_4_0 = (Keyword)cXXLEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSSmallKeyword_5_0 = (Keyword)cSEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cSrEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cSrSmallerKeyword_6_0 = (Keyword)cSrEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cXSEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cXSXSmallKeyword_7_0 = (Keyword)cXSEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cXXSEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cXXSXxSmallKeyword_8_0 = (Keyword)cXXSEnumLiteralDeclaration_8.eContents().get(0);
		
		/// ***************************************
		// *   E N U M S
		// *************************************** / enum SizeUnit:
		//	M="medium" | L="large" | Lr="larger" | XL="x-large" | XXL="xx-large" | S="small" | Sr="smaller" | XS="x-small" |
		//	XXS="xx-small";
		public EnumRule getRule() { return rule; }

		//M="medium" | L="large" | Lr="larger" | XL="x-large" | XXL="xx-large" | S="small" | Sr="smaller" | XS="x-small" |
		//XXS="xx-small"
		public Alternatives getAlternatives() { return cAlternatives; }

		//M="medium"
		public EnumLiteralDeclaration getMEnumLiteralDeclaration_0() { return cMEnumLiteralDeclaration_0; }

		//"medium"
		public Keyword getMMediumKeyword_0_0() { return cMMediumKeyword_0_0; }

		//L="large"
		public EnumLiteralDeclaration getLEnumLiteralDeclaration_1() { return cLEnumLiteralDeclaration_1; }

		//"large"
		public Keyword getLLargeKeyword_1_0() { return cLLargeKeyword_1_0; }

		//Lr="larger"
		public EnumLiteralDeclaration getLrEnumLiteralDeclaration_2() { return cLrEnumLiteralDeclaration_2; }

		//"larger"
		public Keyword getLrLargerKeyword_2_0() { return cLrLargerKeyword_2_0; }

		//XL="x-large"
		public EnumLiteralDeclaration getXLEnumLiteralDeclaration_3() { return cXLEnumLiteralDeclaration_3; }

		//"x-large"
		public Keyword getXLXLargeKeyword_3_0() { return cXLXLargeKeyword_3_0; }

		//XXL="xx-large"
		public EnumLiteralDeclaration getXXLEnumLiteralDeclaration_4() { return cXXLEnumLiteralDeclaration_4; }

		//"xx-large"
		public Keyword getXXLXxLargeKeyword_4_0() { return cXXLXxLargeKeyword_4_0; }

		//S="small"
		public EnumLiteralDeclaration getSEnumLiteralDeclaration_5() { return cSEnumLiteralDeclaration_5; }

		//"small"
		public Keyword getSSmallKeyword_5_0() { return cSSmallKeyword_5_0; }

		//Sr="smaller"
		public EnumLiteralDeclaration getSrEnumLiteralDeclaration_6() { return cSrEnumLiteralDeclaration_6; }

		//"smaller"
		public Keyword getSrSmallerKeyword_6_0() { return cSrSmallerKeyword_6_0; }

		//XS="x-small"
		public EnumLiteralDeclaration getXSEnumLiteralDeclaration_7() { return cXSEnumLiteralDeclaration_7; }

		//"x-small"
		public Keyword getXSXSmallKeyword_7_0() { return cXSXSmallKeyword_7_0; }

		//XXS="xx-small"
		public EnumLiteralDeclaration getXXSEnumLiteralDeclaration_8() { return cXXSEnumLiteralDeclaration_8; }

		//"xx-small"
		public Keyword getXXSXxSmallKeyword_8_0() { return cXXSXxSmallKeyword_8_0; }
	}

	public class LengthUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LengthUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCmEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCmCmKeyword_0_0 = (Keyword)cCmEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cEmsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cEmsEmsKeyword_1_0 = (Keyword)cEmsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cExsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cExsExsKeyword_2_0 = (Keyword)cExsEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cInInKeyword_3_0 = (Keyword)cInEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMmEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMmMmKeyword_4_0 = (Keyword)cMmEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cPcEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cPcPcKeyword_5_0 = (Keyword)cPcEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPtEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPtPtKeyword_6_0 = (Keyword)cPtEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cPxEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cPxPxKeyword_7_0 = (Keyword)cPxEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum LengthUnit:
		//	cm | ems | exs | in | mm | pc | pt | px;
		public EnumRule getRule() { return rule; }

		//cm | ems | exs | in | mm | pc | pt | px
		public Alternatives getAlternatives() { return cAlternatives; }

		//cm
		public EnumLiteralDeclaration getCmEnumLiteralDeclaration_0() { return cCmEnumLiteralDeclaration_0; }

		//"cm"
		public Keyword getCmCmKeyword_0_0() { return cCmCmKeyword_0_0; }

		//ems
		public EnumLiteralDeclaration getEmsEnumLiteralDeclaration_1() { return cEmsEnumLiteralDeclaration_1; }

		//"ems"
		public Keyword getEmsEmsKeyword_1_0() { return cEmsEmsKeyword_1_0; }

		//exs
		public EnumLiteralDeclaration getExsEnumLiteralDeclaration_2() { return cExsEnumLiteralDeclaration_2; }

		//"exs"
		public Keyword getExsExsKeyword_2_0() { return cExsExsKeyword_2_0; }

		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_3() { return cInEnumLiteralDeclaration_3; }

		//"in"
		public Keyword getInInKeyword_3_0() { return cInInKeyword_3_0; }

		//mm
		public EnumLiteralDeclaration getMmEnumLiteralDeclaration_4() { return cMmEnumLiteralDeclaration_4; }

		//"mm"
		public Keyword getMmMmKeyword_4_0() { return cMmMmKeyword_4_0; }

		//pc
		public EnumLiteralDeclaration getPcEnumLiteralDeclaration_5() { return cPcEnumLiteralDeclaration_5; }

		//"pc"
		public Keyword getPcPcKeyword_5_0() { return cPcPcKeyword_5_0; }

		//pt
		public EnumLiteralDeclaration getPtEnumLiteralDeclaration_6() { return cPtEnumLiteralDeclaration_6; }

		//"pt"
		public Keyword getPtPtKeyword_6_0() { return cPtPtKeyword_6_0; }

		//px
		public EnumLiteralDeclaration getPxEnumLiteralDeclaration_7() { return cPxEnumLiteralDeclaration_7; }

		//"px"
		public Keyword getPxPxKeyword_7_0() { return cPxPxKeyword_7_0; }
	}

	public class HalignmentTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "HalignmentType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLeftLeftKeyword_0_0 = (Keyword)cLeftEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCenterEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCenterCenterKeyword_1_0 = (Keyword)cCenterEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRightRightKeyword_2_0 = (Keyword)cRightEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cJustifyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cJustifyJustifyKeyword_3_0 = (Keyword)cJustifyEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum HalignmentType:
		//	left | center | right | justify;
		public EnumRule getRule() { return rule; }

		//left | center | right | justify
		public Alternatives getAlternatives() { return cAlternatives; }

		//left
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_0() { return cLeftEnumLiteralDeclaration_0; }

		//"left"
		public Keyword getLeftLeftKeyword_0_0() { return cLeftLeftKeyword_0_0; }

		//center
		public EnumLiteralDeclaration getCenterEnumLiteralDeclaration_1() { return cCenterEnumLiteralDeclaration_1; }

		//"center"
		public Keyword getCenterCenterKeyword_1_0() { return cCenterCenterKeyword_1_0; }

		//right
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_2() { return cRightEnumLiteralDeclaration_2; }

		//"right"
		public Keyword getRightRightKeyword_2_0() { return cRightRightKeyword_2_0; }

		//justify
		public EnumLiteralDeclaration getJustifyEnumLiteralDeclaration_3() { return cJustifyEnumLiteralDeclaration_3; }

		//"justify"
		public Keyword getJustifyJustifyKeyword_3_0() { return cJustifyJustifyKeyword_3_0; }
	}

	public class ValignmentTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ValignmentType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBottomEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBottomBottomKeyword_0_0 = (Keyword)cBottomEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMiddleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMiddleMiddleKeyword_1_0 = (Keyword)cMiddleEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTopEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTopTopKeyword_2_0 = (Keyword)cTopEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ValignmentType:
		//	bottom | middle | top;
		public EnumRule getRule() { return rule; }

		//bottom | middle | top
		public Alternatives getAlternatives() { return cAlternatives; }

		//bottom
		public EnumLiteralDeclaration getBottomEnumLiteralDeclaration_0() { return cBottomEnumLiteralDeclaration_0; }

		//"bottom"
		public Keyword getBottomBottomKeyword_0_0() { return cBottomBottomKeyword_0_0; }

		//middle
		public EnumLiteralDeclaration getMiddleEnumLiteralDeclaration_1() { return cMiddleEnumLiteralDeclaration_1; }

		//"middle"
		public Keyword getMiddleMiddleKeyword_1_0() { return cMiddleMiddleKeyword_1_0; }

		//top
		public EnumLiteralDeclaration getTopEnumLiteralDeclaration_2() { return cTopEnumLiteralDeclaration_2; }

		//"top"
		public Keyword getTopTopKeyword_2_0() { return cTopTopKeyword_2_0; }
	}

	public class WhitespaceTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "WhitespaceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNowrapEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNowrapNoWrappingKeyword_0_0 = (Keyword)cNowrapEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNormalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNormalNormalKeyword_1_0 = (Keyword)cNormalEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPreEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPrePreformattedKeyword_2_0 = (Keyword)cPreEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum WhitespaceType:
		//	nowrap="no-wrapping" | normal | pre="preformatted";
		public EnumRule getRule() { return rule; }

		//nowrap="no-wrapping" | normal | pre="preformatted"
		public Alternatives getAlternatives() { return cAlternatives; }

		//nowrap="no-wrapping"
		public EnumLiteralDeclaration getNowrapEnumLiteralDeclaration_0() { return cNowrapEnumLiteralDeclaration_0; }

		//"no-wrapping"
		public Keyword getNowrapNoWrappingKeyword_0_0() { return cNowrapNoWrappingKeyword_0_0; }

		//normal
		public EnumLiteralDeclaration getNormalEnumLiteralDeclaration_1() { return cNormalEnumLiteralDeclaration_1; }

		//"normal"
		public Keyword getNormalNormalKeyword_1_0() { return cNormalNormalKeyword_1_0; }

		//pre="preformatted"
		public EnumLiteralDeclaration getPreEnumLiteralDeclaration_2() { return cPreEnumLiteralDeclaration_2; }

		//"preformatted"
		public Keyword getPrePreformattedKeyword_2_0() { return cPrePreformattedKeyword_2_0; }
	}

	public class DisplayTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DisplayType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBlockEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBlockBlockKeyword_0_0 = (Keyword)cBlockEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInlineEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInlineInlineKeyword_1_0 = (Keyword)cInlineEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNoneEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNoneNoKeyword_2_0 = (Keyword)cNoneEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DisplayType:
		//	block | inline | none="no";
		public EnumRule getRule() { return rule; }

		//block | inline | none="no"
		public Alternatives getAlternatives() { return cAlternatives; }

		//block
		public EnumLiteralDeclaration getBlockEnumLiteralDeclaration_0() { return cBlockEnumLiteralDeclaration_0; }

		//"block"
		public Keyword getBlockBlockKeyword_0_0() { return cBlockBlockKeyword_0_0; }

		//inline
		public EnumLiteralDeclaration getInlineEnumLiteralDeclaration_1() { return cInlineEnumLiteralDeclaration_1; }

		//"inline"
		public Keyword getInlineInlineKeyword_1_0() { return cInlineInlineKeyword_1_0; }

		//none="no"
		public EnumLiteralDeclaration getNoneEnumLiteralDeclaration_2() { return cNoneEnumLiteralDeclaration_2; }

		//"no"
		public Keyword getNoneNoKeyword_2_0() { return cNoneNoKeyword_2_0; }
	}

	public class BorderLineStyleTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BorderLineStyleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSolidEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSolidSolidKeyword_0_0 = (Keyword)cSolidEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDottedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDottedDottedKeyword_1_0 = (Keyword)cDottedEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDashedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDashedDashedKeyword_2_0 = (Keyword)cDashedEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDoubleDoubleKeyword_3_0 = (Keyword)cDoubleEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum BorderLineStyleType:
		//	solid | dotted | dashed | double;
		public EnumRule getRule() { return rule; }

		//solid | dotted | dashed | double
		public Alternatives getAlternatives() { return cAlternatives; }

		//solid
		public EnumLiteralDeclaration getSolidEnumLiteralDeclaration_0() { return cSolidEnumLiteralDeclaration_0; }

		//"solid"
		public Keyword getSolidSolidKeyword_0_0() { return cSolidSolidKeyword_0_0; }

		//dotted
		public EnumLiteralDeclaration getDottedEnumLiteralDeclaration_1() { return cDottedEnumLiteralDeclaration_1; }

		//"dotted"
		public Keyword getDottedDottedKeyword_1_0() { return cDottedDottedKeyword_1_0; }

		//dashed
		public EnumLiteralDeclaration getDashedEnumLiteralDeclaration_2() { return cDashedEnumLiteralDeclaration_2; }

		//"dashed"
		public Keyword getDashedDashedKeyword_2_0() { return cDashedDashedKeyword_2_0; }

		//double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_3() { return cDoubleEnumLiteralDeclaration_3; }

		//"double"
		public Keyword getDoubleDoubleKeyword_3_0() { return cDoubleDoubleKeyword_3_0; }
	}

	public class WidthTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "WidthType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cThinEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cThinThinKeyword_0_0 = (Keyword)cThinEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMediumEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMediumMediumKeyword_1_0 = (Keyword)cMediumEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cThickEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cThickThickKeyword_2_0 = (Keyword)cThickEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum WidthType:
		//	thin | medium | thick;
		public EnumRule getRule() { return rule; }

		//thin | medium | thick
		public Alternatives getAlternatives() { return cAlternatives; }

		//thin
		public EnumLiteralDeclaration getThinEnumLiteralDeclaration_0() { return cThinEnumLiteralDeclaration_0; }

		//"thin"
		public Keyword getThinThinKeyword_0_0() { return cThinThinKeyword_0_0; }

		//medium
		public EnumLiteralDeclaration getMediumEnumLiteralDeclaration_1() { return cMediumEnumLiteralDeclaration_1; }

		//"medium"
		public Keyword getMediumMediumKeyword_1_0() { return cMediumMediumKeyword_1_0; }

		//thick
		public EnumLiteralDeclaration getThickEnumLiteralDeclaration_2() { return cThickEnumLiteralDeclaration_2; }

		//"thick"
		public Keyword getThickThickKeyword_2_0() { return cThickThickKeyword_2_0; }
	}

	public class OutputFormatTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "OutputFormatType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cXlsxEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cXlsxXlsxKeyword_0_0 = (Keyword)cXlsxEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPostscriptEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPostscriptPostscriptKeyword_1_0 = (Keyword)cPostscriptEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDocxEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDocxDocxKeyword_2_0 = (Keyword)cDocxEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPptxEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPptxPptxKeyword_3_0 = (Keyword)cPptxEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPdfEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPdfPdfKeyword_4_0 = (Keyword)cPdfEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cXlsEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cXlsXlsKeyword_5_0 = (Keyword)cXlsEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cPptEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cPptPptKeyword_6_0 = (Keyword)cPptEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDocEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDocDocKeyword_7_0 = (Keyword)cDocEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cHtmlEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cHtmlHtmlKeyword_8_0 = (Keyword)cHtmlEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cOdpEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cOdpOdpKeyword_9_0 = (Keyword)cOdpEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cOdtEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cOdtOdtKeyword_10_0 = (Keyword)cOdtEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cOdsEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cOdsOdsKeyword_11_0 = (Keyword)cOdsEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum OutputFormatType:
		//	xlsx | postscript | docx | pptx | pdf | xls | ppt | doc | html | odp | odt | ods;
		public EnumRule getRule() { return rule; }

		//xlsx | postscript | docx | pptx | pdf | xls | ppt | doc | html | odp | odt | ods
		public Alternatives getAlternatives() { return cAlternatives; }

		//xlsx
		public EnumLiteralDeclaration getXlsxEnumLiteralDeclaration_0() { return cXlsxEnumLiteralDeclaration_0; }

		//"xlsx"
		public Keyword getXlsxXlsxKeyword_0_0() { return cXlsxXlsxKeyword_0_0; }

		//postscript
		public EnumLiteralDeclaration getPostscriptEnumLiteralDeclaration_1() { return cPostscriptEnumLiteralDeclaration_1; }

		//"postscript"
		public Keyword getPostscriptPostscriptKeyword_1_0() { return cPostscriptPostscriptKeyword_1_0; }

		//docx
		public EnumLiteralDeclaration getDocxEnumLiteralDeclaration_2() { return cDocxEnumLiteralDeclaration_2; }

		//"docx"
		public Keyword getDocxDocxKeyword_2_0() { return cDocxDocxKeyword_2_0; }

		//pptx
		public EnumLiteralDeclaration getPptxEnumLiteralDeclaration_3() { return cPptxEnumLiteralDeclaration_3; }

		//"pptx"
		public Keyword getPptxPptxKeyword_3_0() { return cPptxPptxKeyword_3_0; }

		//pdf
		public EnumLiteralDeclaration getPdfEnumLiteralDeclaration_4() { return cPdfEnumLiteralDeclaration_4; }

		//"pdf"
		public Keyword getPdfPdfKeyword_4_0() { return cPdfPdfKeyword_4_0; }

		//xls
		public EnumLiteralDeclaration getXlsEnumLiteralDeclaration_5() { return cXlsEnumLiteralDeclaration_5; }

		//"xls"
		public Keyword getXlsXlsKeyword_5_0() { return cXlsXlsKeyword_5_0; }

		//ppt
		public EnumLiteralDeclaration getPptEnumLiteralDeclaration_6() { return cPptEnumLiteralDeclaration_6; }

		//"ppt"
		public Keyword getPptPptKeyword_6_0() { return cPptPptKeyword_6_0; }

		//doc
		public EnumLiteralDeclaration getDocEnumLiteralDeclaration_7() { return cDocEnumLiteralDeclaration_7; }

		//"doc"
		public Keyword getDocDocKeyword_7_0() { return cDocDocKeyword_7_0; }

		//html
		public EnumLiteralDeclaration getHtmlEnumLiteralDeclaration_8() { return cHtmlEnumLiteralDeclaration_8; }

		//"html"
		public Keyword getHtmlHtmlKeyword_8_0() { return cHtmlHtmlKeyword_8_0; }

		//odp
		public EnumLiteralDeclaration getOdpEnumLiteralDeclaration_9() { return cOdpEnumLiteralDeclaration_9; }

		//"odp"
		public Keyword getOdpOdpKeyword_9_0() { return cOdpOdpKeyword_9_0; }

		//odt
		public EnumLiteralDeclaration getOdtEnumLiteralDeclaration_10() { return cOdtEnumLiteralDeclaration_10; }

		//"odt"
		public Keyword getOdtOdtKeyword_10_0() { return cOdtOdtKeyword_10_0; }

		//ods
		public EnumLiteralDeclaration getOdsEnumLiteralDeclaration_11() { return cOdsEnumLiteralDeclaration_11; }

		//"ods"
		public Keyword getOdsOdsKeyword_11_0() { return cOdsOdsKeyword_11_0; }
	}

	public class PageBreakTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PageBreakType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPageBreakAfterEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPageBreakAfterAfterKeyword_0_0 = (Keyword)cPageBreakAfterEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPageBreakBeforeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPageBreakBeforeBeforeKeyword_1_0 = (Keyword)cPageBreakBeforeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPageBreakInsideEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPageBreakInsideInsideKeyword_2_0 = (Keyword)cPageBreakInsideEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PageBreakType:
		//	pageBreakAfter="after" | pageBreakBefore="before" | pageBreakInside="inside";
		public EnumRule getRule() { return rule; }

		//pageBreakAfter="after" | pageBreakBefore="before" | pageBreakInside="inside"
		public Alternatives getAlternatives() { return cAlternatives; }

		//pageBreakAfter="after"
		public EnumLiteralDeclaration getPageBreakAfterEnumLiteralDeclaration_0() { return cPageBreakAfterEnumLiteralDeclaration_0; }

		//"after"
		public Keyword getPageBreakAfterAfterKeyword_0_0() { return cPageBreakAfterAfterKeyword_0_0; }

		//pageBreakBefore="before"
		public EnumLiteralDeclaration getPageBreakBeforeEnumLiteralDeclaration_1() { return cPageBreakBeforeEnumLiteralDeclaration_1; }

		//"before"
		public Keyword getPageBreakBeforeBeforeKeyword_1_0() { return cPageBreakBeforeBeforeKeyword_1_0; }

		//pageBreakInside="inside"
		public EnumLiteralDeclaration getPageBreakInsideEnumLiteralDeclaration_2() { return cPageBreakInsideEnumLiteralDeclaration_2; }

		//"inside"
		public Keyword getPageBreakInsideInsideKeyword_2_0() { return cPageBreakInsideInsideKeyword_2_0; }
	}

	public class PageBreakValueElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "PageBreakValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAutoEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAutoAutoKeyword_0_0 = (Keyword)cAutoEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAlwaysEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAlwaysAlwaysKeyword_1_0 = (Keyword)cAlwaysEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAvoidEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAvoidAvoidKeyword_2_0 = (Keyword)cAvoidEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum PageBreakValue:
		//	auto | always | avoid;
		public EnumRule getRule() { return rule; }

		//auto | always | avoid
		public Alternatives getAlternatives() { return cAlternatives; }

		//auto
		public EnumLiteralDeclaration getAutoEnumLiteralDeclaration_0() { return cAutoEnumLiteralDeclaration_0; }

		//"auto"
		public Keyword getAutoAutoKeyword_0_0() { return cAutoAutoKeyword_0_0; }

		//always
		public EnumLiteralDeclaration getAlwaysEnumLiteralDeclaration_1() { return cAlwaysEnumLiteralDeclaration_1; }

		//"always"
		public Keyword getAlwaysAlwaysKeyword_1_0() { return cAlwaysAlwaysKeyword_1_0; }

		//avoid
		public EnumLiteralDeclaration getAvoidEnumLiteralDeclaration_2() { return cAvoidEnumLiteralDeclaration_2; }

		//"avoid"
		public Keyword getAvoidAvoidKeyword_2_0() { return cAvoidAvoidKeyword_2_0; }
	}

	public class SortTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "SortType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAscEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAscAscKeyword_0_0 = (Keyword)cAscEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDescEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDescDescKeyword_1_0 = (Keyword)cDescEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum SortType:
		//	asc | desc;
		public EnumRule getRule() { return rule; }

		//asc | desc
		public Alternatives getAlternatives() { return cAlternatives; }

		//asc
		public EnumLiteralDeclaration getAscEnumLiteralDeclaration_0() { return cAscEnumLiteralDeclaration_0; }

		//"asc"
		public Keyword getAscAscKeyword_0_0() { return cAscAscKeyword_0_0; }

		//desc
		public EnumLiteralDeclaration getDescEnumLiteralDeclaration_1() { return cDescEnumLiteralDeclaration_1; }

		//"desc"
		public Keyword getDescDescKeyword_1_0() { return cDescDescKeyword_1_0; }
	}

	public class BorderTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BorderType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRRightKeyword_0_0 = (Keyword)cREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLLeftKeyword_1_0 = (Keyword)cLEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTTopKeyword_2_0 = (Keyword)cTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBBottomKeyword_3_0 = (Keyword)cBEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum BorderType:
		//	R="right" | L="left" | T="top" | B="bottom";
		public EnumRule getRule() { return rule; }

		//R="right" | L="left" | T="top" | B="bottom"
		public Alternatives getAlternatives() { return cAlternatives; }

		//R="right"
		public EnumLiteralDeclaration getREnumLiteralDeclaration_0() { return cREnumLiteralDeclaration_0; }

		//"right"
		public Keyword getRRightKeyword_0_0() { return cRRightKeyword_0_0; }

		//L="left"
		public EnumLiteralDeclaration getLEnumLiteralDeclaration_1() { return cLEnumLiteralDeclaration_1; }

		//"left"
		public Keyword getLLeftKeyword_1_0() { return cLLeftKeyword_1_0; }

		//T="top"
		public EnumLiteralDeclaration getTEnumLiteralDeclaration_2() { return cTEnumLiteralDeclaration_2; }

		//"top"
		public Keyword getTTopKeyword_2_0() { return cTTopKeyword_2_0; }

		//B="bottom"
		public EnumLiteralDeclaration getBEnumLiteralDeclaration_3() { return cBEnumLiteralDeclaration_3; }

		//"bottom"
		public Keyword getBBottomKeyword_3_0() { return cBBottomKeyword_3_0; }
	}

	public class TargetTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TargetType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBlankEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBlankBlankKeyword_0_0 = (Keyword)cBlankEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cParentEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cParentParentKeyword_1_0 = (Keyword)cParentEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSelfEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSelfSelfKeyword_2_0 = (Keyword)cSelfEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cTopEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cTopTopKeyword_3_0 = (Keyword)cTopEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TargetType:
		//	Blank="blank" | Parent="parent" | Self="self" | Top="top";
		public EnumRule getRule() { return rule; }

		//Blank="blank" | Parent="parent" | Self="self" | Top="top"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Blank="blank"
		public EnumLiteralDeclaration getBlankEnumLiteralDeclaration_0() { return cBlankEnumLiteralDeclaration_0; }

		//"blank"
		public Keyword getBlankBlankKeyword_0_0() { return cBlankBlankKeyword_0_0; }

		//Parent="parent"
		public EnumLiteralDeclaration getParentEnumLiteralDeclaration_1() { return cParentEnumLiteralDeclaration_1; }

		//"parent"
		public Keyword getParentParentKeyword_1_0() { return cParentParentKeyword_1_0; }

		//Self="self"
		public EnumLiteralDeclaration getSelfEnumLiteralDeclaration_2() { return cSelfEnumLiteralDeclaration_2; }

		//"self"
		public Keyword getSelfSelfKeyword_2_0() { return cSelfSelfKeyword_2_0; }

		//Top="top"
		public EnumLiteralDeclaration getTopEnumLiteralDeclaration_3() { return cTopEnumLiteralDeclaration_3; }

		//"top"
		public Keyword getTopTopKeyword_3_0() { return cTopTopKeyword_3_0; }
	}

	public class DrillThroughTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DrillThroughType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNewWindowEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNewWindowNewWindowKeyword_0_0 = (Keyword)cNewWindowEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSameFrameEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSameFrameSameFrameKeyword_1_0 = (Keyword)cSameFrameEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cParentFrameEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cParentFrameParentFrameKeyword_2_0 = (Keyword)cParentFrameEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cWholePageEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cWholePageWholePageKeyword_3_0 = (Keyword)cWholePageEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum DrillThroughType:
		//	NewWindow="new-window" | SameFrame="same-frame" | ParentFrame="parent-frame" | WholePage="whole-page";
		public EnumRule getRule() { return rule; }

		//NewWindow="new-window" | SameFrame="same-frame" | ParentFrame="parent-frame" | WholePage="whole-page"
		public Alternatives getAlternatives() { return cAlternatives; }

		//NewWindow="new-window"
		public EnumLiteralDeclaration getNewWindowEnumLiteralDeclaration_0() { return cNewWindowEnumLiteralDeclaration_0; }

		//"new-window"
		public Keyword getNewWindowNewWindowKeyword_0_0() { return cNewWindowNewWindowKeyword_0_0; }

		//SameFrame="same-frame"
		public EnumLiteralDeclaration getSameFrameEnumLiteralDeclaration_1() { return cSameFrameEnumLiteralDeclaration_1; }

		//"same-frame"
		public Keyword getSameFrameSameFrameKeyword_1_0() { return cSameFrameSameFrameKeyword_1_0; }

		//ParentFrame="parent-frame"
		public EnumLiteralDeclaration getParentFrameEnumLiteralDeclaration_2() { return cParentFrameEnumLiteralDeclaration_2; }

		//"parent-frame"
		public Keyword getParentFrameParentFrameKeyword_2_0() { return cParentFrameParentFrameKeyword_2_0; }

		//WholePage="whole-page"
		public EnumLiteralDeclaration getWholePageEnumLiteralDeclaration_3() { return cWholePageEnumLiteralDeclaration_3; }

		//"whole-page"
		public Keyword getWholePageWholePageKeyword_3_0() { return cWholePageWholePageKeyword_3_0; }
	}

	public class ColorTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ColorType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAquaEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAquaAquaKeyword_0_0 = (Keyword)cAquaEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBlueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBlueBlueKeyword_1_0 = (Keyword)cBlueEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBlackEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBlackBlackKeyword_2_0 = (Keyword)cBlackEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFuchsiaEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFuchsiaFuchsiaKeyword_3_0 = (Keyword)cFuchsiaEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGrayEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGrayGrayKeyword_4_0 = (Keyword)cGrayEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGreenEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGreenGreenKeyword_5_0 = (Keyword)cGreenEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLimeEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLimeLimeKeyword_6_0 = (Keyword)cLimeEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cMaroonEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cMaroonMaroonKeyword_7_0 = (Keyword)cMaroonEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cNavyEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cNavyNavyKeyword_8_0 = (Keyword)cNavyEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cOliveEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cOliveOliveKeyword_9_0 = (Keyword)cOliveEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cOrangeEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cOrangeOrangeKeyword_10_0 = (Keyword)cOrangeEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cPurpleEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cPurplePurpleKeyword_11_0 = (Keyword)cPurpleEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cRedEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cRedRedKeyword_12_0 = (Keyword)cRedEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cSilverEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cSilverSilverKeyword_13_0 = (Keyword)cSilverEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cTealEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cTealTealKeyword_14_0 = (Keyword)cTealEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cYellowEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cYellowYellowKeyword_15_0 = (Keyword)cYellowEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cWhiteEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cWhiteWhiteKeyword_16_0 = (Keyword)cWhiteEnumLiteralDeclaration_16.eContents().get(0);
		
		//enum ColorType:
		//	aqua | blue | black | fuchsia | gray | green | lime | maroon | navy | olive | orange | purple | red | silver | teal |
		//	yellow | white;
		public EnumRule getRule() { return rule; }

		//aqua | blue | black | fuchsia | gray | green | lime | maroon | navy | olive | orange | purple | red | silver | teal |
		//yellow | white
		public Alternatives getAlternatives() { return cAlternatives; }

		//aqua
		public EnumLiteralDeclaration getAquaEnumLiteralDeclaration_0() { return cAquaEnumLiteralDeclaration_0; }

		//"aqua"
		public Keyword getAquaAquaKeyword_0_0() { return cAquaAquaKeyword_0_0; }

		//blue
		public EnumLiteralDeclaration getBlueEnumLiteralDeclaration_1() { return cBlueEnumLiteralDeclaration_1; }

		//"blue"
		public Keyword getBlueBlueKeyword_1_0() { return cBlueBlueKeyword_1_0; }

		//black
		public EnumLiteralDeclaration getBlackEnumLiteralDeclaration_2() { return cBlackEnumLiteralDeclaration_2; }

		//"black"
		public Keyword getBlackBlackKeyword_2_0() { return cBlackBlackKeyword_2_0; }

		//fuchsia
		public EnumLiteralDeclaration getFuchsiaEnumLiteralDeclaration_3() { return cFuchsiaEnumLiteralDeclaration_3; }

		//"fuchsia"
		public Keyword getFuchsiaFuchsiaKeyword_3_0() { return cFuchsiaFuchsiaKeyword_3_0; }

		//gray
		public EnumLiteralDeclaration getGrayEnumLiteralDeclaration_4() { return cGrayEnumLiteralDeclaration_4; }

		//"gray"
		public Keyword getGrayGrayKeyword_4_0() { return cGrayGrayKeyword_4_0; }

		//green
		public EnumLiteralDeclaration getGreenEnumLiteralDeclaration_5() { return cGreenEnumLiteralDeclaration_5; }

		//"green"
		public Keyword getGreenGreenKeyword_5_0() { return cGreenGreenKeyword_5_0; }

		//lime
		public EnumLiteralDeclaration getLimeEnumLiteralDeclaration_6() { return cLimeEnumLiteralDeclaration_6; }

		//"lime"
		public Keyword getLimeLimeKeyword_6_0() { return cLimeLimeKeyword_6_0; }

		//maroon
		public EnumLiteralDeclaration getMaroonEnumLiteralDeclaration_7() { return cMaroonEnumLiteralDeclaration_7; }

		//"maroon"
		public Keyword getMaroonMaroonKeyword_7_0() { return cMaroonMaroonKeyword_7_0; }

		//navy
		public EnumLiteralDeclaration getNavyEnumLiteralDeclaration_8() { return cNavyEnumLiteralDeclaration_8; }

		//"navy"
		public Keyword getNavyNavyKeyword_8_0() { return cNavyNavyKeyword_8_0; }

		//olive
		public EnumLiteralDeclaration getOliveEnumLiteralDeclaration_9() { return cOliveEnumLiteralDeclaration_9; }

		//"olive"
		public Keyword getOliveOliveKeyword_9_0() { return cOliveOliveKeyword_9_0; }

		//orange
		public EnumLiteralDeclaration getOrangeEnumLiteralDeclaration_10() { return cOrangeEnumLiteralDeclaration_10; }

		//"orange"
		public Keyword getOrangeOrangeKeyword_10_0() { return cOrangeOrangeKeyword_10_0; }

		//purple
		public EnumLiteralDeclaration getPurpleEnumLiteralDeclaration_11() { return cPurpleEnumLiteralDeclaration_11; }

		//"purple"
		public Keyword getPurplePurpleKeyword_11_0() { return cPurplePurpleKeyword_11_0; }

		//red
		public EnumLiteralDeclaration getRedEnumLiteralDeclaration_12() { return cRedEnumLiteralDeclaration_12; }

		//"red"
		public Keyword getRedRedKeyword_12_0() { return cRedRedKeyword_12_0; }

		//silver
		public EnumLiteralDeclaration getSilverEnumLiteralDeclaration_13() { return cSilverEnumLiteralDeclaration_13; }

		//"silver"
		public Keyword getSilverSilverKeyword_13_0() { return cSilverSilverKeyword_13_0; }

		//teal
		public EnumLiteralDeclaration getTealEnumLiteralDeclaration_14() { return cTealEnumLiteralDeclaration_14; }

		//"teal"
		public Keyword getTealTealKeyword_14_0() { return cTealTealKeyword_14_0; }

		//yellow
		public EnumLiteralDeclaration getYellowEnumLiteralDeclaration_15() { return cYellowEnumLiteralDeclaration_15; }

		//"yellow"
		public Keyword getYellowYellowKeyword_15_0() { return cYellowYellowKeyword_15_0; }

		//white
		public EnumLiteralDeclaration getWhiteEnumLiteralDeclaration_16() { return cWhiteEnumLiteralDeclaration_16; }

		//"white"
		public Keyword getWhiteWhiteKeyword_16_0() { return cWhiteWhiteKeyword_16_0; }
	}

	public class ParameterControlTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterControlType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cChbEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cChbCheckBoxKeyword_0_0 = (Keyword)cChbEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTbEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTbTextBoxKeyword_1_0 = (Keyword)cTbEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLbEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLbListBoxKeyword_2_0 = (Keyword)cLbEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRbEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRbRadioButtonKeyword_3_0 = (Keyword)cRbEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cCbEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cCbComboBoxKeyword_4_0 = (Keyword)cCbEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ParameterControlType:
		//	chb="check-box" | tb="text-box" | lb="list-box" | rb="radio-button" | cb="combo-box";
		public EnumRule getRule() { return rule; }

		//chb="check-box" | tb="text-box" | lb="list-box" | rb="radio-button" | cb="combo-box"
		public Alternatives getAlternatives() { return cAlternatives; }

		//chb="check-box"
		public EnumLiteralDeclaration getChbEnumLiteralDeclaration_0() { return cChbEnumLiteralDeclaration_0; }

		//"check-box"
		public Keyword getChbCheckBoxKeyword_0_0() { return cChbCheckBoxKeyword_0_0; }

		//tb="text-box"
		public EnumLiteralDeclaration getTbEnumLiteralDeclaration_1() { return cTbEnumLiteralDeclaration_1; }

		//"text-box"
		public Keyword getTbTextBoxKeyword_1_0() { return cTbTextBoxKeyword_1_0; }

		//lb="list-box"
		public EnumLiteralDeclaration getLbEnumLiteralDeclaration_2() { return cLbEnumLiteralDeclaration_2; }

		//"list-box"
		public Keyword getLbListBoxKeyword_2_0() { return cLbListBoxKeyword_2_0; }

		//rb="radio-button"
		public EnumLiteralDeclaration getRbEnumLiteralDeclaration_3() { return cRbEnumLiteralDeclaration_3; }

		//"radio-button"
		public Keyword getRbRadioButtonKeyword_3_0() { return cRbRadioButtonKeyword_3_0; }

		//cb="combo-box"
		public EnumLiteralDeclaration getCbEnumLiteralDeclaration_4() { return cCbEnumLiteralDeclaration_4; }

		//"combo-box"
		public Keyword getCbComboBoxKeyword_4_0() { return cCbComboBoxKeyword_4_0; }
	}

	public class ParameterValueTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterValueType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDynamicEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDynamicDynamicKeyword_0_0 = (Keyword)cDynamicEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStaticEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStaticStaticKeyword_1_0 = (Keyword)cStaticEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ParameterValueType:
		//	dynamic | static;
		public EnumRule getRule() { return rule; }

		//dynamic | static
		public Alternatives getAlternatives() { return cAlternatives; }

		//dynamic
		public EnumLiteralDeclaration getDynamicEnumLiteralDeclaration_0() { return cDynamicEnumLiteralDeclaration_0; }

		//"dynamic"
		public Keyword getDynamicDynamicKeyword_0_0() { return cDynamicDynamicKeyword_0_0; }

		//static
		public EnumLiteralDeclaration getStaticEnumLiteralDeclaration_1() { return cStaticEnumLiteralDeclaration_1; }

		//"static"
		public Keyword getStaticStaticKeyword_1_0() { return cStaticStaticKeyword_1_0; }
	}

	public class ParameterTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMultiEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMultiMultiKeyword_0_0 = (Keyword)cMultiEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSimpleEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSimpleSimpleKeyword_1_0 = (Keyword)cSimpleEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ParameterType:
		//	multi | simple;
		public EnumRule getRule() { return rule; }

		//multi | simple
		public Alternatives getAlternatives() { return cAlternatives; }

		//multi
		public EnumLiteralDeclaration getMultiEnumLiteralDeclaration_0() { return cMultiEnumLiteralDeclaration_0; }

		//"multi"
		public Keyword getMultiMultiKeyword_0_0() { return cMultiMultiKeyword_0_0; }

		//simple
		public EnumLiteralDeclaration getSimpleEnumLiteralDeclaration_1() { return cSimpleEnumLiteralDeclaration_1; }

		//"simple"
		public Keyword getSimpleSimpleKeyword_1_0() { return cSimpleSimpleKeyword_1_0; }
	}

	public class DataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBooleanBooleanKeyword_0_0 = (Keyword)cBooleanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDateDateKeyword_1_0 = (Keyword)cDateEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDatetimeEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDatetimeDatetimeKeyword_2_0 = (Keyword)cDatetimeEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDecimalEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDecimalDecimalKeyword_3_0 = (Keyword)cDecimalEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFloatFloatKeyword_4_0 = (Keyword)cFloatEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cIntegerIntegerKeyword_5_0 = (Keyword)cIntegerEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cStringStringKeyword_6_0 = (Keyword)cStringEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cTimeEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cTimeTimeKeyword_7_0 = (Keyword)cTimeEnumLiteralDeclaration_7.eContents().get(0);
		
		//enum DataType:
		//	boolean | date | datetime | decimal | float | integer | string | time;
		public EnumRule getRule() { return rule; }

		//boolean | date | datetime | decimal | float | integer | string | time
		public Alternatives getAlternatives() { return cAlternatives; }

		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_0() { return cBooleanEnumLiteralDeclaration_0; }

		//"boolean"
		public Keyword getBooleanBooleanKeyword_0_0() { return cBooleanBooleanKeyword_0_0; }

		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_1() { return cDateEnumLiteralDeclaration_1; }

		//"date"
		public Keyword getDateDateKeyword_1_0() { return cDateDateKeyword_1_0; }

		//datetime
		public EnumLiteralDeclaration getDatetimeEnumLiteralDeclaration_2() { return cDatetimeEnumLiteralDeclaration_2; }

		//"datetime"
		public Keyword getDatetimeDatetimeKeyword_2_0() { return cDatetimeDatetimeKeyword_2_0; }

		//decimal
		public EnumLiteralDeclaration getDecimalEnumLiteralDeclaration_3() { return cDecimalEnumLiteralDeclaration_3; }

		//"decimal"
		public Keyword getDecimalDecimalKeyword_3_0() { return cDecimalDecimalKeyword_3_0; }

		//float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_4() { return cFloatEnumLiteralDeclaration_4; }

		//"float"
		public Keyword getFloatFloatKeyword_4_0() { return cFloatFloatKeyword_4_0; }

		//integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_5() { return cIntegerEnumLiteralDeclaration_5; }

		//"integer"
		public Keyword getIntegerIntegerKeyword_5_0() { return cIntegerIntegerKeyword_5_0; }

		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_6() { return cStringEnumLiteralDeclaration_6; }

		//"string"
		public Keyword getStringStringKeyword_6_0() { return cStringStringKeyword_6_0; }

		//time
		public EnumLiteralDeclaration getTimeEnumLiteralDeclaration_7() { return cTimeEnumLiteralDeclaration_7; }

		//"time"
		public Keyword getTimeTimeKeyword_7_0() { return cTimeTimeKeyword_7_0; }
	}

	public class StaticParameterSortElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "StaticParameterSort");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLabelEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLabelLabelKeyword_0_0 = (Keyword)cLabelEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cValueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cValueValueKeyword_1_0 = (Keyword)cValueEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum StaticParameterSort:
		//	label | value;
		public EnumRule getRule() { return rule; }

		//label | value
		public Alternatives getAlternatives() { return cAlternatives; }

		//label
		public EnumLiteralDeclaration getLabelEnumLiteralDeclaration_0() { return cLabelEnumLiteralDeclaration_0; }

		//"label"
		public Keyword getLabelLabelKeyword_0_0() { return cLabelLabelKeyword_0_0; }

		//value
		public EnumLiteralDeclaration getValueEnumLiteralDeclaration_1() { return cValueEnumLiteralDeclaration_1; }

		//"value"
		public Keyword getValueValueKeyword_1_0() { return cValueValueKeyword_1_0; }
	}

	public class AggregatorFunctionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "AggregatorFunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCountEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCountCountKeyword_0_0 = (Keyword)cCountEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSumEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSumSumKeyword_1_0 = (Keyword)cSumEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMaxEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMaxMaxKeyword_2_0 = (Keyword)cMaxEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMinEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMinMinKeyword_3_0 = (Keyword)cMinEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum AggregatorFunction:
		//	count | sum | max | min;
		public EnumRule getRule() { return rule; }

		//count | sum | max | min
		public Alternatives getAlternatives() { return cAlternatives; }

		//count
		public EnumLiteralDeclaration getCountEnumLiteralDeclaration_0() { return cCountEnumLiteralDeclaration_0; }

		//"count"
		public Keyword getCountCountKeyword_0_0() { return cCountCountKeyword_0_0; }

		//sum
		public EnumLiteralDeclaration getSumEnumLiteralDeclaration_1() { return cSumEnumLiteralDeclaration_1; }

		//"sum"
		public Keyword getSumSumKeyword_1_0() { return cSumSumKeyword_1_0; }

		//max
		public EnumLiteralDeclaration getMaxEnumLiteralDeclaration_2() { return cMaxEnumLiteralDeclaration_2; }

		//"max"
		public Keyword getMaxMaxKeyword_2_0() { return cMaxMaxKeyword_2_0; }

		//min
		public EnumLiteralDeclaration getMinEnumLiteralDeclaration_3() { return cMinEnumLiteralDeclaration_3; }

		//"min"
		public Keyword getMinMinKeyword_3_0() { return cMinMinKeyword_3_0; }
	}
	
	private final RootElements pRoot;
	private final ReportElements pReport;
	private final ElementPropertiesElements pElementProperties;
	private final ElementPropertyElements pElementProperty;
	private final QualifiedNameElements pQualifiedName;
	private final DatasourcesElements pDatasources;
	private final DatasourceElements pDatasource;
	private final DatasourceSampleElements pDatasourceSample;
	private final DatasourceJDBCElements pDatasourceJDBC;
	private final DatasourceCSVElements pDatasourceCSV;
	private final DatasetsElements pDatasets;
	private final DatasetElements pDataset;
	private final DatasetFieldElements pDatasetField;
	private final SimpleDatasetFieldElements pSimpleDatasetField;
	private final ComputedDatasetFieldElements pComputedDatasetField;
	private final ParametersElements pParameters;
	private final StaticParameterValuesElements pStaticParameterValues;
	private final StaticParameterValueElements pStaticParameterValue;
	private final DynamicParameterValuesElements pDynamicParameterValues;
	private final DynamicParameterValueElements pDynamicParameterValue;
	private final ParameterElements pParameter;
	private final ParameterValueElements pParameterValue;
	private final StylesElements pStyles;
	private final PageSetupElements pPageSetup;
	private final BodyElements pBody;
	private final ReportElementsElements pReportElements;
	private final BasicElementsElements pBasicElements;
	private final ComplexElementsElements pComplexElements;
	private final LabelElements pLabel;
	private final TextElements pText;
	private final DynamicTextElements pDynamicText;
	private final XDataElements pXData;
	private final ImageElements pImage;
	private final ChartElements pChart;
	private final LegendElements pLegend;
	private final PlotElements pPlot;
	private final XAxeElements pXAxe;
	private final YAxeElements pYAxe;
	private final AxeElements pAxe;
	private final NoAxeElements pNoAxe;
	private final LineElements pLine;
	private final ChartGridElements pChartGrid;
	private final TickElements pTick;
	private final ColorPaletteElements pColorPalette;
	private final PlaceElements pPlace;
	private final TitleElements pTitle;
	private final ChartElementPropertiesElements pChartElementProperties;
	private final ChartWithAxesTypeElements unknownRuleChartWithAxesType;
	private final ChartWithoutAxesTypeElements unknownRuleChartWithoutAxesType;
	private final ChartSubTypeElements unknownRuleChartSubType;
	private final PositionTypeElements unknownRulePositionType;
	private final OrientationTypeElements unknownRuleOrientationType;
	private final ListElements pList;
	private final GridElements pGrid;
	private final TableElements pTable;
	private final CrossTableElements pCrossTable;
	private final ColumnElements pColumn;
	private final RowElements pRow;
	private final CellElements pCell;
	private final PagePropertiesElements pPageProperties;
	private final LabelPropertiesElements pLabelProperties;
	private final FontElements pFont;
	private final FontSizeElements pFontSize;
	private final SizeValueUnitElements pSizeValueUnit;
	private final SizeValueElements pSizeValue;
	private final SizeValuePercentElements pSizeValuePercent;
	private final ColorElements pColor;
	private final BackgroundColorElements pBackgroundColor;
	private final StringColorElements pStringColor;
	private final HexColorElements pHexColor;
	private final RgbColorElements pRgbColor;
	private final TextStyleElements pTextStyle;
	private final HAlignmentElements pHAlignment;
	private final VAlignmentElements pVAlignment;
	private final WhitespaceElements pWhitespace;
	private final DisplayElements pDisplay;
	private final BorderElements pBorder;
	private final BorderAllElements pBorderAll;
	private final BorderSideElements pBorderSide;
	private final BorderLineElements pBorderLine;
	private final BorderWidthElements pBorderWidth;
	private final WidthTypeValueElements pWidthTypeValue;
	private final PaddingElements pPadding;
	private final MarginElements pMargin;
	private final IndentAllElements pIndentAll;
	private final IndentSideElements pIndentSide;
	private final IndentValueElements pIndentValue;
	private final PageBreakElements pPageBreak;
	private final VisibilityElements pVisibility;
	private final LegendVisibilityElements pLegendVisibility;
	private final HideAllElements pHideAll;
	private final HideForOneElements pHideForOne;
	private final HideForValueElements pHideForValue;
	private final HideForMoreElements pHideForMore;
	private final JSExpressionElements pJSExpression;
	private final TocElements pToc;
	private final BookmarkElements pBookmark;
	private final StyleRefElements pStyleRef;
	private final StyleElements pStyle;
	private final WidthElements pWidth;
	private final HeightElements pHeight;
	private final AltTextElements pAltText;
	private final SizeUnitElements unknownRuleSizeUnit;
	private final LengthUnitElements unknownRuleLengthUnit;
	private final HalignmentTypeElements unknownRuleHalignmentType;
	private final ValignmentTypeElements unknownRuleValignmentType;
	private final WhitespaceTypeElements unknownRuleWhitespaceType;
	private final DisplayTypeElements unknownRuleDisplayType;
	private final BorderLineStyleTypeElements unknownRuleBorderLineStyleType;
	private final WidthTypeElements unknownRuleWidthType;
	private final OutputFormatTypeElements unknownRuleOutputFormatType;
	private final PageBreakTypeElements unknownRulePageBreakType;
	private final PageBreakValueElements unknownRulePageBreakValue;
	private final SortTypeElements unknownRuleSortType;
	private final BorderTypeElements unknownRuleBorderType;
	private final TargetTypeElements unknownRuleTargetType;
	private final DrillThroughTypeElements unknownRuleDrillThroughType;
	private final ColorTypeElements unknownRuleColorType;
	private final ParameterControlTypeElements unknownRuleParameterControlType;
	private final ParameterValueTypeElements unknownRuleParameterValueType;
	private final ParameterTypeElements unknownRuleParameterType;
	private final DataTypeElements unknownRuleDataType;
	private final StaticParameterSortElements unknownRuleStaticParameterSort;
	private final AggregatorFunctionElements unknownRuleAggregatorFunction;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	private final TerminalRule tFLOAT;
	private final TerminalRule tHEX_COLOR;
	private final LiteralElements pLiteral;
	private final IntLiteralElements pIntLiteral;
	private final FloatLiteralElements pFloatLiteral;
	private final StringLiteralElements pStringLiteral;
	private final BooleanLiteralElements pBooleanLiteral;
	private final NullLiteralElements pNullLiteral;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRoot = new RootElements();
		this.pReport = new ReportElements();
		this.pElementProperties = new ElementPropertiesElements();
		this.pElementProperty = new ElementPropertyElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pDatasources = new DatasourcesElements();
		this.pDatasource = new DatasourceElements();
		this.pDatasourceSample = new DatasourceSampleElements();
		this.pDatasourceJDBC = new DatasourceJDBCElements();
		this.pDatasourceCSV = new DatasourceCSVElements();
		this.pDatasets = new DatasetsElements();
		this.pDataset = new DatasetElements();
		this.pDatasetField = new DatasetFieldElements();
		this.pSimpleDatasetField = new SimpleDatasetFieldElements();
		this.pComputedDatasetField = new ComputedDatasetFieldElements();
		this.pParameters = new ParametersElements();
		this.pStaticParameterValues = new StaticParameterValuesElements();
		this.pStaticParameterValue = new StaticParameterValueElements();
		this.pDynamicParameterValues = new DynamicParameterValuesElements();
		this.pDynamicParameterValue = new DynamicParameterValueElements();
		this.pParameter = new ParameterElements();
		this.pParameterValue = new ParameterValueElements();
		this.pStyles = new StylesElements();
		this.pPageSetup = new PageSetupElements();
		this.pBody = new BodyElements();
		this.pReportElements = new ReportElementsElements();
		this.pBasicElements = new BasicElementsElements();
		this.pComplexElements = new ComplexElementsElements();
		this.pLabel = new LabelElements();
		this.pText = new TextElements();
		this.pDynamicText = new DynamicTextElements();
		this.pXData = new XDataElements();
		this.pImage = new ImageElements();
		this.pChart = new ChartElements();
		this.pLegend = new LegendElements();
		this.pPlot = new PlotElements();
		this.pXAxe = new XAxeElements();
		this.pYAxe = new YAxeElements();
		this.pAxe = new AxeElements();
		this.pNoAxe = new NoAxeElements();
		this.pLine = new LineElements();
		this.pChartGrid = new ChartGridElements();
		this.pTick = new TickElements();
		this.pColorPalette = new ColorPaletteElements();
		this.pPlace = new PlaceElements();
		this.pTitle = new TitleElements();
		this.pChartElementProperties = new ChartElementPropertiesElements();
		this.unknownRuleChartWithAxesType = new ChartWithAxesTypeElements();
		this.unknownRuleChartWithoutAxesType = new ChartWithoutAxesTypeElements();
		this.unknownRuleChartSubType = new ChartSubTypeElements();
		this.unknownRulePositionType = new PositionTypeElements();
		this.unknownRuleOrientationType = new OrientationTypeElements();
		this.pList = new ListElements();
		this.pGrid = new GridElements();
		this.pTable = new TableElements();
		this.pCrossTable = new CrossTableElements();
		this.pColumn = new ColumnElements();
		this.pRow = new RowElements();
		this.pCell = new CellElements();
		this.pPageProperties = new PagePropertiesElements();
		this.pLabelProperties = new LabelPropertiesElements();
		this.pFont = new FontElements();
		this.pFontSize = new FontSizeElements();
		this.pSizeValueUnit = new SizeValueUnitElements();
		this.pSizeValue = new SizeValueElements();
		this.pSizeValuePercent = new SizeValuePercentElements();
		this.pColor = new ColorElements();
		this.pBackgroundColor = new BackgroundColorElements();
		this.pStringColor = new StringColorElements();
		this.pHexColor = new HexColorElements();
		this.pRgbColor = new RgbColorElements();
		this.pTextStyle = new TextStyleElements();
		this.pHAlignment = new HAlignmentElements();
		this.pVAlignment = new VAlignmentElements();
		this.pWhitespace = new WhitespaceElements();
		this.pDisplay = new DisplayElements();
		this.pBorder = new BorderElements();
		this.pBorderAll = new BorderAllElements();
		this.pBorderSide = new BorderSideElements();
		this.pBorderLine = new BorderLineElements();
		this.pBorderWidth = new BorderWidthElements();
		this.pWidthTypeValue = new WidthTypeValueElements();
		this.pPadding = new PaddingElements();
		this.pMargin = new MarginElements();
		this.pIndentAll = new IndentAllElements();
		this.pIndentSide = new IndentSideElements();
		this.pIndentValue = new IndentValueElements();
		this.pPageBreak = new PageBreakElements();
		this.pVisibility = new VisibilityElements();
		this.pLegendVisibility = new LegendVisibilityElements();
		this.pHideAll = new HideAllElements();
		this.pHideForOne = new HideForOneElements();
		this.pHideForValue = new HideForValueElements();
		this.pHideForMore = new HideForMoreElements();
		this.pJSExpression = new JSExpressionElements();
		this.pToc = new TocElements();
		this.pBookmark = new BookmarkElements();
		this.pStyleRef = new StyleRefElements();
		this.pStyle = new StyleElements();
		this.pWidth = new WidthElements();
		this.pHeight = new HeightElements();
		this.pAltText = new AltTextElements();
		this.unknownRuleSizeUnit = new SizeUnitElements();
		this.unknownRuleLengthUnit = new LengthUnitElements();
		this.unknownRuleHalignmentType = new HalignmentTypeElements();
		this.unknownRuleValignmentType = new ValignmentTypeElements();
		this.unknownRuleWhitespaceType = new WhitespaceTypeElements();
		this.unknownRuleDisplayType = new DisplayTypeElements();
		this.unknownRuleBorderLineStyleType = new BorderLineStyleTypeElements();
		this.unknownRuleWidthType = new WidthTypeElements();
		this.unknownRuleOutputFormatType = new OutputFormatTypeElements();
		this.unknownRulePageBreakType = new PageBreakTypeElements();
		this.unknownRulePageBreakValue = new PageBreakValueElements();
		this.unknownRuleSortType = new SortTypeElements();
		this.unknownRuleBorderType = new BorderTypeElements();
		this.unknownRuleTargetType = new TargetTypeElements();
		this.unknownRuleDrillThroughType = new DrillThroughTypeElements();
		this.unknownRuleColorType = new ColorTypeElements();
		this.unknownRuleParameterControlType = new ParameterControlTypeElements();
		this.unknownRuleParameterValueType = new ParameterValueTypeElements();
		this.unknownRuleParameterType = new ParameterTypeElements();
		this.unknownRuleDataType = new DataTypeElements();
		this.unknownRuleStaticParameterSort = new StaticParameterSortElements();
		this.unknownRuleAggregatorFunction = new AggregatorFunctionElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ANY_OTHER");
		this.tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT");
		this.tHEX_COLOR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_COLOR");
		this.pLiteral = new LiteralElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pFloatLiteral = new FloatLiteralElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pNullLiteral = new NullLiteralElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.RDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Root:
	//	root=Report;
	public RootElements getRootAccess() {
		return pRoot;
	}
	
	public ParserRule getRootRule() {
		return getRootAccess().getRule();
	}

	//Report:
	//	"report" name=ID "{" (datasources=Datasources? & datasets=Datasets? & parameters=Parameters? & styles=Styles? &
	//	pagesetup=PageSetup? & body=Body? & elementProperties=elementProperties?) "}";
	public ReportElements getReportAccess() {
		return pReport;
	}
	
	public ParserRule getReportRule() {
		return getReportAccess().getRule();
	}

	//elementProperties:
	//	"element properties" "{" properties+=(Font //			| Color 
	//	//			| BackgroundColor
	//	//			| TextStyle 
	//	| FontSize | ColorPalette | HAlignment | VAlignment | Whitespace | StyleRef | Display | Border | Padding | Margin |
	//	Visibility | PageBreak | Bookmark | Width | Height | AltText)+ "}";
	public ElementPropertiesElements getElementPropertiesAccess() {
		return pElementProperties;
	}
	
	public ParserRule getElementPropertiesRule() {
		return getElementPropertiesAccess().getRule();
	}

	////	& color = Color? 
	////	& backgroundColor = BackgroundColor?
	////	& textStyle = TextStyle? 
	////	& hAlign = HAlignment? 
	////	& vAlign = VAlignment? 
	////	& whiteSpace = Whitespace? 
	////	& style = StyleRef? 
	////	& display = Display? 
	////	& border = Border? 
	////	& padding = Padding? 
	////	& margin = Margin? 
	////	& visibility = Visibility? 
	////	& pagebreak = PageBreak? 
	////	& toc = Toc? 
	////	& bookmark = Bookmark? 
	////	& width = Width? 
	////	& height = Height? 
	////	& alttext = AltText?
	//ElementProperty:
	//	colorpalette=ColorPalette? & font=Font? & fontSize=FontSize?;
	public ElementPropertyElements getElementPropertyAccess() {
		return pElementProperty;
	}
	
	public ParserRule getElementPropertyRule() {
		return getElementPropertyAccess().getRule();
	}

	////Include:
	////	'include' include = QualifiedNameWithWildcard
	////;
	////QualifiedNameWithWildcard:
	////	QualifiedName '.*'?
	////;
	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Datasources:
	//	{Datasources} "data-sources" "{" datasource+=Datasource* "}";
	public DatasourcesElements getDatasourcesAccess() {
		return pDatasources;
	}
	
	public ParserRule getDatasourcesRule() {
		return getDatasourcesAccess().getRule();
	}

	//Datasource:
	//	"data-source" name=ID "type" type=(DatasourceSample | DatasourceJDBC | DatasourceCSV);
	public DatasourceElements getDatasourceAccess() {
		return pDatasource;
	}
	
	public ParserRule getDatasourceRule() {
		return getDatasourceAccess().getRule();
	}

	//DatasourceSample:
	//	type="sample";
	public DatasourceSampleElements getDatasourceSampleAccess() {
		return pDatasourceSample;
	}
	
	public ParserRule getDatasourceSampleRule() {
		return getDatasourceSampleAccess().getRule();
	}

	//DatasourceJDBC:
	//	"jdbc" "{" ("driver" driver=STRING & "url" url=STRING & "user" user=STRING & "password" password=STRING) "}";
	public DatasourceJDBCElements getDatasourceJDBCAccess() {
		return pDatasourceJDBC;
	}
	
	public ParserRule getDatasourceJDBCRule() {
		return getDatasourceJDBCAccess().getRule();
	}

	////#TODO Generator statement
	//DatasourceCSV:
	//	"csv" "{" ("url" url=STRING //#TODO String+
	//	& "charset" charset=STRING & "delimiter" delimiter=STRING & "headerline" headerline=BooleanLiteral) "}";
	public DatasourceCSVElements getDatasourceCSVAccess() {
		return pDatasourceCSV;
	}
	
	public ParserRule getDatasourceCSVRule() {
		return getDatasourceCSVAccess().getRule();
	}

	//Datasets:
	//	"data-sets" "{" dataset+=Dataset* "}";
	public DatasetsElements getDatasetsAccess() {
		return pDatasets;
	}
	
	public ParserRule getDatasetsRule() {
		return getDatasetsAccess().getRule();
	}

	//Dataset:
	//	"dataset" name=ID "{" ("datasource" datasourceref=[Datasource|QualifiedName] & ("fields" "{" field+=DatasetField (","
	//	field+=DatasetField)* "}")? & ("parameters" "{" parameter+=[Parameter] ("," parameter+=[Parameter])* "}")? & //	('computed fields' '{' computedfield += ComputedDatasetField* '}')?
	//	"query" "{" query=STRING? //#TODO SelectStatement
	//	"}") "}";
	public DatasetElements getDatasetAccess() {
		return pDataset;
	}
	
	public ParserRule getDatasetRule() {
		return getDatasetAccess().getRule();
	}

	//DatasetField:
	//	SimpleDatasetField | ComputedDatasetField;
	public DatasetFieldElements getDatasetFieldAccess() {
		return pDatasetField;
	}
	
	public ParserRule getDatasetFieldRule() {
		return getDatasetFieldAccess().getRule();
	}

	//SimpleDatasetField:
	//	name=ID;
	public SimpleDatasetFieldElements getSimpleDatasetFieldAccess() {
		return pSimpleDatasetField;
	}
	
	public ParserRule getSimpleDatasetFieldRule() {
		return getSimpleDatasetFieldAccess().getRule();
	}

	//ComputedDatasetField:
	//	name=ID aggregation=AggregatorFunction datatype=DataType argument=JSExpression ("filter" filter=JSExpression)?;
	public ComputedDatasetFieldElements getComputedDatasetFieldAccess() {
		return pComputedDatasetField;
	}
	
	public ParserRule getComputedDatasetFieldRule() {
		return getComputedDatasetFieldAccess().getRule();
	}

	//Parameters:
	//	"parameters" "{" parameter+=Parameter* "}";
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}

	//StaticParameterValues:
	//	"{" value+=StaticParameterValue* ("sort by" sort=StaticParameterSort sorttype=SortType)? "}";
	public StaticParameterValuesElements getStaticParameterValuesAccess() {
		return pStaticParameterValues;
	}
	
	public ParserRule getStaticParameterValuesRule() {
		return getStaticParameterValuesAccess().getRule();
	}

	//StaticParameterValue:
	//	label=STRING ":" value=STRING default?="default"?;
	public StaticParameterValueElements getStaticParameterValueAccess() {
		return pStaticParameterValue;
	}
	
	public ParserRule getStaticParameterValueRule() {
		return getStaticParameterValueAccess().getRule();
	}

	//DynamicParameterValues:
	//	"{" value+=DynamicParameterValue "}";
	public DynamicParameterValuesElements getDynamicParameterValuesAccess() {
		return pDynamicParameterValues;
	}
	
	public ParserRule getDynamicParameterValuesRule() {
		return getDynamicParameterValuesAccess().getRule();
	}

	//DynamicParameterValue:
	//	"dataset" dataset=[Dataset] (label=JSExpression ":" value=JSExpression) (("default" default+=JSExpression*)? &
	//	("sort by" sort=[DatasetField|QualifiedName] sorttype=SortType)?);
	public DynamicParameterValueElements getDynamicParameterValueAccess() {
		return pDynamicParameterValue;
	}
	
	public ParserRule getDynamicParameterValueRule() {
		return getDynamicParameterValueAccess().getRule();
	}

	//Parameter:
	//	controltype=ParameterControlType name=ID "{" (("promt-text" promt=STRING)? & ("help-text" help=STRING)? & ("hidden"
	//	hide=BooleanLiteral)? & ("required" required=BooleanLiteral)? & ("duplicate" duplicate=BooleanLiteral)? & "values"
	//	valuetype=ParameterValueType paramtype=ParameterType datatype=DataType values=ParameterValue)? "}";
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//ParameterValue:
	//	DynamicParameterValues | StaticParameterValues;
	public ParameterValueElements getParameterValueAccess() {
		return pParameterValue;
	}
	
	public ParserRule getParameterValueRule() {
		return getParameterValueAccess().getRule();
	}

	//Styles:
	//	"styles" "{" style+=Style* "}";
	public StylesElements getStylesAccess() {
		return pStyles;
	}
	
	public ParserRule getStylesRule() {
		return getStylesAccess().getRule();
	}

	//PageSetup:
	//	"page-setup" ("{" properties+=PageProperties "}")?;
	public PageSetupElements getPageSetupAccess() {
		return pPageSetup;
	}
	
	public ParserRule getPageSetupRule() {
		return getPageSetupAccess().getRule();
	}

	//Body:
	//	{Body} "body" "{" elements+=ReportElements* "}";
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}

	//ReportElements: //	BasicElements | ComplexElements
	//	Label | Text | DynamicText | xData | Image | Chart | List | Grid | Table | CrossTable;
	public ReportElementsElements getReportElementsAccess() {
		return pReportElements;
	}
	
	public ParserRule getReportElementsRule() {
		return getReportElementsAccess().getRule();
	}

	//BasicElements:
	//	Label | Text | DynamicText | xData | Image | Chart;
	public BasicElementsElements getBasicElementsAccess() {
		return pBasicElements;
	}
	
	public ParserRule getBasicElementsRule() {
		return getBasicElementsAccess().getRule();
	}

	//ComplexElements:
	//	List | Grid | Table | CrossTable;
	public ComplexElementsElements getComplexElementsAccess() {
		return pComplexElements;
	}
	
	public ParserRule getComplexElementsRule() {
		return getComplexElementsAccess().getRule();
	}

	//Label:
	//	"label" name=ID content=STRING ("{" properties+=LabelProperties //		( ref ?= 'from' reference = [TextBoxProperty]
	//	//		| property = TextBoxProperty
	//	//		)
	//	"}")?;
	public LabelElements getLabelAccess() {
		return pLabel;
	}
	
	public ParserRule getLabelRule() {
		return getLabelAccess().getRule();
	}

	//Text:
	//	"text" name=ID content= // #TODO HTML
	//	STRING ("{" properties+=LabelProperties "}")?;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}

	//DynamicText:
	//	"dynamic-text" name=ID content=JSExpression ("{" properties+=LabelProperties "}")?;
	public DynamicTextElements getDynamicTextAccess() {
		return pDynamicText;
	}
	
	public ParserRule getDynamicTextRule() {
		return getDynamicTextAccess().getRule();
	}

	//xData:
	//	"data" name=ID // content = [SelectColumnAlias|QualifiedName] // #TODO Add Data Expression to Text
	//	content=JSExpression // 	#TODO 'format-type'
	//	("{" properties+=LabelProperties "}")?;
	public XDataElements getXDataAccess() {
		return pXData;
	}
	
	public ParserRule getXDataRule() {
		return getXDataAccess().getRule();
	}

	//Image:
	//	"image" name=ID "type" type=("file" //'embed' 'dynamic' #TODO Image type reference
	//	| "url") "content" content=JSExpression ("{" properties+=LabelProperties "}")?;
	public ImageElements getImageAccess() {
		return pImage;
	}
	
	public ParserRule getImageRule() {
		return getImageAccess().getRule();
	}

	///////////////////////////////////////////////////
	//Chart:
	//	"chart" name=ID (type=ChartWithAxesType subtype=ChartSubType | type=ChartWithoutAxesType) "dataset"
	//	dataset=[Dataset|QualifiedName] ("{" properties+=LabelProperties title=Title? //#TODO Chart title properties: text-style color bg-color font v-h-alignment visibility
	//	legend=Legend? plot=Plot? (axe=NoAxe | xaxe=XAxe & yaxe=YAxe) colorpalette=ColorPalette? //		( emptymessage = )?
	//	"}")?;
	public ChartElements getChartAccess() {
		return pChart;
	}
	
	public ParserRule getChartRule() {
		return getChartAccess().getRule();
	}

	//Legend:
	//	"legend" place=Place orientation=OrientationType "{" title=Title? & visibility=LegendVisibility? & "direction"? &
	//	"show value"? "}";
	public LegendElements getLegendAccess() {
		return pLegend;
	}
	
	public ParserRule getLegendRule() {
		return getLegendAccess().getRule();
	}

	//Plot:
	//	"plot" "{" "}";
	public PlotElements getPlotAccess() {
		return pPlot;
	}
	
	public ParserRule getPlotRule() {
		return getPlotAccess().getRule();
	}

	//XAxe:
	//	"x-" value=Axe;
	public XAxeElements getXAxeAccess() {
		return pXAxe;
	}
	
	public ParserRule getXAxeRule() {
		return getXAxeAccess().getRule();
	}

	//YAxe:
	//	"y-" value=Axe;
	public YAxeElements getYAxeAccess() {
		return pYAxe;
	}
	
	public ParserRule getYAxeRule() {
		return getYAxeAccess().getRule();
	}

	//Axe:
	//	"axe" type=("linear" | "text" | "logarithmic" | "date-time") data=JSExpression ("grouping by"
	//	groupingby=JSExpression)? "{" (title=Title? & line=Line? & ("major-" majorgrid=ChartGrid)? & ("minor-"
	//	minorgrid=ChartGrid)?) "}";
	public AxeElements getAxeAccess() {
		return pAxe;
	}
	
	public ParserRule getAxeRule() {
		return getAxeAccess().getRule();
	}

	//NoAxe:
	//	"no axe";
	public NoAxeElements getNoAxeAccess() {
		return pNoAxe;
	}
	
	public ParserRule getNoAxeRule() {
		return getNoAxeAccess().getRule();
	}

	//Line:
	//	"line" "{" value=BorderLine "}";
	public LineElements getLineAccess() {
		return pLine;
	}
	
	public ParserRule getLineRule() {
		return getLineAccess().getRule();
	}

	//ChartGrid:
	//	"grid" "{" ("scale" scale=INT & value=BorderLine & tick=Tick) "}";
	public ChartGridElements getChartGridAccess() {
		return pChartGrid;
	}
	
	public ParserRule getChartGridRule() {
		return getChartGridAccess().getRule();
	}

	//Tick:
	//	"tick" place=("above" | "across" | "below") ("{" value=BorderLine "}")?;
	public TickElements getTickAccess() {
		return pTick;
	}
	
	public ParserRule getTickRule() {
		return getTickAccess().getRule();
	}

	//ColorPalette:
	//	"color-palette" name=ID? "{" (value+=(StringColor | HexColor | RgbColor)+ | linkto=[ColorPalette]) "}";
	public ColorPaletteElements getColorPaletteAccess() {
		return pColorPalette;
	}
	
	public ParserRule getColorPaletteRule() {
		return getColorPaletteAccess().getRule();
	}

	//Place:
	//	position=("left" | "right") anchor=("top" | "middle" | "bottom") | position=("above" | "below") anchor=("left" |
	//	"middle" | "right");
	public PlaceElements getPlaceAccess() {
		return pPlace;
	}
	
	public ParserRule getPlaceRule() {
		return getPlaceAccess().getRule();
	}

	////	('{' properties += LabelProperties '}')?
	//Title:
	//	"title" value=STRING place=("left" | "right" | "above" | "below") ("{" properties=ChartElementProperties "}")?;
	public TitleElements getTitleAccess() {
		return pTitle;
	}
	
	public ParserRule getTitleRule() {
		return getTitleAccess().getRule();
	}

	//ChartElementProperties:
	//	padding=Padding? & border=Border? & visibility=Visibility? & font=Font? & fontSize=FontSize? & color=Color? &
	//	backgroundColor=BackgroundColor? & textStyle=TextStyle? & hAlign=HAlignment? & vAlign=VAlignment? &
	//	whiteSpace=Whitespace? & style=StyleRef? & display=Display?;
	public ChartElementPropertiesElements getChartElementPropertiesAccess() {
		return pChartElementProperties;
	}
	
	public ParserRule getChartElementPropertiesRule() {
		return getChartElementPropertiesAccess().getRule();
	}

	//enum ChartWithAxesType returns STRING:
	//	bar | line | area;
	public ChartWithAxesTypeElements getChartWithAxesTypeAccess() {
		return unknownRuleChartWithAxesType;
	}
	
	public EnumRule getChartWithAxesTypeRule() {
		return getChartWithAxesTypeAccess().getRule();
	}

	//enum ChartWithoutAxesType returns STRING:
	//	pie;
	public ChartWithoutAxesTypeElements getChartWithoutAxesTypeAccess() {
		return unknownRuleChartWithoutAxesType;
	}
	
	public EnumRule getChartWithoutAxesTypeRule() {
		return getChartWithoutAxesTypeAccess().getRule();
	}

	//enum ChartSubType:
	//	sbs="side-by-side" | stacked | percent="percent-stacked" | overlay;
	public ChartSubTypeElements getChartSubTypeAccess() {
		return unknownRuleChartSubType;
	}
	
	public EnumRule getChartSubTypeRule() {
		return getChartSubTypeAccess().getRule();
	}

	//enum PositionType:
	//	North="top" | South="bottom" | West="left" | East="right";
	public PositionTypeElements getPositionTypeAccess() {
		return unknownRulePositionType;
	}
	
	public EnumRule getPositionTypeRule() {
		return getPositionTypeAccess().getRule();
	}

	//enum OrientationType:
	//	vertical | horizontal;
	public OrientationTypeElements getOrientationTypeAccess() {
		return unknownRuleOrientationType;
	}
	
	public EnumRule getOrientationTypeRule() {
		return getOrientationTypeAccess().getRule();
	}

	////enum AggregatorType:
	////	
	////;
	///////////////////////////////////////////////////
	//List:
	//	"list" name=ID ("{" properties+=LabelProperties "}")? "{" ("header" "{" headerelements+=ReportElements* "}")?
	//	("detail" "{" detailelements+=ReportElements* "}")? ("footer" "{" footerelements+=ReportElements* "}")? "}";
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}

	//Grid:
	//	"grid" name=ID ("{" properties+=LabelProperties "}")? "{" columns+=Column+ rows+=Row+ "}";
	public GridElements getGridAccess() {
		return pGrid;
	}
	
	public ParserRule getGridRule() {
		return getGridAccess().getRule();
	}

	//Table:
	//	"table" name=ID ("{" properties+=LabelProperties "}")? ("dataset" dataset=[Dataset|QualifiedName])? "{"
	//	columns+=Column+ ("header" "{" headerrows+=Row+ "}")? ("detail" "{" detailrows+=Row+ "}")? ("footer" "{"
	//	footerrows+=Row+ "}")? "}";
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}

	//CrossTable:
	//	"cross-table" name=ID ("{" properties+=LabelProperties "}")?;
	public CrossTableElements getCrossTableAccess() {
		return pCrossTable;
	}
	
	public ParserRule getCrossTableRule() {
		return getCrossTableAccess().getRule();
	}

	//Column:
	//	{Column} "column" order=INT? ("{" properties+=LabelProperties "}")?;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}

	//Row:
	//	"row" order=INT? ("{" properties+=LabelProperties "}")? "{" cells+=Cell+ "}";
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}

	//Cell:
	//	{Cell} "cell" order=INT? ("{" properties+=LabelProperties "}")? "{" elements+=ReportElements* "}";
	public CellElements getCellAccess() {
		return pCell;
	}
	
	public ParserRule getCellRule() {
		return getCellAccess().getRule();
	}

	/// **************************
	// * ELEMENT PROPERTY GROUPS
	// ************************** / PageProperties:
	//	font=Font? & fontSize=FontSize? & color=Color? & backgroundColor=BackgroundColor? & textStyle=TextStyle? &
	//	hAlign=HAlignment? & vAlign=VAlignment? & whiteSpace=Whitespace? & style=StyleRef? & display=Display? &
	//	border=Border? & padding=Padding? & margin=Margin? & visibility=Visibility? & pagebreak=PageBreak? & toc=Toc? &
	//	bookmark=Bookmark? & width=Width? & height=Height?;
	public PagePropertiesElements getPagePropertiesAccess() {
		return pPageProperties;
	}
	
	public ParserRule getPagePropertiesRule() {
		return getPagePropertiesAccess().getRule();
	}

	//LabelProperties:
	//	font=Font? & fontSize=FontSize? & color=Color? & backgroundColor=BackgroundColor? & textStyle=TextStyle? &
	//	hAlign=HAlignment? & vAlign=VAlignment? & whiteSpace=Whitespace? & style=StyleRef? & display=Display? &
	//	border=Border? & padding=Padding? & margin=Margin? & visibility=Visibility? & pagebreak=PageBreak? & toc=Toc? &
	//	bookmark=Bookmark? & width=Width? & height=Height? & alttext=AltText?;
	public LabelPropertiesElements getLabelPropertiesAccess() {
		return pLabelProperties;
	}
	
	public ParserRule getLabelPropertiesRule() {
		return getLabelPropertiesAccess().getRule();
	}

	/// **********************
	// * ELEMENT PROPERTIES
	// ********************** / //RefX:
	////	value = STRING | datafield = [SelectColumnAlias]
	////;
	////HtmlContent:
	////	'html' value = STRING
	////;
	////ContentString:
	////	STRING
	////;
	//Font:
	//	"font" name=ID? (value=STRING | linkto=[Font]);
	public FontElements getFontAccess() {
		return pFont;
	}
	
	public ParserRule getFontRule() {
		return getFontAccess().getRule();
	}

	//FontSize:
	//	"font-size" name=ID? (value=(SizeValueUnit | SizeValue | SizeValuePercent) | linkto=[FontSize]);
	public FontSizeElements getFontSizeAccess() {
		return pFontSize;
	}
	
	public ParserRule getFontSizeRule() {
		return getFontSizeAccess().getRule();
	}

	//SizeValueUnit:
	//	value=SizeUnit;
	public SizeValueUnitElements getSizeValueUnitAccess() {
		return pSizeValueUnit;
	}
	
	public ParserRule getSizeValueUnitRule() {
		return getSizeValueUnitAccess().getRule();
	}

	//SizeValue:
	//	value=FLOAT unit=LengthUnit;
	public SizeValueElements getSizeValueAccess() {
		return pSizeValue;
	}
	
	public ParserRule getSizeValueRule() {
		return getSizeValueAccess().getRule();
	}

	//SizeValuePercent:
	//	value=FLOAT "%";
	public SizeValuePercentElements getSizeValuePercentAccess() {
		return pSizeValuePercent;
	}
	
	public ParserRule getSizeValuePercentRule() {
		return getSizeValuePercentAccess().getRule();
	}

	//Color:
	//	"color" (StringColor | HexColor);
	public ColorElements getColorAccess() {
		return pColor;
	}
	
	public ParserRule getColorRule() {
		return getColorAccess().getRule();
	}

	//BackgroundColor returns Color:
	//	"bg-color" (StringColor | HexColor);
	public BackgroundColorElements getBackgroundColorAccess() {
		return pBackgroundColor;
	}
	
	public ParserRule getBackgroundColorRule() {
		return getBackgroundColorAccess().getRule();
	}

	//StringColor:
	//	value=ColorType;
	public StringColorElements getStringColorAccess() {
		return pStringColor;
	}
	
	public ParserRule getStringColorRule() {
		return getStringColorAccess().getRule();
	}

	//HexColor:
	//	value=HEX_COLOR;
	public HexColorElements getHexColorAccess() {
		return pHexColor;
	}
	
	public ParserRule getHexColorRule() {
		return getHexColorAccess().getRule();
	}

	//RgbColor:
	//	"rgb(" r=INT g=INT b=INT ")";
	public RgbColorElements getRgbColorAccess() {
		return pRgbColor;
	}
	
	public ParserRule getRgbColorRule() {
		return getRgbColorAccess().getRule();
	}

	//TextStyle:
	//	{TextStyle} "text-style" name=ID? (I?="italic"? & B?="bold"? & U?="underline"? & T?="through-line"?);
	public TextStyleElements getTextStyleAccess() {
		return pTextStyle;
	}
	
	public ParserRule getTextStyleRule() {
		return getTextStyleAccess().getRule();
	}

	//HAlignment:
	//	"h-alignment" name=ID? (value=HalignmentType | linkto=[HAlignment]);
	public HAlignmentElements getHAlignmentAccess() {
		return pHAlignment;
	}
	
	public ParserRule getHAlignmentRule() {
		return getHAlignmentAccess().getRule();
	}

	//VAlignment:
	//	"v-alignment" name=ID? (value=ValignmentType | linkto=[VAlignment]);
	public VAlignmentElements getVAlignmentAccess() {
		return pVAlignment;
	}
	
	public ParserRule getVAlignmentRule() {
		return getVAlignmentAccess().getRule();
	}

	//Whitespace:
	//	"whitespace" name=ID? (value=WhitespaceType | linkto=[Whitespace]);
	public WhitespaceElements getWhitespaceAccess() {
		return pWhitespace;
	}
	
	public ParserRule getWhitespaceRule() {
		return getWhitespaceAccess().getRule();
	}

	//Display:
	//	"display" name=ID? (value=DisplayType | linkto=[Display]);
	public DisplayElements getDisplayAccess() {
		return pDisplay;
	}
	
	public ParserRule getDisplayRule() {
		return getDisplayAccess().getRule();
	}

	//Border:
	//	"border" name=ID? "{" (value=(BorderAll | BorderSide) | linkto=[Border]) "}";
	public BorderElements getBorderAccess() {
		return pBorder;
	}
	
	public ParserRule getBorderRule() {
		return getBorderAccess().getRule();
	}

	//BorderAll:
	//	"all" "{" BorderLine? "}";
	public BorderAllElements getBorderAllAccess() {
		return pBorderAll;
	}
	
	public ParserRule getBorderAllRule() {
		return getBorderAllAccess().getRule();
	}

	//BorderSide:
	//	("right" "{" right=BorderLine "}")? & ("left" "{" left=BorderLine "}")? & ("top" "{" top=BorderLine "}")? & ("bottom"
	//	"{" bottom=BorderLine "}")?;
	public BorderSideElements getBorderSideAccess() {
		return pBorderSide;
	}
	
	public ParserRule getBorderSideRule() {
		return getBorderSideAccess().getRule();
	}

	//BorderLine:
	//	"style" style=BorderLineStyleType & "width" width=BorderWidth & color=Color;
	public BorderLineElements getBorderLineAccess() {
		return pBorderLine;
	}
	
	public ParserRule getBorderLineRule() {
		return getBorderLineAccess().getRule();
	}

	//BorderWidth:
	//	value=(WidthTypeValue | SizeValue);
	public BorderWidthElements getBorderWidthAccess() {
		return pBorderWidth;
	}
	
	public ParserRule getBorderWidthRule() {
		return getBorderWidthAccess().getRule();
	}

	//WidthTypeValue:
	//	value=WidthType;
	public WidthTypeValueElements getWidthTypeValueAccess() {
		return pWidthTypeValue;
	}
	
	public ParserRule getWidthTypeValueRule() {
		return getWidthTypeValueAccess().getRule();
	}

	//Padding:
	//	"padding" "{" (IndentAll | IndentSide) "}";
	public PaddingElements getPaddingAccess() {
		return pPadding;
	}
	
	public ParserRule getPaddingRule() {
		return getPaddingAccess().getRule();
	}

	//Margin returns Padding:
	//	"margin" "{" (IndentAll | IndentSide) "}";
	public MarginElements getMarginAccess() {
		return pMargin;
	}
	
	public ParserRule getMarginRule() {
		return getMarginAccess().getRule();
	}

	//IndentAll:
	//	"all" IndentValue;
	public IndentAllElements getIndentAllAccess() {
		return pIndentAll;
	}
	
	public ParserRule getIndentAllRule() {
		return getIndentAllAccess().getRule();
	}

	//IndentSide:
	//	("right" right=IndentValue)? & ("left" left=IndentValue)? & ("top" top=IndentValue)? & ("bottom"
	//	bottom=IndentValue)?;
	public IndentSideElements getIndentSideAccess() {
		return pIndentSide;
	}
	
	public ParserRule getIndentSideRule() {
		return getIndentSideAccess().getRule();
	}

	//IndentValue:
	//	value=(SizeValue | SizeValuePercent);
	public IndentValueElements getIndentValueAccess() {
		return pIndentValue;
	}
	
	public ParserRule getIndentValueRule() {
		return getIndentValueAccess().getRule();
	}

	////Hyperlink:
	////	property = 'link' (uri = STRING | InternalBookmark = [BodyElement])
	////; //#TODO Hyperlink: | DrillTrough = STRING | InternalBookmark = Element, Bookmark | Add Builder Expression
	//PageBreak:
	//	"page-break" "{" (("before" before=PageBreakValue)? & ("after" after=PageBreakValue)? & ("inside"
	//	inside=PageBreakValue)? & ("interval" interval=IntLiteral)? & ("repeat-header" repeat=BooleanLiteral)?) "}";
	public PageBreakElements getPageBreakAccess() {
		return pPageBreak;
	}
	
	public ParserRule getPageBreakRule() {
		return getPageBreakAccess().getRule();
	}

	//Visibility:
	//	"visibility" (show?="true" | "hide for" (HideAll | HideForOne | HideForMore));
	public VisibilityElements getVisibilityAccess() {
		return pVisibility;
	}
	
	public ParserRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//LegendVisibility:
	//	"visibility" value=("true" | "hide");
	public LegendVisibilityElements getLegendVisibilityAccess() {
		return pLegendVisibility;
	}
	
	public ParserRule getLegendVisibilityRule() {
		return getLegendVisibilityAccess().getRule();
	}

	//HideAll:
	//	"all" expression=JSExpression?;
	public HideAllElements getHideAllAccess() {
		return pHideAll;
	}
	
	public ParserRule getHideAllRule() {
		return getHideAllAccess().getRule();
	}

	//HideForOne:
	//	"{" value+=HideForValue+ "}";
	public HideForOneElements getHideForOneAccess() {
		return pHideForOne;
	}
	
	public ParserRule getHideForOneRule() {
		return getHideForOneAccess().getRule();
	}

	//HideForValue returns HideAll:
	//	format=OutputFormatType expression=JSExpression?;
	public HideForValueElements getHideForValueAccess() {
		return pHideForValue;
	}
	
	public ParserRule getHideForValueRule() {
		return getHideForValueAccess().getRule();
	}

	//HideForMore:
	//	"(" format+=OutputFormatType+ ")" expression=JSExpression?;
	public HideForMoreElements getHideForMoreAccess() {
		return pHideForMore;
	}
	
	public ParserRule getHideForMoreRule() {
		return getHideForMoreAccess().getRule();
	}

	//JSExpression:
	//	"{" value=Literal //#TODO Builder Expression
	//	"}";
	public JSExpressionElements getJSExpressionAccess() {
		return pJSExpression;
	}
	
	public ParserRule getJSExpressionRule() {
		return getJSExpressionAccess().getRule();
	}

	//Toc:
	//	"toc" style=StyleRef? value=JSExpression;
	public TocElements getTocAccess() {
		return pToc;
	}
	
	public ParserRule getTocRule() {
		return getTocAccess().getRule();
	}

	//Bookmark:
	//	"bookmark" expression=JSExpression;
	public BookmarkElements getBookmarkAccess() {
		return pBookmark;
	}
	
	public ParserRule getBookmarkRule() {
		return getBookmarkAccess().getRule();
	}

	//StyleRef:
	//	"style" refname=[Style];
	public StyleRefElements getStyleRefAccess() {
		return pStyleRef;
	}
	
	public ParserRule getStyleRefRule() {
		return getStyleRefAccess().getRule();
	}

	//Style:
	//	"style" name=ID ("{" properties+=LabelProperties "}")?;
	public StyleElements getStyleAccess() {
		return pStyle;
	}
	
	public ParserRule getStyleRule() {
		return getStyleAccess().getRule();
	}

	//Width:
	//	"width" value=IndentValue;
	public WidthElements getWidthAccess() {
		return pWidth;
	}
	
	public ParserRule getWidthRule() {
		return getWidthAccess().getRule();
	}

	//Height:
	//	"height" value=IndentValue;
	public HeightElements getHeightAccess() {
		return pHeight;
	}
	
	public ParserRule getHeightRule() {
		return getHeightAccess().getRule();
	}

	//AltText:
	//	"alt-text" expression=JSExpression;
	public AltTextElements getAltTextAccess() {
		return pAltText;
	}
	
	public ParserRule getAltTextRule() {
		return getAltTextAccess().getRule();
	}

	/// ***************************************
	// *   E N U M S
	// *************************************** / enum SizeUnit:
	//	M="medium" | L="large" | Lr="larger" | XL="x-large" | XXL="xx-large" | S="small" | Sr="smaller" | XS="x-small" |
	//	XXS="xx-small";
	public SizeUnitElements getSizeUnitAccess() {
		return unknownRuleSizeUnit;
	}
	
	public EnumRule getSizeUnitRule() {
		return getSizeUnitAccess().getRule();
	}

	//enum LengthUnit:
	//	cm | ems | exs | in | mm | pc | pt | px;
	public LengthUnitElements getLengthUnitAccess() {
		return unknownRuleLengthUnit;
	}
	
	public EnumRule getLengthUnitRule() {
		return getLengthUnitAccess().getRule();
	}

	//enum HalignmentType:
	//	left | center | right | justify;
	public HalignmentTypeElements getHalignmentTypeAccess() {
		return unknownRuleHalignmentType;
	}
	
	public EnumRule getHalignmentTypeRule() {
		return getHalignmentTypeAccess().getRule();
	}

	//enum ValignmentType:
	//	bottom | middle | top;
	public ValignmentTypeElements getValignmentTypeAccess() {
		return unknownRuleValignmentType;
	}
	
	public EnumRule getValignmentTypeRule() {
		return getValignmentTypeAccess().getRule();
	}

	//enum WhitespaceType:
	//	nowrap="no-wrapping" | normal | pre="preformatted";
	public WhitespaceTypeElements getWhitespaceTypeAccess() {
		return unknownRuleWhitespaceType;
	}
	
	public EnumRule getWhitespaceTypeRule() {
		return getWhitespaceTypeAccess().getRule();
	}

	//enum DisplayType:
	//	block | inline | none="no";
	public DisplayTypeElements getDisplayTypeAccess() {
		return unknownRuleDisplayType;
	}
	
	public EnumRule getDisplayTypeRule() {
		return getDisplayTypeAccess().getRule();
	}

	//enum BorderLineStyleType:
	//	solid | dotted | dashed | double;
	public BorderLineStyleTypeElements getBorderLineStyleTypeAccess() {
		return unknownRuleBorderLineStyleType;
	}
	
	public EnumRule getBorderLineStyleTypeRule() {
		return getBorderLineStyleTypeAccess().getRule();
	}

	//enum WidthType:
	//	thin | medium | thick;
	public WidthTypeElements getWidthTypeAccess() {
		return unknownRuleWidthType;
	}
	
	public EnumRule getWidthTypeRule() {
		return getWidthTypeAccess().getRule();
	}

	//enum OutputFormatType:
	//	xlsx | postscript | docx | pptx | pdf | xls | ppt | doc | html | odp | odt | ods;
	public OutputFormatTypeElements getOutputFormatTypeAccess() {
		return unknownRuleOutputFormatType;
	}
	
	public EnumRule getOutputFormatTypeRule() {
		return getOutputFormatTypeAccess().getRule();
	}

	//enum PageBreakType:
	//	pageBreakAfter="after" | pageBreakBefore="before" | pageBreakInside="inside";
	public PageBreakTypeElements getPageBreakTypeAccess() {
		return unknownRulePageBreakType;
	}
	
	public EnumRule getPageBreakTypeRule() {
		return getPageBreakTypeAccess().getRule();
	}

	//enum PageBreakValue:
	//	auto | always | avoid;
	public PageBreakValueElements getPageBreakValueAccess() {
		return unknownRulePageBreakValue;
	}
	
	public EnumRule getPageBreakValueRule() {
		return getPageBreakValueAccess().getRule();
	}

	//enum SortType:
	//	asc | desc;
	public SortTypeElements getSortTypeAccess() {
		return unknownRuleSortType;
	}
	
	public EnumRule getSortTypeRule() {
		return getSortTypeAccess().getRule();
	}

	//enum BorderType:
	//	R="right" | L="left" | T="top" | B="bottom";
	public BorderTypeElements getBorderTypeAccess() {
		return unknownRuleBorderType;
	}
	
	public EnumRule getBorderTypeRule() {
		return getBorderTypeAccess().getRule();
	}

	//enum TargetType:
	//	Blank="blank" | Parent="parent" | Self="self" | Top="top";
	public TargetTypeElements getTargetTypeAccess() {
		return unknownRuleTargetType;
	}
	
	public EnumRule getTargetTypeRule() {
		return getTargetTypeAccess().getRule();
	}

	//enum DrillThroughType:
	//	NewWindow="new-window" | SameFrame="same-frame" | ParentFrame="parent-frame" | WholePage="whole-page";
	public DrillThroughTypeElements getDrillThroughTypeAccess() {
		return unknownRuleDrillThroughType;
	}
	
	public EnumRule getDrillThroughTypeRule() {
		return getDrillThroughTypeAccess().getRule();
	}

	//enum ColorType:
	//	aqua | blue | black | fuchsia | gray | green | lime | maroon | navy | olive | orange | purple | red | silver | teal |
	//	yellow | white;
	public ColorTypeElements getColorTypeAccess() {
		return unknownRuleColorType;
	}
	
	public EnumRule getColorTypeRule() {
		return getColorTypeAccess().getRule();
	}

	//enum ParameterControlType:
	//	chb="check-box" | tb="text-box" | lb="list-box" | rb="radio-button" | cb="combo-box";
	public ParameterControlTypeElements getParameterControlTypeAccess() {
		return unknownRuleParameterControlType;
	}
	
	public EnumRule getParameterControlTypeRule() {
		return getParameterControlTypeAccess().getRule();
	}

	//enum ParameterValueType:
	//	dynamic | static;
	public ParameterValueTypeElements getParameterValueTypeAccess() {
		return unknownRuleParameterValueType;
	}
	
	public EnumRule getParameterValueTypeRule() {
		return getParameterValueTypeAccess().getRule();
	}

	//enum ParameterType:
	//	multi | simple;
	public ParameterTypeElements getParameterTypeAccess() {
		return unknownRuleParameterType;
	}
	
	public EnumRule getParameterTypeRule() {
		return getParameterTypeAccess().getRule();
	}

	//enum DataType:
	//	boolean | date | datetime | decimal | float | integer | string | time;
	public DataTypeElements getDataTypeAccess() {
		return unknownRuleDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//enum StaticParameterSort:
	//	label | value;
	public StaticParameterSortElements getStaticParameterSortAccess() {
		return unknownRuleStaticParameterSort;
	}
	
	public EnumRule getStaticParameterSortRule() {
		return getStaticParameterSortAccess().getRule();
	}

	//enum AggregatorFunction:
	//	count | sum | max | min;
	public AggregatorFunctionElements getAggregatorFunctionAccess() {
		return unknownRuleAggregatorFunction;
	}
	
	public EnumRule getAggregatorFunctionRule() {
		return getAggregatorFunctionAccess().getRule();
	}

	////enum 
	/// ** *************************************
	// *   T E R M I N A L S
	// ** *************************************
	// * / terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 

	//terminal FLOAT:
	//	"0".."9"+ "." "0".."9"*;
	public TerminalRule getFLOATRule() {
		return tFLOAT;
	} 

	//terminal HEX_COLOR:
	//	"#" ("0".."9" | "a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F") ("0".."9" |
	//	"a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F");
	public TerminalRule getHEX_COLORRule() {
		return tHEX_COLOR;
	} 

	////terminal RGB_COLOR:
	////	('0'..'9' |
	////	(('1'..'9')('0'..'9')) |
	////	('1')('0'..'9')('0'..'9') |
	////	('2')('0'..'4')('0'..'9') |
	////	('2')('5')('0'..'5'))
	////;
	////terminal BOOLEAN_CONSTANT returns ecore::EBoolean:
	////	'true' | 'false';
	////terminal NULL_CONSTANT:
	////	'null';
	/// * *************************************************
	// * Grammar for SelectStatement are remade from 
	// * https://sourceforge.net/projects/plsql-xtext/
	// * http://plsql-editor.eclipselabs.org.codespot.com/svn-history/r3/plsql.editor.xtext/src/plsql/editor/xtext/PlSql.xtext
	// * ************************************************* / //SelectStatement:
	////	'query' name = ID '{'
	////	'select' distinct?='distinct'? unique?='unique'? all?='all'?
	////	selectItem+=SelectColumn (',' selectItems+=SelectColumn)*
	////	'from' tables+=TableReference (',' tables+=TableReference)*
	////	whereClause=WhereClause?
	////	orderClause=OrderClause?
	////	'}'
	////;
	////
	////SelectItem
	////	: SelectColumn
	////	| SelectWildcard
	////;
	////
	////SelectWildcard:
	////	wildcard='*'
	////;
	////
	////SelectColumn:	
	////	item = Expression
	//////	((as Separator ?= 'as')? name=ID)?
	////;
	////
	////TableReference:
	////	name=ObjectReference
	////	alias=ID?
	////;
	////
	////ObjectReference:
	////	(ID '.')?ID
	////;
	////
	////WhereClause: // outer joins are function calls which outerJoin = true
	////	'where' condition=Expression
	////;
	////
	////OrderClause:
	////	'order' 'by' orders+=OrderColumn (',' orders +=OrderColumn)*
	////;
	////OrderColumn:
	////	expression = Expression
	////	asc?='asc'?
	////	desc?='desc'?
	////;
	////
	///// ** **************************************************************
	//// *    E X P R E S S I O N
	//// *****************************************************************
	//// * /
	//// 
	////Expression
	////	:
	//////	Literal
	//////	| VariableRefExpression
	//////	| FunctionExpression
	////BooleanExpression
	////	
	///// *	| simple_expression
	////| compound_expression
	////| case_expression
	////| cursor_expression
	////| datetime_expression
	////| function_expression
	////| interval_expression
	////| object_access_expression
	////| scalar_subquery_expression
	////| model_expression
	////| type_constructor_expression
	////| variable_expression
	////	* /
	////	;
	////
	////BooleanOperator :
	//// EqualTo | NotEqualTo | LessThan | GreaterThan | LessEqual | GreaterEqual | Like | Or | And | Is 
	////;
	////
	////Like : 'like';
	////EqualTo : '=' ;
	////NotEqualTo : '!=' | '~=' | '<>' | '^=' ;
	////LessThan : '<';
	////GreaterThan : '>';
	////LessEqual : '<=';
	////GreaterEqual : '>=';
	////Or: 'or';
	////And: 'and';
	////Is: 'is';
	////
	////BooleanExpression returns Expression:
	////  InExpression ({BooleanExpression.left=current} operator=BooleanOperator right=InExpression)*
	////;
	////
	////InExpression returns Expression:
	////	Addition ({InExpression.left=current} 'in' '(' values+=Expression (',' values+=Expression)* ')')?
	////;
	////
	////Addition returns Expression:
	////  StrCombine ({Addition.left=current} operator=('+'|'-') right=StrCombine)*;
	////  
	////StrCombine returns Expression:
	////  Multiplication ({StrCombine.left=current} '||' right=Multiplication)*;
	////  
	////Multiplication returns Expression:
	////  PrimaryExpression ({Multiplication.left=current} operator=('*'|'/') right=PrimaryExpression)*;
	////  
	////PrimaryExpression returns Expression:
	////  Literal | VariableReference | FunctionCall | Negation | '(' BooleanExpression ')';
	////
	////FunctionCall returns Expression
	////	: (schemaName=ID '.')? name=ID
	////	'(' 
	////		((outerJoin?='+') 
	////		| (param+=FunctionParameter (',' param+=FunctionParameter )*))? 
	////	')'
	////	;
	////
	////FunctionParameter
	////	: (parameterName=ID '=>')? nextValue=BooleanExpression
	////;
	////
	////VariableReference
	////	: variablePath+=ID ('.' variablePath+=ID)* 
	////;
	////
	////Negation returns Expression
	////	: 'not' negatedValue=PrimaryExpression
	////;
	////
	///// ** *************************************
	//// *   L I T E R A L S
	//// ** *************************************
	//// * /
	//Literal:
	//	FloatLiteral | IntLiteral | StringLiteral | BooleanLiteral | NullLiteral | {ID} value=[DatasetField|QualifiedName];
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	////
	//////SQLLiteral:
	//////	literal=('SQL%ROWCOUNT')
	//////;
	//IntLiteral:
	//	value= //NUMBER
	//	INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}

	//FloatLiteral:
	//	value=FLOAT;
	public FloatLiteralElements getFloatLiteralAccess() {
		return pFloatLiteral;
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//// TODO: Make a boolean out of this.
	//BooleanLiteral:
	//	value=("true" | "false");
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	/// ** *************************************
	// *   END OF SELECT STATEMENT
	// ** *************************************
	// * / //HTML TEXT TAGS
	////General:
	////<B></B>
	////<I></I>
	////<U></U>
	////<FONT size="" color="" face=""></FONT>
	////Formatting:
	////<H1></H1>
	////<H2></H2>
	////<H3></H3>
	////<H4></H4>
	////<H5></H5>
	////<H6></H6>
	////<SUB></SUB>
	////<SUP></SUP>
	////<EM></EM>
	////<STRONG></STRONG>
	////<PRE></PRE>
	////<CODE></CODE>
	////<TT></TT>
	////Layout:
	////<CENTER></CENTER>
	////<BR>
	////<P></P>
	////<DIV></DIV>
	////<SPAN></SPAN>
	////Content:
	////<IMG src="" alt="">
	////<A name="" href=""></A>
	////<INS cite=""></INS>
	////<DEL cite=""></DEL>
	////<IMAGE name="" type=""></IMAGE>
	////Lists:
	////<DL></DL>
	////<UL></UL>
	////<LI></LI>
	////<DT></DT>
	////<DD></DD>
	////Dynamic Text:
	////<VALUE-OF format=""></VALUE-OF>
	////format="HTML"
	////Numbers:
	////format="General Number"
	////format="#,##0.00{RoundingMode=HALF_UP}"
	////format="###0.00%{RoundingMode=HALF_UP}"
	////format="0.00E00{RoundingMode=HALF_UP}"
	////format="###0.00{RoundingMode=HALF_UP}"
	////format="###0.00{RoundingMode=HALF_EVEN}" 
	////format="###0.00{RoundingMode=HALF_DOWN}"
	////format="###0.00{RoundingMode=CEILING}" 
	////format="###0.00{RoundingMode=UNNECESSARY}"
	////format="###0.00{RoundingMode=UP}"
	////format="###0.00{RoundingMode=DOWN}"
	////format="###0.00{RoundingMode=FLOOR}"
	////format="$ #,##0.00;$ (#,##0.00){RoundingMode=HALF_UP}"
	////
	////String:
	//// format=">" Uppercase
	//// format="<" Lowercase
	//// format="^" String with leading whitespace
	//// format="@@@-@@-@@@@"
	////DateTime:
	//// format="d. MMMM y HH:mm:ss z"
	//// ... NullLiteral:
	//	{NullLiteral} "null";
	public NullLiteralElements getNullLiteralAccess() {
		return pNullLiteral;
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}
}
