/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import org.xtext.example.mydsl.rDsl.Report
import org.xtext.example.mydsl.rDsl.Datasource
import org.xtext.example.mydsl.rDsl.Dataset
import org.xtext.example.mydsl.rDsl.ReportElements
import org.xtext.example.mydsl.rDsl.Grid
import org.xtext.example.mydsl.rDsl.Label
import org.xtext.example.mydsl.rDsl.Column
import org.xtext.example.mydsl.rDsl.Row
import org.xtext.example.mydsl.rDsl.Cell
import org.xtext.example.mydsl.rDsl.Text
import org.xtext.example.mydsl.rDsl.DynamicText
import org.xtext.example.mydsl.rDsl.Image
import org.xtext.example.mydsl.rDsl.Chart
import org.xtext.example.mydsl.rDsl.List
import org.xtext.example.mydsl.rDsl.xData
import org.xtext.example.mydsl.rDsl.Table
import org.xtext.example.mydsl.rDsl.CrossTable
import org.xtext.example.mydsl.rDsl.LabelProperties
import org.xtext.example.mydsl.rDsl.SizeValue
import org.xtext.example.mydsl.rDsl.SizeValuePercent
import org.xtext.example.mydsl.rDsl.SizeValueUnit
import org.xtext.example.mydsl.rDsl.HexColor
import org.xtext.example.mydsl.rDsl.StringColor
import org.xtext.example.mydsl.rDsl.BorderAll
import org.xtext.example.mydsl.rDsl.BorderSide
import org.xtext.example.mydsl.rDsl.BorderLine
import org.xtext.example.mydsl.rDsl.Font
import org.xtext.example.mydsl.rDsl.FontSize
import org.xtext.example.mydsl.rDsl.Color
import org.xtext.example.mydsl.rDsl.TextStyle
import org.xtext.example.mydsl.rDsl.Border
import org.xtext.example.mydsl.rDsl.BorderWidth
import org.xtext.example.mydsl.rDsl.WidthTypeValue
import org.xtext.example.mydsl.rDsl.Padding
import org.xtext.example.mydsl.rDsl.IndentValue
import org.xtext.example.mydsl.rDsl.IndentAll
import org.xtext.example.mydsl.rDsl.IndentSide
import org.xtext.example.mydsl.rDsl.Visibility
import org.xtext.example.mydsl.rDsl.HideAll
import org.xtext.example.mydsl.rDsl.HideForOne
import org.xtext.example.mydsl.rDsl.JSExpression
import org.xtext.example.mydsl.rDsl.HideForMore
import org.xtext.example.mydsl.rDsl.Display
import org.xtext.example.mydsl.rDsl.PageBreak
import org.xtext.example.mydsl.rDsl.Toc
import org.xtext.example.mydsl.rDsl.Bookmark
import org.xtext.example.mydsl.rDsl.Style
import org.xtext.example.mydsl.rDsl.PageSetup
import org.xtext.example.mydsl.rDsl.PageProperties
import org.xtext.example.mydsl.rDsl.StyleRef
import org.xtext.example.mydsl.rDsl.Width
import org.xtext.example.mydsl.rDsl.Height
import org.xtext.example.mydsl.rDsl.AltText
import org.xtext.example.mydsl.rDsl.StringLiteral
import org.xtext.example.mydsl.rDsl.DatasourceSample
import org.xtext.example.mydsl.rDsl.DatasourceJDBC
import org.xtext.example.mydsl.rDsl.Parameter
import org.xtext.example.mydsl.rDsl.DatasetField
import org.xtext.example.mydsl.rDsl.BooleanLiteral
import org.xtext.example.mydsl.rDsl.StaticParameterValues
import org.xtext.example.mydsl.rDsl.DynamicParameterValues
import org.xtext.example.mydsl.rDsl.DynamicParameterValue
import org.xtext.example.mydsl.rDsl.StaticParameterValue
import org.xtext.example.mydsl.rDsl.ComputedDatasetField
import org.xtext.example.mydsl.rDsl.ColorPalette
import org.xtext.example.mydsl.rDsl.RgbColor
import org.xtext.example.mydsl.rDsl.Title
import org.xtext.example.mydsl.rDsl.Axe
import org.xtext.example.mydsl.rDsl.ChartGrid
import org.xtext.example.mydsl.rDsl.ChartElementProperties
import org.xtext.example.mydsl.rDsl.Legend
import org.xtext.example.mydsl.rDsl.YAxe
import org.xtext.example.mydsl.rDsl.HAlignment
import org.xtext.example.mydsl.rDsl.VAlignment
import org.xtext.example.mydsl.rDsl.Whitespace
import org.xtext.example.mydsl.rDsl.LegendVisibility

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class RDslGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		for (e : resource.allContents.toIterable.filter(Report)) {
			fsa.generateFile(e.name+"_gen.rptdesign",
				e.compile.toString.replaceAll('\r\n', '').replaceAll('\t', ''))
		}
	}
	int A = 0 // Variable for id's count
	int P = 0 // Variable for dataset parameters count
	def compile(Report r)
	'''
		<?xml version="1.0" encoding="UTF-8"?>
		<report xmlns="http://www.eclipse.org/birt/2005/design" version="3.2.23" id="«A=A+1»">
			<property name="author">rDSL-User</property>
			<property name="createdBy"></property>
			<property name="units">in</property>
			<property name="layoutPreference">fixed layout</property>
			«IF r.datasources != null»
			<data-sources>
				«FOR ds : r.datasources.datasource»
					«ds.compile»
				«ENDFOR»
			</data-sources>
			«ENDIF»
			«IF r.datasets != null»
			<data-sets>
				«FOR dt : r.datasets.dataset»
					«dt.compile»
				«ENDFOR»
			</data-sets>
			«ENDIF»
			«IF r.parameters != null»
			<parameters>
				«FOR p : r.parameters.parameter»
					«p.compile»
				«ENDFOR»
			</parameters>
			«ENDIF»
			«IF r.styles != null»
			<styles>
				«FOR s : r.styles.style»
					«s.compile»
				«ENDFOR»
			</styles>
			«ENDIF»
			«IF r.pagesetup != null»
			<page-setup>
					<simple-master-page name="Simple MasterPage" id="«A=A+1»">
					«(r.pagesetup).compile»
					</simple-master-page>
			</page-setup>
			«ENDIF»
			«IF r.body != null»
			<body>
				«FOR b : r.body.elements»
					«b.compile»
				«ENDFOR»
			</body>
			«ENDIF»
		</report>
	'''
/*******************************
* DATA ELEMENTS
*******************************/	
	def compile(Datasource d)
	'''
		«IF d.type instanceof DatasourceSample»
		<oda-data-source extensionID="org.eclipse.birt.report.data.oda.sampledb" name="«d.name»" id="«A=A+1»"/>
		«ENDIF»
		«IF d.type instanceof DatasourceJDBC»
		<oda-data-source extensionID="org.eclipse.birt.report.data.oda.jdbc" name="«d.name»" id="«A=A+1»">
			<list-property name="privateDriverProperties">
				<ex-property>
					<name>metadataBidiFormatStr</name>
					<value>ILYNN</value>
				</ex-property>
				<ex-property>
					<name>disabledMetadataBidiFormatStr</name>
				</ex-property>
				<ex-property>
					<name>contentBidiFormatStr</name>
					<value>ILYNN</value>
				</ex-property>
				<ex-property>
					<name>disabledContentBidiFormatStr</name>
				</ex-property>
			</list-property>
			<property name="odaDriverClass">«(d.type as DatasourceJDBC).driver»</property>
			<property name="odaURL">«(d.type as DatasourceJDBC).url»</property>
			<property name="odaUser">«(d.type as DatasourceJDBC).user»</property>
			<encrypted-property name="odaPassword" encryptionID="base64">«(d.type as DatasourceJDBC).password»</encrypted-property>
		</oda-data-source>
		«ENDIF»
	'''
	def compile(Dataset d)
	'''
		<oda-data-set extensionID="org.eclipse.birt.report.data.oda.jdbc.JdbcSelectDataSet" name="«d.name»" id="«A=A+1»">
			<list-property name="parameters"/>
			<list-property name="parameters">
				«FOR p : d.parameter»
				«P=P+1»
				<structure>
					<property name="name">«P»</property>
					<property name="paramName">«p.name»</property>
					<property name="nativeName"></property>
					<property name="dataType">integer</property>
					<property name="nativeDataType">4</property>
					<property name="position">«P»</property>
					<property name="isOptional">true</property>
					<property name="allowNull">true</property>
					<property name="isInput">true</property>
					<property name="isOutput">false</property>
				</structure>
				«ENDFOR»
			</list-property>
			«P=0»
			<property name="dataSource">«d.datasourceref.name»</property>
			<list-property name="computedColumns">
			«FOR c : d.field»
			«IF c instanceof ComputedDatasetField»
				«c.compile»
			«ENDIF»
			«ENDFOR»
			</list-property>	
			<xml-property name="queryText"><![CDATA[«d.query.toString»]]></xml-property>
		</oda-data-set>
	'''
	def compile(ComputedDatasetField c)
	'''
		<structure>
			<property name="name">«c.name»</property>
			<property name="dataType">«c.datatype»</property>
			<property name="aggregateFunction">«c.aggregation.toString.toUpperCase»</property>
			<list-property name="arguments">
				<structure>
					<property name="name">Expression</property>
					<expression name="value">row["«c.argument.compile.toString.trim»"]</expression>
				</structure>
			</list-property>
			«IF c.filter != null»
			<expression name="filterExpr">«c.filter.compile»</expression>
			«ENDIF»
		</structure>
	'''
/*******************************
* PAGE SETUP
*******************************/
	def compile(PageSetup s)
	'''
		«FOR p : s.properties»
			«p.compile»
		«ENDFOR»
	'''
/*******************************
* END OF PAGE SETUP
*******************************/

/*******************************
* PARAMETERS
*******************************/
	def compile(Parameter p)
	'''
		<scalar-parameter name="«p.name»" id="«A=A+1»">
		«IF p.hide != null»<property name="hidden">«p.hide.value»</property>«ENDIF»
		«IF p.help != null»<text-property name="helpText">«p.help»</text-property>«ENDIF»
		«IF p.promt != null»<text-property name="promptText">«p.promt»</text-property>«ENDIF»
		«IF p.required != null»<property name="isRequired">«p.required.value»</property>«ENDIF»
		<property name="valueType">«p.valuetype»</property>
		<property name="dataType">«p.datatype»</property>
		«IF p.duplicate != null»<property name="distinct">«p.duplicate.value»</property>«ENDIF»
		«IF p.values instanceof DynamicParameterValues»
			«(p.values as DynamicParameterValues).compile»
		«ELSEIF p.values instanceof StaticParameterValues»
			«(p.values as StaticParameterValues).compile»
		«ENDIF»
		<property name="paramType">«IF p.paramtype.toString == "multi"»«p.paramtype»-value«ELSE»«p.paramtype»«ENDIF»</property>
		«IF p.controltype.toString == 'combo-box'»
		<property name="controlType">list-box</property>
		<property name="mustMatch">false</property>
		<property name="fixedOrder">false</property>
		«ELSEIF p.controltype.toString == 'text-box'»
		<property name="controlType">«p.controltype»</property>
		<property name="concealValue">false</property>
		«ELSEIF p.controltype.toString == 'check-box'»
		<property name="controlType">«p.controltype»</property>
		«ELSEIF (p.controltype.toString == ('list-box') || p.controltype.toString == ('radio-button'))»
		<property name="controlType">«p.controltype»</property>
		<property name="mustMatch">true</property>
		<property name="fixedOrder">false</property>
		«ENDIF»
		<structure name="format">
			<property name="category">Unformatted</property>
		</structure>
		</scalar-parameter>
	'''
	def compile(DynamicParameterValues p)
	'''
		«FOR v : p.value»
			«(v as DynamicParameterValue).compile»
		«ENDFOR»
	'''
	def compile(StaticParameterValues p)
	'''
		<simple-property-list name="defaultValue">
		«FOR v : p.value»
			«IF v.^default»
			<value type="javascript">«(v as StaticParameterValue).value»</value>
			«ENDIF»
		«ENDFOR»
		</simple-property-list>
		<property name="sortBy">«p.sort»</property>
		<property name="sortDirection">«p.sorttype»</property>
		<list-property name="selectionList">
		«FOR v : p.value»
			«(v as StaticParameterValue).compile»
		«ENDFOR»
		</list-property>
	'''	
	def compile(DynamicParameterValue p)
	'''
		<property name="dataSetName">«p.dataset.name»</property>
		<expression name="valueExpr" type="javascript">dataSetRow["«p.value.compile.toString.trim»"]</expression>
		<expression name="labelExpr" type="javascript">dataSetRow["«p.label.compile.toString.trim»"]</expression>
		<expression name="sortByColumn">dataSetRow["«(p.sort.compile).toString.trim»"]</expression>
		<property name="sortDirection">«p.sorttype»</property>
		<simple-property-list name="defaultValue">
		«FOR d : p.^default»
			<value type="javascript">«d.compile»</value>
		«ENDFOR»
		</simple-property-list>
	'''
	def compile(StaticParameterValue p)
	'''
		<structure>
			<property name="value">«p.value»</property>
			<property name="label">«p.label»</property>
		</structure>
	'''
/*******************************
* END OF PARAMETERS
*******************************/
/*******************************
* STYLES
*******************************/

/*******************************
* END OF STYLES
*******************************/

/*******************************
* END OF DATA ELEMENTS
*******************************/	
	def compile(ReportElements e)
	'''
		«IF e instanceof Grid»«e.compile»«ENDIF»
		«IF e instanceof Label»«e.compile»«ENDIF»
		«IF e instanceof Text»«e.compile»«ENDIF»
		«IF e instanceof DynamicText»«e.compile»«ENDIF»
		«IF e instanceof xData»«e.compile»«ENDIF»
		«IF e instanceof Image»«e.compile»«ENDIF»
		«IF e instanceof Chart»«e.compile»«ENDIF»
		«IF e instanceof List»«e.compile»«ENDIF»
		«IF e instanceof Table»«e.compile»«ENDIF»
		«IF e instanceof CrossTable»«e.compile»«ENDIF»
	'''
/*******************************
* REPORT ELEMENTS
*******************************/	
	def compile(Grid g)
	'''
		<grid name="«g.name»" id="«A=A+1»">
			«FOR p : g.properties»
				«p.compile»
			«ENDFOR»		
			«FOR c : g.columns»
				«c.compile»
			«ENDFOR»
			«FOR r : g.rows»
				«r.compile»
			«ENDFOR»
		</grid>
	'''
	def compile(Column c)
	'''
		<column id="«A=A+1»">
		«FOR p : c.properties»
			«p.compile»
		«ENDFOR»		
		</column>
	'''
	def compile(Row r)
	'''
		<row id="«A=A+1»">
		«FOR p : r.properties»
			«p.compile»
		«ENDFOR»
		«FOR c : r.cells»
			«c.compile»
		«ENDFOR»
		</row>
	'''
	def compile(Cell c)
	'''
		<cell id="«A=A+1»">
		«FOR p : c.properties»
			«p.compile»
		«ENDFOR»
		«FOR e : c.elements»
			«e.compile»
		«ENDFOR»
		</cell>
	'''
	def compile(Table t)
	'''
		<table name="«t.name»">
		«FOR p : t.properties»
			«p.compile»
		«ENDFOR»
		«IF t.dataset != null»
			«t.dataset.getBoundDataset»
		«ENDIF»
		«FOR c : t.columns»
			«c.compile»
		«ENDFOR»
		«FOR hr : t.headerrows»
			<header>
			«hr.compile»
			</header>
		«ENDFOR»
		«FOR dr : t.detailrows»
			<detail>
			«dr.compile»
			</detail>
		«ENDFOR»
		«FOR fr : t.footerrows»
			<footer>
			«fr.compile»
			</footer>
		«ENDFOR»
		</table>
	'''
	def compile(List l)
	'''
		<list name="«l.name»" id="«A=A+1»">
		«FOR p : l.properties»
			«p.compile»
		«ENDFOR»		
		«FOR hr : l.headerelements»
			<header>
			«hr.compile»
			</header>
		«ENDFOR»
		«FOR dr : l.detailelements»
			<detail>
			«dr.compile»
			</detail>
		«ENDFOR»
		«FOR fr : l.footerelements»
			<footer>
			«fr.compile»
			</footer>
		«ENDFOR»
		</list>
	'''
	def compile(CrossTable t)
	'''
		<cross-table>
		«FOR p : t.properties»
			«p.compile»
		«ENDFOR»		
		</cross-table>
	'''
	def compile(Label l)
	'''
		<label name="«l.name»" id="«A=A+1»">
			<text-property name="text">«l.content»</text-property>
			«FOR p : l.properties»
				«p.compile»
			«ENDFOR»
		</label>
	'''
	def compile(Text t)
	'''
	    <text id="«A=A+1»">
	        <property name="contentType">html</property>
	        <text-property name="content"><![CDATA[«t.content»]]></text-property>
	        «FOR p : t.properties»
				«p.compile»
			«ENDFOR»
	    </text>
	'''
	def compile(DynamicText d)
	'''
		<text-data id="«A=A+1»">
			<expression name="valueExpr">«d.content.compile»</expression>
			<property name="contentType">html</property>
			«FOR p : d.properties»
				«p.compile»
			«ENDFOR»
		</text-data>
	'''
	def compile(xData d)
	'''
		<data id="«A=A+1»">
			<property name="resultSetColumn">«d.content.compile»</property>
			«FOR p : d.properties»
				«p.compile»
			«ENDFOR»
		</data>
	'''
	def compile(Image i)
	'''
		<image id="«A=A+1»">
		«FOR p : i.properties» 		
			«p.compile»
		«ENDFOR»
		«IF i.type != null»
			<property name="source">«i.type.toString»</property>
			<expression name="uri" type="javascript">«i.content.compile»</expression>	
		«ENDIF»
		</image>
	'''
	def compile(Chart c)
	'''
	<extended-item extensionName="Chart" name="«c.name»" id="«A=A+1»">
		<xml-property name="xmlRepresentation"><![CDATA[ 
		«IF c.type.toString == 'pie'»
		<model:ChartWithoutAxes 
		«ELSE»
		<model:ChartWithAxes 
		«ENDIF»
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
			xmlns:attribute="http://www.birt.eclipse.org/ChartModelAttribute" 
			«IF c.type.toString != 'pie'»xmlns:data="http://www.birt.eclipse.org/ChartModelData" «ENDIF»
			xmlns:layout="http://www.birt.eclipse.org/ChartModelLayout" 
			xmlns:model="http://www.birt.eclipse.org/ChartModel" 
			xmlns:type="http://www.birt.eclipse.org/ChartModelType">
		  <Version>2.6.1</Version>
		  <Type>«c.type.toString.toFirstUpper» Chart</Type>
		  <SubType>«IF c.type.toString == 'pie'»standart«ELSE»«c.subtype.toString.toFirstUpper»«ENDIF»</SubType>
		  <Block>
		    <Children xsi:type="layout:TitleBlock">«c.title.chartTitleBlock»</Children>
		    <Children xsi:type="layout:Plot">«chartPlotBlock»</Children>
		    <Children xsi:type="layout:Legend">«c.legend.chartLegendBlock»</Children>
		    <Bounds>
		      <Left>0.0</Left>
		      <Top>0.0</Top>
		      <Width>212.0</Width>
		      <Height>130.0</Height>
		    </Bounds>
		    <Insets>
		      <Top>3.0</Top>
		      <Left>3.0</Left>
		      <Bottom>3.0</Bottom>
		      <Right>3.0</Right>
		    </Insets>
		    <Row>-1</Row>
		    <Column>-1</Column>
		    <Rowspan>-1</Rowspan>
		    <Columnspan>-1</Columnspan>
		    <Outline>
		      <Style>Solid</Style>
		      <Thickness>1</Thickness>
		      <Color>
		        <Transparency>255</Transparency>
		        <Red>0</Red>
		        <Green>0</Green>
		        <Blue>0</Blue>
		      </Color>
		      <Visible>false</Visible>
		    </Outline>
		    <Visible>true</Visible>
		  </Block>
		  <Dimension>Two_Dimensional</Dimension>
		  <Units>Points</Units>
		  <SeriesThickness>10.0</SeriesThickness>
		  «IF c.type.toString == 'pie'»<GridColumnCount>0</GridColumnCount>«ENDIF»
		  <ExtendedProperties>
		    <Name>enable.area.alt</Name>
		    <Value>false</Value>
		  </ExtendedProperties>
		  <SampleData>
		    <BaseSampleData>
		      <DataSetRepresentation>'A','B','C','D','E'</DataSetRepresentation>
		    </BaseSampleData>
		    <OrthogonalSampleData>
		      <DataSetRepresentation>6,4,12,8,10</DataSetRepresentation>
		      <SeriesDefinitionIndex>0</SeriesDefinitionIndex>
		    </OrthogonalSampleData>
		  </SampleData>
		  <Interactivity/>
		  «emptyMessage»
		«IF c.type.toString == 'pie'»
		  <SeriesDefinitions>
		      <Query>
		        <Definition></Definition>
		      </Query>
		      <SeriesPalette>
		        «IF c.colorpalette != null»«c.colorpalette.compile»«ENDIF»
		      </SeriesPalette>
		«ELSE»
		  <Axes>
		    <Type>«c.xaxe.value.type.toFirstUpper»</Type>
			<Title>
				«IF (c.xaxe.value as Axe).title != null»«(c.xaxe.value as Axe).title.compile»«ELSE»«nullTitle»«ENDIF»
			</Title>
			<TitlePosition>«IF (c.xaxe.value as Axe).title != null»«(c.xaxe.value as Axe).title.place.toFirstUpper»«ENDIF»</TitlePosition>
		    <AssociatedAxes>
		      <Type>«c.yaxe.value.type.toFirstUpper»</Type>
			  <Title>
				«IF (c.yaxe.value as Axe).title != null»«(c.yaxe.value as Axe).title.compile»«ELSE»«nullTitle»«ENDIF»
			  </Title>
			  <TitlePosition>«IF (c.yaxe.value as Axe).title != null»«(c.yaxe.value as Axe).title.place.toFirstUpper»«ENDIF»</TitlePosition>
		«ENDIF»
		      <SeriesDefinitions>
		        <Query>
		        «IF ((c.yaxe.value as Axe).groupingby) != null»
		        	<Definition>
		        		«(c.yaxe.value as Axe).groupingby.compile»
		        	</Definition>
		        	<Grouping>
			          	<GroupType>Text</GroupType>
		        	</Grouping>
		        «ELSE»
		        	<Definition></Definition>
		        «ENDIF»
		        </Query>
		        <SeriesPalette>
		          «IF c.colorpalette != null»«c.colorpalette.compile»«ENDIF»
		        </SeriesPalette>
		        <Series xsi:type="type:«c.type.toString.toFirstUpper»Series">
		          <Visible>true</Visible>
		          <Label>
		            «nullLabel»
		          </Label>
		          <DataDefinition>
					<Definition>
						«IF (c.yaxe.value as Axe).data != null»«(c.yaxe.value as Axe).data.compile»«ENDIF»
					</Definition>
		            <Grouping>
		              <GroupType>Text</GroupType>
		              <AggregateExpression>Sum</AggregateExpression>
		            </Grouping>
		          </DataDefinition>
		          <SeriesIdentifier></SeriesIdentifier>
		          <DataPoint>
		            <Components>
		              <Type>Orthogonal_Value</Type>
		            </Components>
		            <Separator>, </Separator>
		          </DataPoint>
		          <LabelPosition>Outside</LabelPosition>
		          <Stacked>false</Stacked>
		          <Triggers>
		            <Condition>onmouseover</Condition>
		            <Action>
		              <Type>Show_Tooltip</Type>
		              <Value xsi:type="attribute:TooltipValue">
		                <Text></Text>
		                <Delay>200</Delay>
		              </Value>
		            </Action>
		          </Triggers>
		«IF c.type.toString == 'bar'»
		          <Riser>Rectangle</Riser>
		«ELSEIF c.type.toString == 'line'»
		          <Markers>
		            <Type>Box</Type>
		            <Size>4</Size>
		            <Visible>true</Visible>
		            <Outline>
		              <Visible>true</Visible>
		            </Outline>
		          </Markers>
		          <LineAttributes>
		            <Style>Solid</Style>
		            <Thickness>1</Thickness>
		            <Color>
		              <Transparency>255</Transparency>
		              <Red>0</Red>
		              <Green>0</Green>
		              <Blue>0</Blue>
		            </Color>
		            <Visible>true</Visible>
		          </LineAttributes>
		          <PaletteLineColor>true</PaletteLineColor>
		«ELSEIF c.type.toString == 'pie'»
		        <Explosion>0</Explosion>
		        <Title>
		          <Caption>
		            <Value></Value>
		            <Font>
		              <Size>16.0</Size>
		              <Bold>true</Bold>
		              <Alignment/>
		            </Font>
		          </Caption>
		          <Background xsi:type="attribute:ColorDefinition">
		            <Transparency>0</Transparency>
		            <Red>255</Red>
		            <Green>255</Green>
		            <Blue>255</Blue>
		          </Background>
		          <Outline>
		            <Style>Solid</Style>
		            <Thickness>1</Thickness>
		            <Color>
		              <Transparency>255</Transparency>
		              <Red>0</Red>
		              <Green>0</Green>
		              <Blue>0</Blue>
		            </Color>
		          </Outline>
		          <Insets>
		            <Top>0.0</Top>
		            <Left>2.0</Left>
		            <Bottom>0.0</Bottom>
		            <Right>3.0</Right>
		          </Insets>
		          <Visible>true</Visible>
		        </Title>
		        <TitlePosition>Below</TitlePosition>
		        <LeaderLineAttributes>
		          <Style>Solid</Style>
		          <Thickness>1</Thickness>
		          <Visible>true</Visible>
		        </LeaderLineAttributes>
		        <LeaderLineLength>10.0</LeaderLineLength>
		«ENDIF»
		        </Series>
		        <Grouping>
		          <GroupType>Text</GroupType>
		          <AggregateExpression>Sum</AggregateExpression>
		        </Grouping>
		      </SeriesDefinitions>
		«IF c.type.toString != 'pie'»
		      <Orientation>Vertical</Orientation>
		      <LineAttributes>
		        <Style>Solid</Style>
		        <Thickness>1</Thickness>
		        <Color>
		          <Transparency>255</Transparency>
		          <Red>0</Red>
		          <Green>0</Green>
		          <Blue>0</Blue>
		        </Color>
		        <Visible>true</Visible>
		      </LineAttributes>
		      <Label>
		       <Caption>
		        <Value></Value>
		        <Font>
		          <Alignment/>
		        </Font>
		      </Caption>
		      <Background xsi:type="attribute:ColorDefinition">
		        <Transparency>0</Transparency>
		        <Red>255</Red>
		        <Green>255</Green>
		        <Blue>255</Blue>
		      </Background>
		      <Outline>
		        <Style>Solid</Style>
		        <Thickness>1</Thickness>
		        <Color>
		          <Transparency>255</Transparency>
		          <Red>0</Red>
		          <Green>0</Green>
		          <Blue>0</Blue>
		        </Color>
		      </Outline>
		      <Insets>
		        <Top>0.0</Top>
		        <Left>2.0</Left>
		        <Bottom>0.0</Bottom>
		        <Right>3.0</Right>
		      </Insets>
		      <Visible>true</Visible>
		      </Label>
		      <LabelPosition>Left</LabelPosition>
		      <MajorGrid>
				«IF (c.yaxe.value as Axe).majorgrid != null»«((c.yaxe.value as Axe).majorgrid as ChartGrid).compile»
				«ELSE»«nullGrid»«ENDIF»
			  </MajorGrid>
			  <MinorGrid>
				«IF (c.yaxe.value as Axe).minorgrid != null»«((c.yaxe.value as Axe).minorgrid as ChartGrid).compile»
				«ELSE»«nullGrid»«ENDIF»
			  </MinorGrid>
			  <Scale>
			      «IF (c.yaxe.value as Axe).minorgrid != null»
					<MinorGridsPerUnit>«((c.yaxe.value as Axe).minorgrid as ChartGrid).scale»</MinorGridsPerUnit>
			      «ENDIF»
«««			      <ShowOutside>false</ShowOutside>
«««			      <TickBetweenCategories>true</TickBetweenCategories>
			      «IF (c.yaxe.value as Axe).majorgrid != null»
			      	<MajorGridsStepNumber>«((c.yaxe.value as Axe).majorgrid as ChartGrid).scale»</MajorGridsStepNumber>
			      «ENDIF»
			  </Scale>
		      <Origin>
		        <Type>Min</Type>
		        <Value xsi:type="data:NumberDataElement">
		          <Value>0.0</Value>
		        </Value>
		      </Origin>
		      <PrimaryAxis>true</PrimaryAxis>
		      <Percent>false</Percent>
		    </AssociatedAxes>
		    <SeriesDefinitions>
		      <Query>
		        <Definition></Definition>
		      </Query>
		      <SeriesPalette>
		        «IF c.colorpalette != null»«c.colorpalette.compile»«ENDIF»
		      </SeriesPalette>
		«ENDIF»
		      <Series>
		        <Visible>true</Visible>
		        <Label>
		          <Caption>
		            <Value></Value>
		            <Font>
		              <Alignment/>
		            </Font>
		          </Caption>
		          <Background xsi:type="attribute:ColorDefinition">
		            <Transparency>0</Transparency>
		            <Red>255</Red>
		            <Green>255</Green>
		            <Blue>255</Blue>
		          </Background>
		          <Outline>«getOutlineProperties»
		          </Outline>
		          <Insets>
		            <Top>0.0</Top>
		            <Left>2.0</Left>
		            <Bottom>0.0</Bottom>
		            <Right>3.0</Right>
		          </Insets>
		          <Visible>false</Visible>
		        </Label>
		        <DataDefinition>
		          <Definition>
					«IF (c.xaxe.value as Axe).data != null»«(c.xaxe.value as Axe).data.compile»«ENDIF»
				  </Definition>
		        </DataDefinition>
		        <SeriesIdentifier></SeriesIdentifier>
		        <DataPoint>
		          <Components>
		            <Type>Orthogonal_Value</Type>
		          </Components>
		          <Separator>, </Separator>
		        </DataPoint>
		        <LabelPosition>Outside</LabelPosition>
		        <Stacked>false</Stacked>
		      </Series>
		      <Grouping>
		        <Enabled>true</Enabled>
		        <GroupType>Text</GroupType>
		        <AggregateExpression>Sum</AggregateExpression>
		      </Grouping>
		    </SeriesDefinitions>
		«IF c.type.toString != 'pie'»
		    <Orientation>Horizontal</Orientation>
		    <LineAttributes>
		      <Style>Solid</Style>
		      <Thickness>1</Thickness>
		      <Color>
		        <Transparency>255</Transparency>
		        <Red>0</Red>
		        <Green>0</Green>
		        <Blue>0</Blue>
		      </Color>
		      <Visible>true</Visible>
		    </LineAttributes>
		    <Label>
		      <Caption>
		        <Value></Value>
		        <Font>
		          <Alignment/>
		        </Font>
		      </Caption>
		      <Background xsi:type="attribute:ColorDefinition">
		        <Transparency>0</Transparency>
		        <Red>255</Red>
		        <Green>255</Green>
		        <Blue>255</Blue>
		      </Background>
		      <Outline>«getOutlineProperties»</Outline>
		      <Insets>
		        <Top>0.0</Top>
		        <Left>2.0</Left>
		        <Bottom>0.0</Bottom>
		        <Right>3.0</Right>
		      </Insets>
		      <Visible>true</Visible>
		    </Label>
		    <LabelPosition>Below</LabelPosition>
		    <MajorGrid>
				«IF (c.xaxe.value as Axe).majorgrid != null»«((c.xaxe.value as Axe).majorgrid as ChartGrid).compile»
				«ELSE»«nullGrid»«ENDIF»
			</MajorGrid>
			<MinorGrid>
				«IF (c.xaxe.value as Axe).minorgrid != null»«((c.xaxe.value as Axe).minorgrid as ChartGrid).compile»
				«ELSE»«nullGrid»«ENDIF»
			</MinorGrid>
			<Scale>
				«IF (c.xaxe.value as Axe).minorgrid != null»
			      <MinorGridsPerUnit>«((c.xaxe.value as Axe).minorgrid as ChartGrid).scale»</MinorGridsPerUnit>
			    «ENDIF»
«««			      <ShowOutside>false</ShowOutside>
«««			      <TickBetweenCategories>true</TickBetweenCategories>
			    «IF (c.xaxe.value as Axe).majorgrid != null»
			      <MajorGridsStepNumber>«((c.xaxe.value as Axe).majorgrid as ChartGrid).scale»</MajorGridsStepNumber>
			    «ENDIF»
		    </Scale>
		    <Origin>
		      <Type>Min</Type>
		      <Value xsi:type="data:NumberDataElement">
		        <Value>0.0</Value>
		      </Value>
		    </Origin>
		    <PrimaryAxis>true</PrimaryAxis>
		    <CategoryAxis>true</CategoryAxis>
		    <Percent>false</Percent>
		  </Axes>
		  <Orientation>Vertical</Orientation>
		  <UnitSpacing>50.0</UnitSpacing>
		  <Rotation>
		    <Angles>
		      <XAngle>-20.0</XAngle>
		      <YAngle>45.0</YAngle>
		      <ZAngle>0.0</ZAngle>
		      <Type>None</Type>
		    </Angles>
		  </Rotation>
		«ENDIF»
		«IF c.type.toString == 'pie'»
		</model:ChartWithoutAxes>
		«ELSE»
		</model:ChartWithAxes>
		«ENDIF»
		]]></xml-property>
		<property name="outputFormat">SVG</property>
		<property name="inheritColumns">true</property>
		«FOR p : c.properties»
			«p.compile»
		«ENDFOR»
		«IF c.dataset != null»
			«c.dataset.getBoundDataset»
		«ENDIF»
	</extended-item>			
	'''	

def chartTitleBlock(Title t)
'''
	«getNullBounds»
«««	«IF (c.title.properties as ChartElementProperties).padding != null»
«««	«(c.title.properties as ChartElementProperties).padding.compile»
«««	«ENDIF»
	<Insets>
		<Top>3.0</Top>
		<Left>3.0</Left>
		<Bottom>3.0</Bottom>
		<Right>3.0</Right>
	</Insets>
	<Row>-1</Row>
	<Column>-1</Column>
	<Rowspan>-1</Rowspan>
	<Columnspan>-1</Columnspan>
	<Outline>«getOutlineProperties»</Outline>
	<Visible>«IF t != null»true«ELSE»false«ENDIF»</Visible>
	<Label>
		«IF t != null»«t.compile»
		«ELSE»«nullLabel»«ENDIF»
	</Label>
'''
def chartPlotBlock()
'''
  «getNullBounds»
  <Insets>
    <Top>3.0</Top>
    <Left>3.0</Left>
    <Bottom>3.0</Bottom>
    <Right>3.0</Right>
  </Insets>
  <Row>-1</Row>
  <Column>-1</Column>
  <Rowspan>-1</Rowspan>
  <Columnspan>-1</Columnspan>
  <Outline>«getOutlineProperties»</Outline>
  <Visible>true</Visible>
  <HorizontalSpacing>5</HorizontalSpacing>
  <VerticalSpacing>5</VerticalSpacing>
  <ClientArea>
    <Outline>«getOutlineProperties»</Outline>
    <Insets>
      <Top>0.0</Top>
      <Left>0.0</Left>
      <Bottom>0.0</Bottom>
      <Right>0.0</Right>
    </Insets>
  </ClientArea>
'''
def chartLegendBlock(Legend l)
'''
  «getNullBounds»
  <Anchor>«IF l.place.anchor == 'left'»West«
		ELSEIF l.place.anchor == 'right'»East«
		ELSEIF l.place.anchor == 'top'»North«
		ELSEIF l.place.anchor == 'bottom'»South«
		ELSEIF (l.place.anchor == 'middle' && (l.place.position == 'right' || l.place.position == 'left'))»West«
		ELSEIF (l.place.anchor == 'middle' && (l.place.position == 'above' || l.place.position == 'bellow'))»South«
		ELSE»South«ENDIF»</Anchor>
  <Insets>
    <Top>3.0</Top>
    <Left>3.0</Left>
    <Bottom>3.0</Bottom>
    <Right>3.0</Right>
  </Insets>
  <Row>-1</Row>
  <Column>-1</Column>
  <Rowspan>-1</Rowspan>
  <Columnspan>-1</Columnspan>
  <Outline>«getOutlineProperties»</Outline>
  <Visible>«(l.visibility as LegendVisibility).compile.toString.trim»</Visible> 
  <ClientArea>
    <Outline>«getOutlineProperties»</Outline>
    <Insets>
      <Top>2.0</Top>
      <Left>2.0</Left>
      <Bottom>2.0</Bottom>
      <Right>2.0</Right>
    </Insets>
  </ClientArea>
  <Text>
    <Value></Value>
    <Font>
      <Alignment/>
    </Font>
  </Text>
  <Orientation>«IF l.orientation != null»«l.orientation.toString.toFirstUpper»«ELSE»Vertical«ENDIF»</Orientation>
  <Direction>Top_Bottom</Direction>
  <Separator>
    <Style>Solid</Style>
    <Thickness>1</Thickness>
    <Color>
      <Transparency>255</Transparency>
      <Red>0</Red>
      <Green>0</Green>
      <Blue>0</Blue>
    </Color>
    <Visible>true</Visible>
  </Separator>
  <Position>«IF l.place.position != null»«l.place.position.toString.toFirstUpper»«ELSE»Right«ENDIF»</Position>
  <ItemType>«IF (l.eContainer as Chart).type.toString == 'line'»Series«ELSE»Categories«ENDIF»</ItemType>
  <Title>
	«IF l.title != null»«l.title.compile»
	«ELSE»«nullTitle»«ENDIF»
  </Title>
  <TitlePosition>Above</TitlePosition>
'''
def compile(LegendVisibility v)
'''
«IF v != null»«IF v.value == 'hide'»«'false'»«ENDIF»«ELSE»«'true'»«ENDIF»
'''
def getOutlineProperties()
'''
	  <Style>Solid</Style>
	  <Thickness>0</Thickness>
	  <Color>
	    <Transparency>255</Transparency>
	    <Red>0</Red>
	    <Green>0</Green>
	    <Blue>0</Blue>
	  </Color>
	  <Visible>false</Visible>
'''
def xAxeGrid()
'''

'''

def yAxeGrid()
'''

'''
	
/*******************************
* END OF REPORT ELEMENTS
*******************************/
/*******************************
* PROPERTIES GROUP
*******************************/
def compile(LabelProperties p)
'''
	«IF p.font != null»<property name="fontFamily">«p.font.compile»</property>«ENDIF»
	«IF p.fontSize != null»<property name="fontSize">«p.fontSize.compile»</property>«ENDIF»
	«IF p.backgroundColor != null»<property name="backgroundColor">«p.backgroundColor.compile»</property>«ENDIF»
	«IF p.color != null»<property name="color">«p.color.compile»</property>«ENDIF»
	«IF p.HAlign != null»<property name="textAlign">«p.HAlign.compile»</property>«ENDIF»
	«IF p.VAlign != null»<property name="verticalAlign">«p.VAlign.value»</property>«ENDIF»
	«IF p.textStyle != null»«p.textStyle.compile»«ENDIF»
	«IF p.whiteSpace != null»<property name="whiteSpace">«p.whiteSpace.value.getName»</property>«ENDIF»
	«IF p.border != null»«p.border.compile»«ENDIF»
	«IF p.display != null»«p.display.compile»«ENDIF»
	«IF p.padding != null»«p.padding.compile»«ENDIF»
	«IF p.margin != null»«p.margin.compile»«ENDIF»
	«IF p.visibility != null»«p.visibility.compile»«ENDIF»
	«IF p.pagebreak != null»«p.pagebreak.compile»«ENDIF»
	«IF p.toc != null»«p.toc.compile»«ENDIF»
	«IF p.bookmark != null»«p.bookmark.compile»«ENDIF»
	«IF p.style != null»«p.style.compile»«ENDIF»
	«IF p.height != null»«p.height.compile»«ENDIF»
	«IF p.width != null»«p.width.compile»«ENDIF»
	«IF p.alttext != null»«p.alttext.compile»«ENDIF»
'''
def compile(PageProperties p)
'''
	«IF p.font != null»<property name="fontFamily">«p.font.compile»</property>«ENDIF»
	«IF p.fontSize != null»<property name="fontSize">«p.fontSize.compile»</property>«ENDIF»
	«IF p.backgroundColor != null»<property name="backgroundColor">«p.backgroundColor.compile»</property>«ENDIF»
	«IF p.color != null»<property name="color">«p.color.compile»</property>«ENDIF»
	«IF p.HAlign != null»<property name="textAlign">«p.HAlign.compile»</property>«ENDIF»
	«IF p.VAlign != null»<property name="verticalAlign">«p.VAlign.compile»</property>«ENDIF»
	«IF p.textStyle != null»«p.textStyle.compile»«ENDIF»
	«IF p.whiteSpace != null»<property name="whiteSpace">«p.whiteSpace.compile»</property>«ENDIF»
	«IF p.border != null»«p.border.compile»«ENDIF»
	«IF p.display != null»«p.display.compile»«ENDIF»
	«IF p.padding != null»«p.padding.compile»«ENDIF»
	«IF p.margin != null»«p.margin.compile»«ENDIF»
	«IF p.visibility != null»«p.visibility.compile»«ENDIF»
	«IF p.pagebreak != null»«p.pagebreak.compile»«ENDIF»
	«IF p.toc != null»«p.toc.compile»«ENDIF»
	«IF p.bookmark != null»«p.bookmark.compile»«ENDIF»
	«IF p.style != null»«p.style.compile»«ENDIF»
	«IF p.height != null»«p.height.compile»«ENDIF»
	«IF p.width != null»«p.width.compile»«ENDIF»
'''
/*******************************
* END OF PROPERTIES GROUP
*******************************/	
/*******************************
* PROPERTIES
*******************************/
	def compile(Font f)
	'''
		«IF f.linkto != null»
			«(f.linkto as Font).value.toString»
		«ELSE»
			«f.value»
		«ENDIF»
	'''
	def compile(FontSize f)
	'''
		«IF f.linkto != null»
			«IF f.linkto.value instanceof SizeValue»
				«(f.linkto.value as SizeValue).compile»
			«ENDIF»
			«IF f.linkto.value instanceof SizeValuePercent»
				«(f.linkto.value as SizeValuePercent).value.toString»%
			«ENDIF»
			«IF f.linkto.value instanceof SizeValueUnit»
				«(f.linkto.value as SizeValueUnit).value.toString»
			«ENDIF»
		«ELSE»
			«IF f.value instanceof SizeValue»
				«(f.value as SizeValue).compile»
			«ENDIF»
			«IF f.value instanceof SizeValuePercent»
				«(f.value as SizeValuePercent).value.toString»%
			«ENDIF»
			«IF f.value instanceof SizeValueUnit»
				«(f.value as SizeValueUnit).value.toString»
			«ENDIF»
		«ENDIF»
	'''
	def compile(Color b)
	'''
		«IF b instanceof StringColor»
			«(b as StringColor).value»
		«ENDIF»
		«IF b instanceof HexColor»
			«(b as HexColor).value»
		«ENDIF»
	'''
	def compile(HAlignment a)
	'''
		«IF a.linkto != null»
			«a.value = (a.linkto as HAlignment).value»
		«ENDIF»
		«a.value»
	'''
	def compile(VAlignment a)
	'''
		«IF a.linkto != null»
			«a.value = (a.linkto as VAlignment).value»
		«ENDIF»
		«a.value»
	'''
	def compile(TextStyle t)
	'''
		«IF t.b»<property name="fontWeight">bold</property>«ENDIF»
		«IF t.i»<property name="fontStyle">italic</property>«ENDIF»
		«IF t.t»<property name="textLineThrough">line-through</property>«ENDIF»
		«IF t.u»<property name="textUnderline">underline</property>«ENDIF»
	'''
	def compile(Whitespace w)
	'''
		«IF w.linkto != null»
			«w.value = (w.linkto as Whitespace).value»
		«ENDIF»
		«w.value.getName»
	'''
	def compile(Border b)
	'''
		«IF b.linkto != null»
			«IF b.linkto.value instanceof BorderAll»
				«var c = (b.linkto.value as BorderLine).color.compile»
				«var s = (b.linkto.value as BorderLine).style»
				«var w = (b.linkto.value as BorderLine).width.compile»
				<property name="borderBottomColor">«c»</property>
				<property name="borderBottomStyle">«s»</property>
				<property name="borderBottomWidth">«w»</property>
				<property name="borderLeftColor">«c»</property>
				<property name="borderLeftStyle">«s»</property>
				<property name="borderLeftWidth">«w»</property>
				<property name="borderRightColor">«c»</property>
				<property name="borderRightStyle">«s»</property>
				<property name="borderRightWidth">«w»</property>
				<property name="borderTopColor">«c»</property>
				<property name="borderTopStyle">«s»</property>
				<property name="borderTopWidth">«w»</property>
			«ENDIF»
			«IF b.value instanceof BorderSide»
				«IF (b.linkto.value as BorderSide).bottom != null»
					<property name="borderBottomColor">«((b.linkto.value as BorderSide).bottom as BorderLine).color.compile»</property>
					<property name="borderBottomStyle">«((b.linkto.value as BorderSide).bottom as BorderLine).style»</property>
					<property name="borderBottomWidth">«((b.linkto.value as BorderSide).bottom as BorderLine).width.compile»</property>
				«ENDIF»
				«IF (b.linkto.value as BorderSide).left != null»
					<property name="borderLeftColor">«((b.linkto.value as BorderSide).left as BorderLine).color.compile»</property>
					<property name="borderLeftStyle">«((b.linkto.value as BorderSide).left as BorderLine).style»</property>
					<property name="borderLeftWidth">«((b.linkto.value as BorderSide).left as BorderLine).width.compile»</property>
				«ENDIF»
				«IF (b.linkto.value as BorderSide).right != null»
					<property name="borderRightColor">«((b.linkto.value as BorderSide).right as BorderLine).color.compile»</property>
					<property name="borderRightStyle">«((b.linkto.value as BorderSide).right as BorderLine).style»</property>
					<property name="borderRightWidth">«((b.linkto.value as BorderSide).right as BorderLine).width.compile»</property>
				«ENDIF»
				«IF (b.linkto.value as BorderSide).top != null»
					<property name="borderTopColor">«((b.linkto.value as BorderSide).top as BorderLine).color.compile»</property>
					<property name="borderTopStyle">«((b.linkto.value as BorderSide).top as BorderLine).style»</property>
					<property name="borderTopWidth">«((b.linkto.value as BorderSide).top as BorderLine).width.compile»</property>
				«ENDIF»
			«ENDIF»
		«ELSE»
			«IF b.value instanceof BorderAll»
				«var c = (b.value as BorderLine).color.compile»
				«var s = (b.value as BorderLine).style»
				«var w = (b.value as BorderLine).width.compile»
				<property name="borderBottomColor">«c»</property>
				<property name="borderBottomStyle">«s»</property>
				<property name="borderBottomWidth">«w»</property>
				<property name="borderLeftColor">«c»</property>
				<property name="borderLeftStyle">«s»</property>
				<property name="borderLeftWidth">«w»</property>
				<property name="borderRightColor">«c»</property>
				<property name="borderRightStyle">«s»</property>
				<property name="borderRightWidth">«w»</property>
				<property name="borderTopColor">«c»</property>
				<property name="borderTopStyle">«s»</property>
				<property name="borderTopWidth">«w»</property>
			«ENDIF»
			«IF b.value instanceof BorderSide»
				«IF (b.value as BorderSide).bottom != null»
					<property name="borderBottomColor">«((b.value as BorderSide).bottom as BorderLine).color.compile»</property>
					<property name="borderBottomStyle">«((b.value as BorderSide).bottom as BorderLine).style»</property>
					<property name="borderBottomWidth">«((b.value as BorderSide).bottom as BorderLine).width.compile»</property>
				«ENDIF»
				«IF (b.value as BorderSide).left != null»
					<property name="borderLeftColor">«((b.value as BorderSide).left as BorderLine).color.compile»</property>
					<property name="borderLeftStyle">«((b.value as BorderSide).left as BorderLine).style»</property>
					<property name="borderLeftWidth">«((b.value as BorderSide).left as BorderLine).width.compile»</property>
				«ENDIF»
				«IF (b.value as BorderSide).right != null»
					<property name="borderRightColor">«((b.value as BorderSide).right as BorderLine).color.compile»</property>
					<property name="borderRightStyle">«((b.value as BorderSide).right as BorderLine).style»</property>
					<property name="borderRightWidth">«((b.value as BorderSide).right as BorderLine).width.compile»</property>
				«ENDIF»
				«IF (b.value as BorderSide).top != null»
					<property name="borderTopColor">«((b.value as BorderSide).top as BorderLine).color.compile»</property>
					<property name="borderTopStyle">«((b.value as BorderSide).top as BorderLine).style»</property>
					<property name="borderTopWidth">«((b.value as BorderSide).top as BorderLine).width.compile»</property>
				«ENDIF»
			«ENDIF»
		«ENDIF»
		
	'''
	def compile(BorderWidth b)
	'''
		«IF b.value instanceof SizeValue»
			«(b.value as SizeValue).compile»
		«ENDIF»
		«IF b.value instanceof WidthTypeValue»
			«(b.value as WidthTypeValue).value»
		«ENDIF»
	'''
	def compile(SizeValue s)
	'''
		«s.value.toString»«s.unit.toString»
	'''
	def compile(IndentValue i)
	'''
		«IF i.value instanceof SizeValue»
			«(i.value as SizeValue).compile»
		«ENDIF»
		«IF i.value instanceof SizeValuePercent»
			«(i.value as SizeValuePercent).value»%
		«ENDIF»
	'''
	def compile(Padding p)
	'''
		«IF p instanceof IndentAll»
			«(p as IndentAll).compile»
		«ENDIF»
		«IF p instanceof IndentSide»
			«(p as IndentSide).compile»
		«ENDIF»
	'''
	def compile(IndentAll i)
	'''
		«var value = (i as IndentValue).compile»
		«IF i.eContainingFeature.EContainingClass.name == 'PageProperties'»
			<property name="top«i.eContainingFeature.name.toString.toFirstUpper»">«value»</property>
			<property name="left«i.eContainingFeature.name.toString.toFirstUpper»">«value»</property>
			<property name="bottom«i.eContainingFeature.name.toString.toFirstUpper»">«value»</property>
			<property name="right«i.eContainingFeature.name.toString.toFirstUpper»">«value»</property>
		«ELSEIF i.eContainingFeature.EContainingClass.name == 'LabelProperties'»
			<property name="«i.eContainingFeature.name»Top">«value»</property>
			<property name="«i.eContainingFeature.name»Left">«value»</property>
			<property name="«i.eContainingFeature.name»Bottom">«value»</property>
			<property name="«i.eContainingFeature.name»Right">«value»</property>
		«ELSEIF i.eContainingFeature.EContainingClass.name == 'ChartElementProperties'»
			<Insets>
				<Top>«value»</Top>
				<Left>«value»</Left>
				<Bottom>«value»</Bottom>
				<Right>«value»</Right>
			</Insets>
		«ENDIF»
	'''
	def compile(IndentSide i)
	'''
		«IF i.eContainingFeature.EContainingClass.name == 'ChartElementProperties'»
			<property name="
			">«(i as IndentValue).compile»</property>
		«ELSE»
			«FOR e : i.eContents»
				<property name="«
				IF i.eContainingFeature.EContainingClass.name == 'PageProperties'»«
					e.eContainingFeature.name»«
					i.eContainingFeature.name.toString.toFirstUpper»«
				ELSEIF i.eContainingFeature.EContainingClass.name == 'LabelProperties'»«
					i.eContainingFeature.name.toString»«
					e.eContainingFeature.name.toString.toFirstUpper»«
				ENDIF»">
				</property>
			«ENDFOR»
		«ENDIF»
	'''
	def compile(Visibility v)
	'''
		<list-property name="visibility">
		«IF v.show»«ENDIF»
		«IF v instanceof HideAll»
				«(v as HideAll).compile»
		«ENDIF»
		«IF v instanceof HideForOne»
			«FOR x : v.value»
				«(x as HideAll).compile»
			«ENDFOR»
        «ENDIF»
        «IF v instanceof HideForMore»
			«v.compile»
        «ENDIF»
		</list-property>
	'''
	def compile(HideAll h)
	'''
		<structure>
		«IF h.format == null»<property name="format">all</property>«ENDIF»
		«IF h.format != null»<property name="format">«h.format»</property>«ENDIF»
		«IF h.expression == null»<expression name="valueExpr" type="javascript">true</expression>«ENDIF»
		«IF h.expression != null»<expression name="valueExpr" type="javascript">«h.expression.compile»</expression>«ENDIF»
		</structure>
	'''
	def compile(HideForMore h)
	'''
		«FOR f : h.format»
			<structure>
			«IF h.format != null»<property name="format">«f»</property>«ENDIF»
			«IF h.expression == null»<expression name="valueExpr" type="javascript">true</expression>«ENDIF»
			«IF h.expression != null»<expression name="valueExpr" type="javascript">«h.expression.compile»</expression>«ENDIF»
			</structure>
		«ENDFOR»
	'''
	def compile(Display d)
	'''
		<property name="display">«IF d.linkto != null»«d.value = (d.linkto as Display).value»«ENDIF»«d.value.getName»</property>
	'''
	def compile(PageBreak p)
	'''
		«IF p.after != null»<property name="pageBreakAfter">«p.after»</property>«ENDIF»
		«IF p.before != null»<property name="pageBreakBefore">«p.before»</property>«ENDIF»
		«IF p.inside != null»<property name="pageBreakInside">«p.inside»</property>«ENDIF»
		«IF p.repeat != null»<property name="repeatHeader">«p.repeat.value»</property>«ENDIF»
		«IF p.interval != null»<property name="pageBreakInterval">«p.interval.value»</property>«ENDIF»
	'''
	def compile(Toc t)
	'''
		<structure name="toc">
			<expression name="expressionValue" type="javascript">«t.value.compile»</expression>
			«IF t.style != null»
			<property name="TOCStyle">«t.style.refname.name»</property>
			«ENDIF»
		</structure>
	'''
	def compile(Bookmark b)
	'''
		<expression name="bookmark" type="javascript">«b.expression.compile»</expression>
	'''
	def compile(StyleRef s)
	'''
		<property name="style">«s.refname.name»</property>
	'''
	def compile(Style s)
	'''
		<style name="«s.name»" id="«A=A+1»">
		«FOR p : s.properties»
			«p.compile»
		«ENDFOR»
		</style>
	'''
	def compile(Width w)
	'''
		<property name="width">«w.value.compile»</property>
	'''
	def compile(Height h)
	'''
		<property name="height">«h.value.compile»</property>
	'''
	def compile(AltText a)
	'''
		<expression name="altText" type="javascript">«a.expression.compile»</expression>
	'''
	def compile(JSExpression j)
	'''
		«IF j.value instanceof StringLiteral»"«(j.value as StringLiteral).value»"«
		ELSEIF j.value instanceof BooleanLiteral»"«(j.value as BooleanLiteral).value»"«
		ELSEIF j.value.eCrossReferences != null»«
			FOR f : j.value.eCrossReferences»«
				IF f instanceof DatasetField»«
					IF f.eContainingFeature.name == 'field'»«
						'row[&quot;'+f.name+'&quot;]'»«
					ENDIF»«
				ENDIF»«
			ENDFOR»«
		ENDIF»
	'''
	def compile(DatasetField f)
	'''
		«f.name»
	'''
	def getBoundDataset(Dataset d)
	'''
		<property name="dataSet">«d.name»</property>
		<list-property name="boundDataColumns">
		«FOR f : d.field»
			«f.getBoundDataColumns»
		«ENDFOR»
		</list-property>
	'''
	def getBoundDataColumns(DatasetField f)
	'''
		<structure>
			<property name="name">«f.name»</property>
			<expression name="expression">dataSetRow["«f.name»"]</expression>
		</structure>
	'''
	def compile(ColorPalette c)
	'''
		«IF c.linkto != null»
			«FOR e : c.linkto.value»
				«IF e instanceof RgbColor»
					<Entries xsi:type="attribute:ColorDefinition">
						«(e as RgbColor).compile»
					</Entries>
				«ENDIF»
			«ENDFOR»
		«ELSE»
			«FOR e : c.value»
				«IF e instanceof RgbColor»
					<Entries xsi:type="attribute:ColorDefinition">
						«(e as RgbColor).compile»
					</Entries>
				«ENDIF»
			«ENDFOR»
		«ENDIF»
	'''
	def compile(RgbColor c)
	'''
		<Transparency>255</Transparency>
		<Red>«c.r»</Red>
		<Green>«c.g»</Green>
		<Blue>«c.b»</Blue>
	'''
	def compile(Title t)
	'''
		 <Caption>
		  <Value>«t.value»</Value>
		  <Font>
		   <Size>16.0</Size>
		   <Bold>true</Bold>
		   <Alignment>
		    <horizontalAlignment>Center</horizontalAlignment>
		    <verticalAlignment>Center</verticalAlignment>
		   </Alignment>
		  </Font>
		 </Caption>
		 <Background xsi:type="attribute:ColorDefinition">
		  <Transparency>0</Transparency>
		  <Red>255</Red>
		  <Green>255</Green>
		  <Blue>255</Blue>
		 </Background>
		 <Outline>
		  <Style>Solid</Style>
		  <Thickness>1</Thickness>
		  <Color>
		   <Transparency>255</Transparency>
		   <Red>0</Red>
		   <Green>0</Green>
		   <Blue>0</Blue>
		  </Color>
		  <Visible>false</Visible>
		 </Outline>
		 <Insets>
		  <Top>0.0</Top>
		  <Left>2.0</Left>
		  <Bottom>0.0</Bottom>
		  <Right>3.0</Right>
		 </Insets>
		 <Visible>true</Visible>
	'''
	def nullTitle()
	'''
      «getNullBounds»
      <Insets>
        <Top>3.0</Top>
        <Left>3.0</Left>
        <Bottom>3.0</Bottom>
        <Right>3.0</Right>
      </Insets>
      <Row>-1</Row>
      <Column>-1</Column>
      <Rowspan>-1</Rowspan>
      <Columnspan>-1</Columnspan>
      <Outline>
        <Style>Solid</Style>
        <Thickness>1</Thickness>
        <Color>
          <Transparency>255</Transparency>
          <Red>0</Red>
          <Green>0</Green>
          <Blue>0</Blue>
        </Color>
        <Visible>false</Visible>
      </Outline>
      <Visible>false</Visible>
      <Label>
        «nullLabel»
      </Label>
	'''
	def compile(ChartGrid c)
	'''
		<LineAttributes>
			<Style>Solid</Style>
			<Thickness>1</Thickness>
			<Color>
				<Transparency>255</Transparency>
				<Red>196</Red>
				<Green>196</Green>
				<Blue>196</Blue>
			</Color>
			<Visible>true</Visible>
		</LineAttributes>
		<TickStyle>Across</TickStyle>
		<TickAttributes>
			<Style>Solid</Style>
			<Thickness>1</Thickness>
			<Color>
				<Transparency>255</Transparency>
				<Red>196</Red>
				<Green>196</Green>
				<Blue>196</Blue>
			</Color>
			<Visible>true</Visible>
		</TickAttributes>
	'''
	def nullLabel()
	'''
		<Caption>
		  <Value>Chart Title</Value>
		  <Font>
		    <Bold>false</Bold>
		    <Alignment>
		      <horizontalAlignment>Center</horizontalAlignment>
		      <verticalAlignment>Center</verticalAlignment>
		    </Alignment>
		  </Font>
		</Caption>
		<Background xsi:type="attribute:ColorDefinition">
		  <Transparency>0</Transparency>
		  <Red>255</Red>
		  <Green>255</Green>
		  <Blue>255</Blue>
		</Background>
		<Outline>
		  <Style>Solid</Style>
		  <Thickness>1</Thickness>
		  <Color>
		    <Transparency>255</Transparency>
		    <Red>0</Red>
		    <Green>0</Green>
		    <Blue>0</Blue>
		  </Color>
		</Outline>
		<Insets>
		  <Top>0.0</Top>
		  <Left>2.0</Left>
		  <Bottom>0.0</Bottom>
		  <Right>3.0</Right>
		</Insets>
		<Visible>false</Visible>
	'''
	def nullGrid()
	'''
		<LineAttributes>
			<Style>Solid</Style>
			<Thickness>1</Thickness>
			<Color>
				<Transparency>255</Transparency>
				<Red>196</Red>
				<Green>196</Green>
				<Blue>196</Blue>
			</Color>
			<Visible>false</Visible>
		</LineAttributes>
		<TickStyle>Across</TickStyle>
		<TickAttributes>
			<Style>Solid</Style>
			<Thickness>1</Thickness>
			<Color>
				<Transparency>255</Transparency>
				<Red>196</Red>
				<Green>196</Green>
				<Blue>196</Blue>
			</Color>
			<Visible>true</Visible>
		</TickAttributes>
	'''
	def emptyMessage()
	'''
		<EmptyMessage>
			<Caption>
				<Value>This chart contains no data.</Value>
				<Font>
					<Alignment>
						<horizontalAlignment>Center</horizontalAlignment>
						<verticalAlignment>Center</verticalAlignment>
					</Alignment>
				</Font>
			</Caption>
			<Background xsi:type="attribute:ColorDefinition">
				<Transparency>64</Transparency>
				<Red>127</Red>
				<Green>127</Green>
				<Blue>127</Blue>
			</Background>
			<Outline>
				<Color>
					<Transparency>128</Transparency>
					<Red>127</Red>
					<Green>127</Green>
					<Blue>127</Blue>
				</Color>
				<Visible>true</Visible>
			</Outline>
			<Insets>
				<Top>10.0</Top>
				<Left>10.0</Left>
				<Bottom>10.0</Bottom>
				<Right>10.0</Right>
			</Insets>
			<Visible>false</Visible>
		</EmptyMessage>
	'''
	def getNullBounds()
	'''
		<Bounds>
			<Left>0.0</Left>
			<Top>0.0</Top>
			<Width>0.0</Width>
			<Height>0.0</Height>
		</Bounds>
	'''

/*******************************
* END OF PROPERTIES
*******************************/
}